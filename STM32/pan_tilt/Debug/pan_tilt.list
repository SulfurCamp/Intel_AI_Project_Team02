
pan_tilt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005184  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000170  08005324  08005324  00006324  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005494  08005494  0000706c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08005494  08005494  00006494  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800549c  0800549c  0000706c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800549c  0800549c  0000649c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080054a0  080054a0  000064a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  080054a4  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000025c  2000006c  08005510  0000706c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002c8  08005510  000072c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000706c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d72b  00000000  00000000  0000709c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ed0  00000000  00000000  000147c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d40  00000000  00000000  00016698  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a59  00000000  00000000  000173d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001733b  00000000  00000000  00017e31  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e063  00000000  00000000  0002f16c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000904a4  00000000  00000000  0003d1cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000cd673  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000041f4  00000000  00000000  000cd6b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000053  00000000  00000000  000d18ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000006c 	.word	0x2000006c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800530c 	.word	0x0800530c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000070 	.word	0x20000070
 80001dc:	0800530c 	.word	0x0800530c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002a4:	f000 b988 	b.w	80005b8 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	468e      	mov	lr, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	4688      	mov	r8, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d962      	bls.n	800039c <__udivmoddi4+0xdc>
 80002d6:	fab2 f682 	clz	r6, r2
 80002da:	b14e      	cbz	r6, 80002f0 <__udivmoddi4+0x30>
 80002dc:	f1c6 0320 	rsb	r3, r6, #32
 80002e0:	fa01 f806 	lsl.w	r8, r1, r6
 80002e4:	fa20 f303 	lsr.w	r3, r0, r3
 80002e8:	40b7      	lsls	r7, r6
 80002ea:	ea43 0808 	orr.w	r8, r3, r8
 80002ee:	40b4      	lsls	r4, r6
 80002f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f4:	fa1f fc87 	uxth.w	ip, r7
 80002f8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002fc:	0c23      	lsrs	r3, r4, #16
 80002fe:	fb0e 8811 	mls	r8, lr, r1, r8
 8000302:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000306:	fb01 f20c 	mul.w	r2, r1, ip
 800030a:	429a      	cmp	r2, r3
 800030c:	d909      	bls.n	8000322 <__udivmoddi4+0x62>
 800030e:	18fb      	adds	r3, r7, r3
 8000310:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000314:	f080 80ea 	bcs.w	80004ec <__udivmoddi4+0x22c>
 8000318:	429a      	cmp	r2, r3
 800031a:	f240 80e7 	bls.w	80004ec <__udivmoddi4+0x22c>
 800031e:	3902      	subs	r1, #2
 8000320:	443b      	add	r3, r7
 8000322:	1a9a      	subs	r2, r3, r2
 8000324:	b2a3      	uxth	r3, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000332:	fb00 fc0c 	mul.w	ip, r0, ip
 8000336:	459c      	cmp	ip, r3
 8000338:	d909      	bls.n	800034e <__udivmoddi4+0x8e>
 800033a:	18fb      	adds	r3, r7, r3
 800033c:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000340:	f080 80d6 	bcs.w	80004f0 <__udivmoddi4+0x230>
 8000344:	459c      	cmp	ip, r3
 8000346:	f240 80d3 	bls.w	80004f0 <__udivmoddi4+0x230>
 800034a:	443b      	add	r3, r7
 800034c:	3802      	subs	r0, #2
 800034e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000352:	eba3 030c 	sub.w	r3, r3, ip
 8000356:	2100      	movs	r1, #0
 8000358:	b11d      	cbz	r5, 8000362 <__udivmoddi4+0xa2>
 800035a:	40f3      	lsrs	r3, r6
 800035c:	2200      	movs	r2, #0
 800035e:	e9c5 3200 	strd	r3, r2, [r5]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d905      	bls.n	8000376 <__udivmoddi4+0xb6>
 800036a:	b10d      	cbz	r5, 8000370 <__udivmoddi4+0xb0>
 800036c:	e9c5 0100 	strd	r0, r1, [r5]
 8000370:	2100      	movs	r1, #0
 8000372:	4608      	mov	r0, r1
 8000374:	e7f5      	b.n	8000362 <__udivmoddi4+0xa2>
 8000376:	fab3 f183 	clz	r1, r3
 800037a:	2900      	cmp	r1, #0
 800037c:	d146      	bne.n	800040c <__udivmoddi4+0x14c>
 800037e:	4573      	cmp	r3, lr
 8000380:	d302      	bcc.n	8000388 <__udivmoddi4+0xc8>
 8000382:	4282      	cmp	r2, r0
 8000384:	f200 8105 	bhi.w	8000592 <__udivmoddi4+0x2d2>
 8000388:	1a84      	subs	r4, r0, r2
 800038a:	eb6e 0203 	sbc.w	r2, lr, r3
 800038e:	2001      	movs	r0, #1
 8000390:	4690      	mov	r8, r2
 8000392:	2d00      	cmp	r5, #0
 8000394:	d0e5      	beq.n	8000362 <__udivmoddi4+0xa2>
 8000396:	e9c5 4800 	strd	r4, r8, [r5]
 800039a:	e7e2      	b.n	8000362 <__udivmoddi4+0xa2>
 800039c:	2a00      	cmp	r2, #0
 800039e:	f000 8090 	beq.w	80004c2 <__udivmoddi4+0x202>
 80003a2:	fab2 f682 	clz	r6, r2
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	f040 80a4 	bne.w	80004f4 <__udivmoddi4+0x234>
 80003ac:	1a8a      	subs	r2, r1, r2
 80003ae:	0c03      	lsrs	r3, r0, #16
 80003b0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003b4:	b280      	uxth	r0, r0
 80003b6:	b2bc      	uxth	r4, r7
 80003b8:	2101      	movs	r1, #1
 80003ba:	fbb2 fcfe 	udiv	ip, r2, lr
 80003be:	fb0e 221c 	mls	r2, lr, ip, r2
 80003c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003c6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ca:	429a      	cmp	r2, r3
 80003cc:	d907      	bls.n	80003de <__udivmoddi4+0x11e>
 80003ce:	18fb      	adds	r3, r7, r3
 80003d0:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 80003d4:	d202      	bcs.n	80003dc <__udivmoddi4+0x11c>
 80003d6:	429a      	cmp	r2, r3
 80003d8:	f200 80e0 	bhi.w	800059c <__udivmoddi4+0x2dc>
 80003dc:	46c4      	mov	ip, r8
 80003de:	1a9b      	subs	r3, r3, r2
 80003e0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003e4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003e8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003ec:	fb02 f404 	mul.w	r4, r2, r4
 80003f0:	429c      	cmp	r4, r3
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x144>
 80003f4:	18fb      	adds	r3, r7, r3
 80003f6:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x142>
 80003fc:	429c      	cmp	r4, r3
 80003fe:	f200 80ca 	bhi.w	8000596 <__udivmoddi4+0x2d6>
 8000402:	4602      	mov	r2, r0
 8000404:	1b1b      	subs	r3, r3, r4
 8000406:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800040a:	e7a5      	b.n	8000358 <__udivmoddi4+0x98>
 800040c:	f1c1 0620 	rsb	r6, r1, #32
 8000410:	408b      	lsls	r3, r1
 8000412:	fa22 f706 	lsr.w	r7, r2, r6
 8000416:	431f      	orrs	r7, r3
 8000418:	fa0e f401 	lsl.w	r4, lr, r1
 800041c:	fa20 f306 	lsr.w	r3, r0, r6
 8000420:	fa2e fe06 	lsr.w	lr, lr, r6
 8000424:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000428:	4323      	orrs	r3, r4
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	fa1f fc87 	uxth.w	ip, r7
 8000432:	fbbe f0f9 	udiv	r0, lr, r9
 8000436:	0c1c      	lsrs	r4, r3, #16
 8000438:	fb09 ee10 	mls	lr, r9, r0, lr
 800043c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000440:	fb00 fe0c 	mul.w	lr, r0, ip
 8000444:	45a6      	cmp	lr, r4
 8000446:	fa02 f201 	lsl.w	r2, r2, r1
 800044a:	d909      	bls.n	8000460 <__udivmoddi4+0x1a0>
 800044c:	193c      	adds	r4, r7, r4
 800044e:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000452:	f080 809c 	bcs.w	800058e <__udivmoddi4+0x2ce>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f240 8099 	bls.w	800058e <__udivmoddi4+0x2ce>
 800045c:	3802      	subs	r0, #2
 800045e:	443c      	add	r4, r7
 8000460:	eba4 040e 	sub.w	r4, r4, lr
 8000464:	fa1f fe83 	uxth.w	lr, r3
 8000468:	fbb4 f3f9 	udiv	r3, r4, r9
 800046c:	fb09 4413 	mls	r4, r9, r3, r4
 8000470:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000474:	fb03 fc0c 	mul.w	ip, r3, ip
 8000478:	45a4      	cmp	ip, r4
 800047a:	d908      	bls.n	800048e <__udivmoddi4+0x1ce>
 800047c:	193c      	adds	r4, r7, r4
 800047e:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000482:	f080 8082 	bcs.w	800058a <__udivmoddi4+0x2ca>
 8000486:	45a4      	cmp	ip, r4
 8000488:	d97f      	bls.n	800058a <__udivmoddi4+0x2ca>
 800048a:	3b02      	subs	r3, #2
 800048c:	443c      	add	r4, r7
 800048e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000492:	eba4 040c 	sub.w	r4, r4, ip
 8000496:	fba0 ec02 	umull	lr, ip, r0, r2
 800049a:	4564      	cmp	r4, ip
 800049c:	4673      	mov	r3, lr
 800049e:	46e1      	mov	r9, ip
 80004a0:	d362      	bcc.n	8000568 <__udivmoddi4+0x2a8>
 80004a2:	d05f      	beq.n	8000564 <__udivmoddi4+0x2a4>
 80004a4:	b15d      	cbz	r5, 80004be <__udivmoddi4+0x1fe>
 80004a6:	ebb8 0203 	subs.w	r2, r8, r3
 80004aa:	eb64 0409 	sbc.w	r4, r4, r9
 80004ae:	fa04 f606 	lsl.w	r6, r4, r6
 80004b2:	fa22 f301 	lsr.w	r3, r2, r1
 80004b6:	431e      	orrs	r6, r3
 80004b8:	40cc      	lsrs	r4, r1
 80004ba:	e9c5 6400 	strd	r6, r4, [r5]
 80004be:	2100      	movs	r1, #0
 80004c0:	e74f      	b.n	8000362 <__udivmoddi4+0xa2>
 80004c2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004c6:	0c01      	lsrs	r1, r0, #16
 80004c8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004cc:	b280      	uxth	r0, r0
 80004ce:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004d2:	463b      	mov	r3, r7
 80004d4:	4638      	mov	r0, r7
 80004d6:	463c      	mov	r4, r7
 80004d8:	46b8      	mov	r8, r7
 80004da:	46be      	mov	lr, r7
 80004dc:	2620      	movs	r6, #32
 80004de:	fbb1 f1f7 	udiv	r1, r1, r7
 80004e2:	eba2 0208 	sub.w	r2, r2, r8
 80004e6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004ea:	e766      	b.n	80003ba <__udivmoddi4+0xfa>
 80004ec:	4601      	mov	r1, r0
 80004ee:	e718      	b.n	8000322 <__udivmoddi4+0x62>
 80004f0:	4610      	mov	r0, r2
 80004f2:	e72c      	b.n	800034e <__udivmoddi4+0x8e>
 80004f4:	f1c6 0220 	rsb	r2, r6, #32
 80004f8:	fa2e f302 	lsr.w	r3, lr, r2
 80004fc:	40b7      	lsls	r7, r6
 80004fe:	40b1      	lsls	r1, r6
 8000500:	fa20 f202 	lsr.w	r2, r0, r2
 8000504:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000508:	430a      	orrs	r2, r1
 800050a:	fbb3 f8fe 	udiv	r8, r3, lr
 800050e:	b2bc      	uxth	r4, r7
 8000510:	fb0e 3318 	mls	r3, lr, r8, r3
 8000514:	0c11      	lsrs	r1, r2, #16
 8000516:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800051a:	fb08 f904 	mul.w	r9, r8, r4
 800051e:	40b0      	lsls	r0, r6
 8000520:	4589      	cmp	r9, r1
 8000522:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000526:	b280      	uxth	r0, r0
 8000528:	d93e      	bls.n	80005a8 <__udivmoddi4+0x2e8>
 800052a:	1879      	adds	r1, r7, r1
 800052c:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000530:	d201      	bcs.n	8000536 <__udivmoddi4+0x276>
 8000532:	4589      	cmp	r9, r1
 8000534:	d81f      	bhi.n	8000576 <__udivmoddi4+0x2b6>
 8000536:	eba1 0109 	sub.w	r1, r1, r9
 800053a:	fbb1 f9fe 	udiv	r9, r1, lr
 800053e:	fb09 f804 	mul.w	r8, r9, r4
 8000542:	fb0e 1119 	mls	r1, lr, r9, r1
 8000546:	b292      	uxth	r2, r2
 8000548:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800054c:	4542      	cmp	r2, r8
 800054e:	d229      	bcs.n	80005a4 <__udivmoddi4+0x2e4>
 8000550:	18ba      	adds	r2, r7, r2
 8000552:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000556:	d2c4      	bcs.n	80004e2 <__udivmoddi4+0x222>
 8000558:	4542      	cmp	r2, r8
 800055a:	d2c2      	bcs.n	80004e2 <__udivmoddi4+0x222>
 800055c:	f1a9 0102 	sub.w	r1, r9, #2
 8000560:	443a      	add	r2, r7
 8000562:	e7be      	b.n	80004e2 <__udivmoddi4+0x222>
 8000564:	45f0      	cmp	r8, lr
 8000566:	d29d      	bcs.n	80004a4 <__udivmoddi4+0x1e4>
 8000568:	ebbe 0302 	subs.w	r3, lr, r2
 800056c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000570:	3801      	subs	r0, #1
 8000572:	46e1      	mov	r9, ip
 8000574:	e796      	b.n	80004a4 <__udivmoddi4+0x1e4>
 8000576:	eba7 0909 	sub.w	r9, r7, r9
 800057a:	4449      	add	r1, r9
 800057c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000580:	fbb1 f9fe 	udiv	r9, r1, lr
 8000584:	fb09 f804 	mul.w	r8, r9, r4
 8000588:	e7db      	b.n	8000542 <__udivmoddi4+0x282>
 800058a:	4673      	mov	r3, lr
 800058c:	e77f      	b.n	800048e <__udivmoddi4+0x1ce>
 800058e:	4650      	mov	r0, sl
 8000590:	e766      	b.n	8000460 <__udivmoddi4+0x1a0>
 8000592:	4608      	mov	r0, r1
 8000594:	e6fd      	b.n	8000392 <__udivmoddi4+0xd2>
 8000596:	443b      	add	r3, r7
 8000598:	3a02      	subs	r2, #2
 800059a:	e733      	b.n	8000404 <__udivmoddi4+0x144>
 800059c:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a0:	443b      	add	r3, r7
 80005a2:	e71c      	b.n	80003de <__udivmoddi4+0x11e>
 80005a4:	4649      	mov	r1, r9
 80005a6:	e79c      	b.n	80004e2 <__udivmoddi4+0x222>
 80005a8:	eba1 0109 	sub.w	r1, r1, r9
 80005ac:	46c4      	mov	ip, r8
 80005ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b2:	fb09 f804 	mul.w	r8, r9, r4
 80005b6:	e7c4      	b.n	8000542 <__udivmoddi4+0x282>

080005b8 <__aeabi_idiv0>:
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop

080005bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005c0:	f000 fee0 	bl	8001384 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005c4:	f000 f83e 	bl	8000644 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005c8:	f000 f98a 	bl	80008e0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005cc:	f000 f95e 	bl	800088c <MX_USART2_UART_Init>
  MX_TIM2_Init();
 80005d0:	f000 f8a2 	bl	8000718 <MX_TIM2_Init>
  MX_TIM3_Init();
 80005d4:	f000 f904 	bl	80007e0 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim3);
 80005d8:	4812      	ldr	r0, [pc, #72]	@ (8000624 <main+0x68>)
 80005da:	f001 ff1f 	bl	800241c <HAL_TIM_Base_Start_IT>

  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1); // PA0
 80005de:	2100      	movs	r1, #0
 80005e0:	4811      	ldr	r0, [pc, #68]	@ (8000628 <main+0x6c>)
 80005e2:	f002 f81b 	bl	800261c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2); // PA1
 80005e6:	2104      	movs	r1, #4
 80005e8:	480f      	ldr	r0, [pc, #60]	@ (8000628 <main+0x6c>)
 80005ea:	f002 f817 	bl	800261c <HAL_TIM_PWM_Start>

  set_servo_degree(current_servo_degree);
 80005ee:	4b0f      	ldr	r3, [pc, #60]	@ (800062c <main+0x70>)
 80005f0:	781b      	ldrb	r3, [r3, #0]
 80005f2:	4618      	mov	r0, r3
 80005f4:	f000 fa24 	bl	8000a40 <set_servo_degree>
  set_servo2_degree(current_servo2_degree);
 80005f8:	4b0d      	ldr	r3, [pc, #52]	@ (8000630 <main+0x74>)
 80005fa:	781b      	ldrb	r3, [r3, #0]
 80005fc:	4618      	mov	r0, r3
 80005fe:	f000 fa53 	bl	8000aa8 <set_servo2_degree>

  HAL_UART_Receive_IT(&huart2, &rx_ch, 1);
 8000602:	2201      	movs	r2, #1
 8000604:	490b      	ldr	r1, [pc, #44]	@ (8000634 <main+0x78>)
 8000606:	480c      	ldr	r0, [pc, #48]	@ (8000638 <main+0x7c>)
 8000608:	f002 fe83 	bl	8003312 <HAL_UART_Receive_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	if (rx_flag) {
 800060c:	4b0b      	ldr	r3, [pc, #44]	@ (800063c <main+0x80>)
 800060e:	781b      	ldrb	r3, [r3, #0]
 8000610:	b2db      	uxtb	r3, r3
 8000612:	2b00      	cmp	r3, #0
 8000614:	d0fa      	beq.n	800060c <main+0x50>
		parsing_command(cmd_buf);    // 수신 명령 처리
 8000616:	480a      	ldr	r0, [pc, #40]	@ (8000640 <main+0x84>)
 8000618:	f000 fab8 	bl	8000b8c <parsing_command>
		rx_flag = 0;
 800061c:	4b07      	ldr	r3, [pc, #28]	@ (800063c <main+0x80>)
 800061e:	2200      	movs	r2, #0
 8000620:	701a      	strb	r2, [r3, #0]
	if (rx_flag) {
 8000622:	e7f3      	b.n	800060c <main+0x50>
 8000624:	200000d0 	.word	0x200000d0
 8000628:	20000088 	.word	0x20000088
 800062c:	20000173 	.word	0x20000173
 8000630:	20000000 	.word	0x20000000
 8000634:	20000170 	.word	0x20000170
 8000638:	20000118 	.word	0x20000118
 800063c:	20000172 	.word	0x20000172
 8000640:	20000168 	.word	0x20000168

08000644 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b094      	sub	sp, #80	@ 0x50
 8000648:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800064a:	f107 0320 	add.w	r3, r7, #32
 800064e:	2230      	movs	r2, #48	@ 0x30
 8000650:	2100      	movs	r1, #0
 8000652:	4618      	mov	r0, r3
 8000654:	f003 fff8 	bl	8004648 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000658:	f107 030c 	add.w	r3, r7, #12
 800065c:	2200      	movs	r2, #0
 800065e:	601a      	str	r2, [r3, #0]
 8000660:	605a      	str	r2, [r3, #4]
 8000662:	609a      	str	r2, [r3, #8]
 8000664:	60da      	str	r2, [r3, #12]
 8000666:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000668:	2300      	movs	r3, #0
 800066a:	60bb      	str	r3, [r7, #8]
 800066c:	4b28      	ldr	r3, [pc, #160]	@ (8000710 <SystemClock_Config+0xcc>)
 800066e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000670:	4a27      	ldr	r2, [pc, #156]	@ (8000710 <SystemClock_Config+0xcc>)
 8000672:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000676:	6413      	str	r3, [r2, #64]	@ 0x40
 8000678:	4b25      	ldr	r3, [pc, #148]	@ (8000710 <SystemClock_Config+0xcc>)
 800067a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800067c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000680:	60bb      	str	r3, [r7, #8]
 8000682:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000684:	2300      	movs	r3, #0
 8000686:	607b      	str	r3, [r7, #4]
 8000688:	4b22      	ldr	r3, [pc, #136]	@ (8000714 <SystemClock_Config+0xd0>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	4a21      	ldr	r2, [pc, #132]	@ (8000714 <SystemClock_Config+0xd0>)
 800068e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000692:	6013      	str	r3, [r2, #0]
 8000694:	4b1f      	ldr	r3, [pc, #124]	@ (8000714 <SystemClock_Config+0xd0>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800069c:	607b      	str	r3, [r7, #4]
 800069e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006a0:	2302      	movs	r3, #2
 80006a2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006a4:	2301      	movs	r3, #1
 80006a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006a8:	2310      	movs	r3, #16
 80006aa:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006ac:	2302      	movs	r3, #2
 80006ae:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006b0:	2300      	movs	r3, #0
 80006b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80006b4:	2310      	movs	r3, #16
 80006b6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80006b8:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80006bc:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80006be:	2304      	movs	r3, #4
 80006c0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006c2:	2304      	movs	r3, #4
 80006c4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006c6:	f107 0320 	add.w	r3, r7, #32
 80006ca:	4618      	mov	r0, r3
 80006cc:	f001 fa0e 	bl	8001aec <HAL_RCC_OscConfig>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d001      	beq.n	80006da <SystemClock_Config+0x96>
  {
    Error_Handler();
 80006d6:	f000 fc01 	bl	8000edc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006da:	230f      	movs	r3, #15
 80006dc:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006de:	2302      	movs	r3, #2
 80006e0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006e2:	2300      	movs	r3, #0
 80006e4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006e6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006ea:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006ec:	2300      	movs	r3, #0
 80006ee:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006f0:	f107 030c 	add.w	r3, r7, #12
 80006f4:	2102      	movs	r1, #2
 80006f6:	4618      	mov	r0, r3
 80006f8:	f001 fc70 	bl	8001fdc <HAL_RCC_ClockConfig>
 80006fc:	4603      	mov	r3, r0
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d001      	beq.n	8000706 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000702:	f000 fbeb 	bl	8000edc <Error_Handler>
  }
}
 8000706:	bf00      	nop
 8000708:	3750      	adds	r7, #80	@ 0x50
 800070a:	46bd      	mov	sp, r7
 800070c:	bd80      	pop	{r7, pc}
 800070e:	bf00      	nop
 8000710:	40023800 	.word	0x40023800
 8000714:	40007000 	.word	0x40007000

08000718 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b08a      	sub	sp, #40	@ 0x28
 800071c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800071e:	f107 0320 	add.w	r3, r7, #32
 8000722:	2200      	movs	r2, #0
 8000724:	601a      	str	r2, [r3, #0]
 8000726:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000728:	1d3b      	adds	r3, r7, #4
 800072a:	2200      	movs	r2, #0
 800072c:	601a      	str	r2, [r3, #0]
 800072e:	605a      	str	r2, [r3, #4]
 8000730:	609a      	str	r2, [r3, #8]
 8000732:	60da      	str	r2, [r3, #12]
 8000734:	611a      	str	r2, [r3, #16]
 8000736:	615a      	str	r2, [r3, #20]
 8000738:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800073a:	4b28      	ldr	r3, [pc, #160]	@ (80007dc <MX_TIM2_Init+0xc4>)
 800073c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000740:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 84-1;
 8000742:	4b26      	ldr	r3, [pc, #152]	@ (80007dc <MX_TIM2_Init+0xc4>)
 8000744:	2253      	movs	r2, #83	@ 0x53
 8000746:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000748:	4b24      	ldr	r3, [pc, #144]	@ (80007dc <MX_TIM2_Init+0xc4>)
 800074a:	2200      	movs	r2, #0
 800074c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 20000-1;
 800074e:	4b23      	ldr	r3, [pc, #140]	@ (80007dc <MX_TIM2_Init+0xc4>)
 8000750:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8000754:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000756:	4b21      	ldr	r3, [pc, #132]	@ (80007dc <MX_TIM2_Init+0xc4>)
 8000758:	2200      	movs	r2, #0
 800075a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800075c:	4b1f      	ldr	r3, [pc, #124]	@ (80007dc <MX_TIM2_Init+0xc4>)
 800075e:	2200      	movs	r2, #0
 8000760:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000762:	481e      	ldr	r0, [pc, #120]	@ (80007dc <MX_TIM2_Init+0xc4>)
 8000764:	f001 ff0b 	bl	800257e <HAL_TIM_PWM_Init>
 8000768:	4603      	mov	r3, r0
 800076a:	2b00      	cmp	r3, #0
 800076c:	d001      	beq.n	8000772 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 800076e:	f000 fbb5 	bl	8000edc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000772:	2300      	movs	r3, #0
 8000774:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000776:	2300      	movs	r3, #0
 8000778:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800077a:	f107 0320 	add.w	r3, r7, #32
 800077e:	4619      	mov	r1, r3
 8000780:	4816      	ldr	r0, [pc, #88]	@ (80007dc <MX_TIM2_Init+0xc4>)
 8000782:	f002 fc69 	bl	8003058 <HAL_TIMEx_MasterConfigSynchronization>
 8000786:	4603      	mov	r3, r0
 8000788:	2b00      	cmp	r3, #0
 800078a:	d001      	beq.n	8000790 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 800078c:	f000 fba6 	bl	8000edc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000790:	2360      	movs	r3, #96	@ 0x60
 8000792:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000794:	2300      	movs	r3, #0
 8000796:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000798:	2300      	movs	r3, #0
 800079a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800079c:	2300      	movs	r3, #0
 800079e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80007a0:	1d3b      	adds	r3, r7, #4
 80007a2:	2200      	movs	r2, #0
 80007a4:	4619      	mov	r1, r3
 80007a6:	480d      	ldr	r0, [pc, #52]	@ (80007dc <MX_TIM2_Init+0xc4>)
 80007a8:	f002 f934 	bl	8002a14 <HAL_TIM_PWM_ConfigChannel>
 80007ac:	4603      	mov	r3, r0
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d001      	beq.n	80007b6 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 80007b2:	f000 fb93 	bl	8000edc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80007b6:	1d3b      	adds	r3, r7, #4
 80007b8:	2204      	movs	r2, #4
 80007ba:	4619      	mov	r1, r3
 80007bc:	4807      	ldr	r0, [pc, #28]	@ (80007dc <MX_TIM2_Init+0xc4>)
 80007be:	f002 f929 	bl	8002a14 <HAL_TIM_PWM_ConfigChannel>
 80007c2:	4603      	mov	r3, r0
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d001      	beq.n	80007cc <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80007c8:	f000 fb88 	bl	8000edc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80007cc:	4803      	ldr	r0, [pc, #12]	@ (80007dc <MX_TIM2_Init+0xc4>)
 80007ce:	f000 fc01 	bl	8000fd4 <HAL_TIM_MspPostInit>

}
 80007d2:	bf00      	nop
 80007d4:	3728      	adds	r7, #40	@ 0x28
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bd80      	pop	{r7, pc}
 80007da:	bf00      	nop
 80007dc:	20000088 	.word	0x20000088

080007e0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b08a      	sub	sp, #40	@ 0x28
 80007e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007e6:	f107 0320 	add.w	r3, r7, #32
 80007ea:	2200      	movs	r2, #0
 80007ec:	601a      	str	r2, [r3, #0]
 80007ee:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80007f0:	1d3b      	adds	r3, r7, #4
 80007f2:	2200      	movs	r2, #0
 80007f4:	601a      	str	r2, [r3, #0]
 80007f6:	605a      	str	r2, [r3, #4]
 80007f8:	609a      	str	r2, [r3, #8]
 80007fa:	60da      	str	r2, [r3, #12]
 80007fc:	611a      	str	r2, [r3, #16]
 80007fe:	615a      	str	r2, [r3, #20]
 8000800:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000802:	4b20      	ldr	r3, [pc, #128]	@ (8000884 <MX_TIM3_Init+0xa4>)
 8000804:	4a20      	ldr	r2, [pc, #128]	@ (8000888 <MX_TIM3_Init+0xa8>)
 8000806:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 84-1;
 8000808:	4b1e      	ldr	r3, [pc, #120]	@ (8000884 <MX_TIM3_Init+0xa4>)
 800080a:	2253      	movs	r2, #83	@ 0x53
 800080c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800080e:	4b1d      	ldr	r3, [pc, #116]	@ (8000884 <MX_TIM3_Init+0xa4>)
 8000810:	2200      	movs	r2, #0
 8000812:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 8000814:	4b1b      	ldr	r3, [pc, #108]	@ (8000884 <MX_TIM3_Init+0xa4>)
 8000816:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800081a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800081c:	4b19      	ldr	r3, [pc, #100]	@ (8000884 <MX_TIM3_Init+0xa4>)
 800081e:	2200      	movs	r2, #0
 8000820:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000822:	4b18      	ldr	r3, [pc, #96]	@ (8000884 <MX_TIM3_Init+0xa4>)
 8000824:	2200      	movs	r2, #0
 8000826:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 8000828:	4816      	ldr	r0, [pc, #88]	@ (8000884 <MX_TIM3_Init+0xa4>)
 800082a:	f001 fe59 	bl	80024e0 <HAL_TIM_OC_Init>
 800082e:	4603      	mov	r3, r0
 8000830:	2b00      	cmp	r3, #0
 8000832:	d001      	beq.n	8000838 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8000834:	f000 fb52 	bl	8000edc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000838:	2300      	movs	r3, #0
 800083a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800083c:	2300      	movs	r3, #0
 800083e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000840:	f107 0320 	add.w	r3, r7, #32
 8000844:	4619      	mov	r1, r3
 8000846:	480f      	ldr	r0, [pc, #60]	@ (8000884 <MX_TIM3_Init+0xa4>)
 8000848:	f002 fc06 	bl	8003058 <HAL_TIMEx_MasterConfigSynchronization>
 800084c:	4603      	mov	r3, r0
 800084e:	2b00      	cmp	r3, #0
 8000850:	d001      	beq.n	8000856 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8000852:	f000 fb43 	bl	8000edc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000856:	2300      	movs	r3, #0
 8000858:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800085a:	2300      	movs	r3, #0
 800085c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800085e:	2300      	movs	r3, #0
 8000860:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000862:	2300      	movs	r3, #0
 8000864:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000866:	1d3b      	adds	r3, r7, #4
 8000868:	2200      	movs	r2, #0
 800086a:	4619      	mov	r1, r3
 800086c:	4805      	ldr	r0, [pc, #20]	@ (8000884 <MX_TIM3_Init+0xa4>)
 800086e:	f002 f875 	bl	800295c <HAL_TIM_OC_ConfigChannel>
 8000872:	4603      	mov	r3, r0
 8000874:	2b00      	cmp	r3, #0
 8000876:	d001      	beq.n	800087c <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8000878:	f000 fb30 	bl	8000edc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800087c:	bf00      	nop
 800087e:	3728      	adds	r7, #40	@ 0x28
 8000880:	46bd      	mov	sp, r7
 8000882:	bd80      	pop	{r7, pc}
 8000884:	200000d0 	.word	0x200000d0
 8000888:	40000400 	.word	0x40000400

0800088c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000890:	4b11      	ldr	r3, [pc, #68]	@ (80008d8 <MX_USART2_UART_Init+0x4c>)
 8000892:	4a12      	ldr	r2, [pc, #72]	@ (80008dc <MX_USART2_UART_Init+0x50>)
 8000894:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000896:	4b10      	ldr	r3, [pc, #64]	@ (80008d8 <MX_USART2_UART_Init+0x4c>)
 8000898:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800089c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800089e:	4b0e      	ldr	r3, [pc, #56]	@ (80008d8 <MX_USART2_UART_Init+0x4c>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008a4:	4b0c      	ldr	r3, [pc, #48]	@ (80008d8 <MX_USART2_UART_Init+0x4c>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80008aa:	4b0b      	ldr	r3, [pc, #44]	@ (80008d8 <MX_USART2_UART_Init+0x4c>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008b0:	4b09      	ldr	r3, [pc, #36]	@ (80008d8 <MX_USART2_UART_Init+0x4c>)
 80008b2:	220c      	movs	r2, #12
 80008b4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008b6:	4b08      	ldr	r3, [pc, #32]	@ (80008d8 <MX_USART2_UART_Init+0x4c>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008bc:	4b06      	ldr	r3, [pc, #24]	@ (80008d8 <MX_USART2_UART_Init+0x4c>)
 80008be:	2200      	movs	r2, #0
 80008c0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008c2:	4805      	ldr	r0, [pc, #20]	@ (80008d8 <MX_USART2_UART_Init+0x4c>)
 80008c4:	f002 fc4a 	bl	800315c <HAL_UART_Init>
 80008c8:	4603      	mov	r3, r0
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d001      	beq.n	80008d2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80008ce:	f000 fb05 	bl	8000edc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008d2:	bf00      	nop
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	bf00      	nop
 80008d8:	20000118 	.word	0x20000118
 80008dc:	40004400 	.word	0x40004400

080008e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b08a      	sub	sp, #40	@ 0x28
 80008e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008e6:	f107 0314 	add.w	r3, r7, #20
 80008ea:	2200      	movs	r2, #0
 80008ec:	601a      	str	r2, [r3, #0]
 80008ee:	605a      	str	r2, [r3, #4]
 80008f0:	609a      	str	r2, [r3, #8]
 80008f2:	60da      	str	r2, [r3, #12]
 80008f4:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008f6:	2300      	movs	r3, #0
 80008f8:	613b      	str	r3, [r7, #16]
 80008fa:	4b38      	ldr	r3, [pc, #224]	@ (80009dc <MX_GPIO_Init+0xfc>)
 80008fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008fe:	4a37      	ldr	r2, [pc, #220]	@ (80009dc <MX_GPIO_Init+0xfc>)
 8000900:	f043 0304 	orr.w	r3, r3, #4
 8000904:	6313      	str	r3, [r2, #48]	@ 0x30
 8000906:	4b35      	ldr	r3, [pc, #212]	@ (80009dc <MX_GPIO_Init+0xfc>)
 8000908:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800090a:	f003 0304 	and.w	r3, r3, #4
 800090e:	613b      	str	r3, [r7, #16]
 8000910:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000912:	2300      	movs	r3, #0
 8000914:	60fb      	str	r3, [r7, #12]
 8000916:	4b31      	ldr	r3, [pc, #196]	@ (80009dc <MX_GPIO_Init+0xfc>)
 8000918:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800091a:	4a30      	ldr	r2, [pc, #192]	@ (80009dc <MX_GPIO_Init+0xfc>)
 800091c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000920:	6313      	str	r3, [r2, #48]	@ 0x30
 8000922:	4b2e      	ldr	r3, [pc, #184]	@ (80009dc <MX_GPIO_Init+0xfc>)
 8000924:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000926:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800092a:	60fb      	str	r3, [r7, #12]
 800092c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800092e:	2300      	movs	r3, #0
 8000930:	60bb      	str	r3, [r7, #8]
 8000932:	4b2a      	ldr	r3, [pc, #168]	@ (80009dc <MX_GPIO_Init+0xfc>)
 8000934:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000936:	4a29      	ldr	r2, [pc, #164]	@ (80009dc <MX_GPIO_Init+0xfc>)
 8000938:	f043 0301 	orr.w	r3, r3, #1
 800093c:	6313      	str	r3, [r2, #48]	@ 0x30
 800093e:	4b27      	ldr	r3, [pc, #156]	@ (80009dc <MX_GPIO_Init+0xfc>)
 8000940:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000942:	f003 0301 	and.w	r3, r3, #1
 8000946:	60bb      	str	r3, [r7, #8]
 8000948:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800094a:	2300      	movs	r3, #0
 800094c:	607b      	str	r3, [r7, #4]
 800094e:	4b23      	ldr	r3, [pc, #140]	@ (80009dc <MX_GPIO_Init+0xfc>)
 8000950:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000952:	4a22      	ldr	r2, [pc, #136]	@ (80009dc <MX_GPIO_Init+0xfc>)
 8000954:	f043 0302 	orr.w	r3, r3, #2
 8000958:	6313      	str	r3, [r2, #48]	@ 0x30
 800095a:	4b20      	ldr	r3, [pc, #128]	@ (80009dc <MX_GPIO_Init+0xfc>)
 800095c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800095e:	f003 0302 	and.w	r3, r3, #2
 8000962:	607b      	str	r3, [r7, #4]
 8000964:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000966:	2200      	movs	r2, #0
 8000968:	2120      	movs	r1, #32
 800096a:	481d      	ldr	r0, [pc, #116]	@ (80009e0 <MX_GPIO_Init+0x100>)
 800096c:	f001 f8a4 	bl	8001ab8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, IN1_Pin|IN2_Pin|IN3_Pin|IN4_Pin, GPIO_PIN_RESET);
 8000970:	2200      	movs	r2, #0
 8000972:	f44f 6170 	mov.w	r1, #3840	@ 0xf00
 8000976:	481b      	ldr	r0, [pc, #108]	@ (80009e4 <MX_GPIO_Init+0x104>)
 8000978:	f001 f89e 	bl	8001ab8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800097c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000980:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000982:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000986:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000988:	2300      	movs	r3, #0
 800098a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800098c:	f107 0314 	add.w	r3, r7, #20
 8000990:	4619      	mov	r1, r3
 8000992:	4814      	ldr	r0, [pc, #80]	@ (80009e4 <MX_GPIO_Init+0x104>)
 8000994:	f000 ff0c 	bl	80017b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000998:	2320      	movs	r3, #32
 800099a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800099c:	2301      	movs	r3, #1
 800099e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a0:	2300      	movs	r3, #0
 80009a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009a4:	2300      	movs	r3, #0
 80009a6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80009a8:	f107 0314 	add.w	r3, r7, #20
 80009ac:	4619      	mov	r1, r3
 80009ae:	480c      	ldr	r0, [pc, #48]	@ (80009e0 <MX_GPIO_Init+0x100>)
 80009b0:	f000 fefe 	bl	80017b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : IN1_Pin IN2_Pin IN3_Pin IN4_Pin */
  GPIO_InitStruct.Pin = IN1_Pin|IN2_Pin|IN3_Pin|IN4_Pin;
 80009b4:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 80009b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009ba:	2301      	movs	r3, #1
 80009bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009be:	2300      	movs	r3, #0
 80009c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009c2:	2300      	movs	r3, #0
 80009c4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009c6:	f107 0314 	add.w	r3, r7, #20
 80009ca:	4619      	mov	r1, r3
 80009cc:	4805      	ldr	r0, [pc, #20]	@ (80009e4 <MX_GPIO_Init+0x104>)
 80009ce:	f000 feef 	bl	80017b0 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80009d2:	bf00      	nop
 80009d4:	3728      	adds	r7, #40	@ 0x28
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	40023800 	.word	0x40023800
 80009e0:	40020000 	.word	0x40020000
 80009e4:	40020800 	.word	0x40020800

080009e8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80009e8:	b480      	push	{r7}
 80009ea:	b083      	sub	sp, #12
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM3) {
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	4a0e      	ldr	r2, [pc, #56]	@ (8000a30 <HAL_TIM_PeriodElapsedCallback+0x48>)
 80009f6:	4293      	cmp	r3, r2
 80009f8:	d114      	bne.n	8000a24 <HAL_TIM_PeriodElapsedCallback+0x3c>
        tick_1ms++; // 10ms 단위
 80009fa:	4b0e      	ldr	r3, [pc, #56]	@ (8000a34 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	3301      	adds	r3, #1
 8000a00:	4a0c      	ldr	r2, [pc, #48]	@ (8000a34 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000a02:	6013      	str	r3, [r2, #0]
        if (tick_1ms % 1000 == 0) { // 1초(=100*10ms)마다
 8000a04:	4b0b      	ldr	r3, [pc, #44]	@ (8000a34 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000a06:	681a      	ldr	r2, [r3, #0]
 8000a08:	4b0b      	ldr	r3, [pc, #44]	@ (8000a38 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000a0a:	fba3 1302 	umull	r1, r3, r3, r2
 8000a0e:	099b      	lsrs	r3, r3, #6
 8000a10:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000a14:	fb01 f303 	mul.w	r3, r1, r3
 8000a18:	1ad3      	subs	r3, r2, r3
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d102      	bne.n	8000a24 <HAL_TIM_PeriodElapsedCallback+0x3c>
            sec_flag = 1;
 8000a1e:	4b07      	ldr	r3, [pc, #28]	@ (8000a3c <HAL_TIM_PeriodElapsedCallback+0x54>)
 8000a20:	2201      	movs	r2, #1
 8000a22:	701a      	strb	r2, [r3, #0]
        }
    }
}
 8000a24:	bf00      	nop
 8000a26:	370c      	adds	r7, #12
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2e:	4770      	bx	lr
 8000a30:	40000400 	.word	0x40000400
 8000a34:	20000160 	.word	0x20000160
 8000a38:	10624dd3 	.word	0x10624dd3
 8000a3c:	20000164 	.word	0x20000164

08000a40 <set_servo_degree>:

void set_servo_degree(int degree)
{
 8000a40:	b480      	push	{r7}
 8000a42:	b085      	sub	sp, #20
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
    if (degree < 0) degree = 0;
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	da01      	bge.n	8000a52 <set_servo_degree+0x12>
 8000a4e:	2300      	movs	r3, #0
 8000a50:	607b      	str	r3, [r7, #4]
    if (degree > 90) degree = 90;
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	2b5a      	cmp	r3, #90	@ 0x5a
 8000a56:	dd01      	ble.n	8000a5c <set_servo_degree+0x1c>
 8000a58:	235a      	movs	r3, #90	@ 0x5a
 8000a5a:	607b      	str	r3, [r7, #4]
    uint16_t pulse = 500 + ((uint16_t)degree * 2000) / 180;
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	b29b      	uxth	r3, r3
 8000a60:	461a      	mov	r2, r3
 8000a62:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000a66:	fb02 f303 	mul.w	r3, r2, r3
 8000a6a:	4a0c      	ldr	r2, [pc, #48]	@ (8000a9c <set_servo_degree+0x5c>)
 8000a6c:	fb82 1203 	smull	r1, r2, r2, r3
 8000a70:	441a      	add	r2, r3
 8000a72:	11d2      	asrs	r2, r2, #7
 8000a74:	17db      	asrs	r3, r3, #31
 8000a76:	1ad3      	subs	r3, r2, r3
 8000a78:	b29b      	uxth	r3, r3
 8000a7a:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 8000a7e:	81fb      	strh	r3, [r7, #14]
    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, pulse);
 8000a80:	4b07      	ldr	r3, [pc, #28]	@ (8000aa0 <set_servo_degree+0x60>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	89fa      	ldrh	r2, [r7, #14]
 8000a86:	635a      	str	r2, [r3, #52]	@ 0x34
    current_servo_degree = degree;
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	b2da      	uxtb	r2, r3
 8000a8c:	4b05      	ldr	r3, [pc, #20]	@ (8000aa4 <set_servo_degree+0x64>)
 8000a8e:	701a      	strb	r2, [r3, #0]
}
 8000a90:	bf00      	nop
 8000a92:	3714      	adds	r7, #20
 8000a94:	46bd      	mov	sp, r7
 8000a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9a:	4770      	bx	lr
 8000a9c:	b60b60b7 	.word	0xb60b60b7
 8000aa0:	20000088 	.word	0x20000088
 8000aa4:	20000173 	.word	0x20000173

08000aa8 <set_servo2_degree>:

void set_servo2_degree(int degree)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	b085      	sub	sp, #20
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
    if (degree < 0)   degree = 0;
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	da01      	bge.n	8000aba <set_servo2_degree+0x12>
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	607b      	str	r3, [r7, #4]
    if (degree > 180) degree = 180;
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	2bb4      	cmp	r3, #180	@ 0xb4
 8000abe:	dd01      	ble.n	8000ac4 <set_servo2_degree+0x1c>
 8000ac0:	23b4      	movs	r3, #180	@ 0xb4
 8000ac2:	607b      	str	r3, [r7, #4]
    uint16_t pulse = 500 + ((uint16_t)degree * 2000) / 180; // 0°=0.5ms, 180°=2.5ms
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	b29b      	uxth	r3, r3
 8000ac8:	461a      	mov	r2, r3
 8000aca:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000ace:	fb02 f303 	mul.w	r3, r2, r3
 8000ad2:	4a0c      	ldr	r2, [pc, #48]	@ (8000b04 <set_servo2_degree+0x5c>)
 8000ad4:	fb82 1203 	smull	r1, r2, r2, r3
 8000ad8:	441a      	add	r2, r3
 8000ada:	11d2      	asrs	r2, r2, #7
 8000adc:	17db      	asrs	r3, r3, #31
 8000ade:	1ad3      	subs	r3, r2, r3
 8000ae0:	b29b      	uxth	r3, r3
 8000ae2:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 8000ae6:	81fb      	strh	r3, [r7, #14]
    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, pulse);
 8000ae8:	4b07      	ldr	r3, [pc, #28]	@ (8000b08 <set_servo2_degree+0x60>)
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	89fa      	ldrh	r2, [r7, #14]
 8000aee:	639a      	str	r2, [r3, #56]	@ 0x38
    current_servo2_degree = degree;
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	b2da      	uxtb	r2, r3
 8000af4:	4b05      	ldr	r3, [pc, #20]	@ (8000b0c <set_servo2_degree+0x64>)
 8000af6:	701a      	strb	r2, [r3, #0]
}
 8000af8:	bf00      	nop
 8000afa:	3714      	adds	r7, #20
 8000afc:	46bd      	mov	sp, r7
 8000afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b02:	4770      	bx	lr
 8000b04:	b60b60b7 	.word	0xb60b60b7
 8000b08:	20000088 	.word	0x20000088
 8000b0c:	20000000 	.word	0x20000000

08000b10 <HAL_UART_RxCpltCallback>:



void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b082      	sub	sp, #8
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART2) {
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	4a15      	ldr	r2, [pc, #84]	@ (8000b74 <HAL_UART_RxCpltCallback+0x64>)
 8000b1e:	4293      	cmp	r3, r2
 8000b20:	d124      	bne.n	8000b6c <HAL_UART_RxCpltCallback+0x5c>
        if (rx_ch == '\n' || cmd_index >= CMD_BUF_LEN - 1) {
 8000b22:	4b15      	ldr	r3, [pc, #84]	@ (8000b78 <HAL_UART_RxCpltCallback+0x68>)
 8000b24:	781b      	ldrb	r3, [r3, #0]
 8000b26:	2b0a      	cmp	r3, #10
 8000b28:	d003      	beq.n	8000b32 <HAL_UART_RxCpltCallback+0x22>
 8000b2a:	4b14      	ldr	r3, [pc, #80]	@ (8000b7c <HAL_UART_RxCpltCallback+0x6c>)
 8000b2c:	781b      	ldrb	r3, [r3, #0]
 8000b2e:	2b06      	cmp	r3, #6
 8000b30:	d90c      	bls.n	8000b4c <HAL_UART_RxCpltCallback+0x3c>
            cmd_buf[cmd_index] = 0;
 8000b32:	4b12      	ldr	r3, [pc, #72]	@ (8000b7c <HAL_UART_RxCpltCallback+0x6c>)
 8000b34:	781b      	ldrb	r3, [r3, #0]
 8000b36:	461a      	mov	r2, r3
 8000b38:	4b11      	ldr	r3, [pc, #68]	@ (8000b80 <HAL_UART_RxCpltCallback+0x70>)
 8000b3a:	2100      	movs	r1, #0
 8000b3c:	5499      	strb	r1, [r3, r2]
            rx_flag = 1;              // 플래그만 세팅
 8000b3e:	4b11      	ldr	r3, [pc, #68]	@ (8000b84 <HAL_UART_RxCpltCallback+0x74>)
 8000b40:	2201      	movs	r2, #1
 8000b42:	701a      	strb	r2, [r3, #0]
            cmd_index = 0;
 8000b44:	4b0d      	ldr	r3, [pc, #52]	@ (8000b7c <HAL_UART_RxCpltCallback+0x6c>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	701a      	strb	r2, [r3, #0]
 8000b4a:	e00a      	b.n	8000b62 <HAL_UART_RxCpltCallback+0x52>
        } else {
            cmd_buf[cmd_index++] = rx_ch;
 8000b4c:	4b0b      	ldr	r3, [pc, #44]	@ (8000b7c <HAL_UART_RxCpltCallback+0x6c>)
 8000b4e:	781b      	ldrb	r3, [r3, #0]
 8000b50:	1c5a      	adds	r2, r3, #1
 8000b52:	b2d1      	uxtb	r1, r2
 8000b54:	4a09      	ldr	r2, [pc, #36]	@ (8000b7c <HAL_UART_RxCpltCallback+0x6c>)
 8000b56:	7011      	strb	r1, [r2, #0]
 8000b58:	461a      	mov	r2, r3
 8000b5a:	4b07      	ldr	r3, [pc, #28]	@ (8000b78 <HAL_UART_RxCpltCallback+0x68>)
 8000b5c:	7819      	ldrb	r1, [r3, #0]
 8000b5e:	4b08      	ldr	r3, [pc, #32]	@ (8000b80 <HAL_UART_RxCpltCallback+0x70>)
 8000b60:	5499      	strb	r1, [r3, r2]
        }
        HAL_UART_Receive_IT(&huart2, &rx_ch, 1); // 재수신
 8000b62:	2201      	movs	r2, #1
 8000b64:	4904      	ldr	r1, [pc, #16]	@ (8000b78 <HAL_UART_RxCpltCallback+0x68>)
 8000b66:	4808      	ldr	r0, [pc, #32]	@ (8000b88 <HAL_UART_RxCpltCallback+0x78>)
 8000b68:	f002 fbd3 	bl	8003312 <HAL_UART_Receive_IT>
    }
}
 8000b6c:	bf00      	nop
 8000b6e:	3708      	adds	r7, #8
 8000b70:	46bd      	mov	sp, r7
 8000b72:	bd80      	pop	{r7, pc}
 8000b74:	40004400 	.word	0x40004400
 8000b78:	20000170 	.word	0x20000170
 8000b7c:	20000171 	.word	0x20000171
 8000b80:	20000168 	.word	0x20000168
 8000b84:	20000172 	.word	0x20000172
 8000b88:	20000118 	.word	0x20000118

08000b8c <parsing_command>:

void parsing_command(char *recvBuf)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b08a      	sub	sp, #40	@ 0x28
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
    if (recvBuf[0] == 'R' && recvBuf[1] == '\0') {
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	781b      	ldrb	r3, [r3, #0]
 8000b98:	2b52      	cmp	r3, #82	@ 0x52
 8000b9a:	d10b      	bne.n	8000bb4 <parsing_command+0x28>
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	3301      	adds	r3, #1
 8000ba0:	781b      	ldrb	r3, [r3, #0]
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d106      	bne.n	8000bb4 <parsing_command+0x28>
        set_servo_degree(0);
 8000ba6:	2000      	movs	r0, #0
 8000ba8:	f7ff ff4a 	bl	8000a40 <set_servo_degree>
        set_servo2_degree(90);
 8000bac:	205a      	movs	r0, #90	@ 0x5a
 8000bae:	f7ff ff7b 	bl	8000aa8 <set_servo2_degree>
        return;
 8000bb2:	e07f      	b.n	8000cb4 <parsing_command+0x128>
    }

    int i = 0;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	627b      	str	r3, [r7, #36]	@ 0x24
    char *pToken;
    char *pArray[2] = { 0 };
 8000bb8:	f107 030c 	add.w	r3, r7, #12
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	601a      	str	r2, [r3, #0]
 8000bc0:	605a      	str	r2, [r3, #4]

    if (recvBuf[strlen(recvBuf) - 1] == '\n')
 8000bc2:	6878      	ldr	r0, [r7, #4]
 8000bc4:	f7ff fb0c 	bl	80001e0 <strlen>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	3b01      	subs	r3, #1
 8000bcc:	687a      	ldr	r2, [r7, #4]
 8000bce:	4413      	add	r3, r2
 8000bd0:	781b      	ldrb	r3, [r3, #0]
 8000bd2:	2b0a      	cmp	r3, #10
 8000bd4:	d108      	bne.n	8000be8 <parsing_command+0x5c>
        recvBuf[strlen(recvBuf) - 1] = '\0';
 8000bd6:	6878      	ldr	r0, [r7, #4]
 8000bd8:	f7ff fb02 	bl	80001e0 <strlen>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	3b01      	subs	r3, #1
 8000be0:	687a      	ldr	r2, [r7, #4]
 8000be2:	4413      	add	r3, r2
 8000be4:	2200      	movs	r2, #0
 8000be6:	701a      	strb	r2, [r3, #0]

    pToken = strtok(recvBuf, "@");
 8000be8:	4934      	ldr	r1, [pc, #208]	@ (8000cbc <parsing_command+0x130>)
 8000bea:	6878      	ldr	r0, [r7, #4]
 8000bec:	f003 fd34 	bl	8004658 <strtok>
 8000bf0:	6238      	str	r0, [r7, #32]
    while (pToken != NULL) {
 8000bf2:	e011      	b.n	8000c18 <parsing_command+0x8c>
        pArray[i] = pToken;
 8000bf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000bf6:	009b      	lsls	r3, r3, #2
 8000bf8:	3328      	adds	r3, #40	@ 0x28
 8000bfa:	443b      	add	r3, r7
 8000bfc:	6a3a      	ldr	r2, [r7, #32]
 8000bfe:	f843 2c1c 	str.w	r2, [r3, #-28]
        if (++i >= 2) break;
 8000c02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c04:	3301      	adds	r3, #1
 8000c06:	627b      	str	r3, [r7, #36]	@ 0x24
 8000c08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c0a:	2b01      	cmp	r3, #1
 8000c0c:	dc08      	bgt.n	8000c20 <parsing_command+0x94>
        pToken = strtok(NULL, "@");
 8000c0e:	492b      	ldr	r1, [pc, #172]	@ (8000cbc <parsing_command+0x130>)
 8000c10:	2000      	movs	r0, #0
 8000c12:	f003 fd21 	bl	8004658 <strtok>
 8000c16:	6238      	str	r0, [r7, #32]
    while (pToken != NULL) {
 8000c18:	6a3b      	ldr	r3, [r7, #32]
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d1ea      	bne.n	8000bf4 <parsing_command+0x68>
 8000c1e:	e000      	b.n	8000c22 <parsing_command+0x96>
        if (++i >= 2) break;
 8000c20:	bf00      	nop
    }

    if (i < 2) {
 8000c22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c24:	2b01      	cmp	r3, #1
 8000c26:	dc04      	bgt.n	8000c32 <parsing_command+0xa6>
        printf("Parsing error: too few tokens (%d)\r\n", i);
 8000c28:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8000c2a:	4825      	ldr	r0, [pc, #148]	@ (8000cc0 <parsing_command+0x134>)
 8000c2c:	f003 fbc4 	bl	80043b8 <iprintf>
        return;
 8000c30:	e040      	b.n	8000cb4 <parsing_command+0x128>
    }
    if (pArray[0] == NULL || pArray[1] == NULL) {
 8000c32:	68fb      	ldr	r3, [r7, #12]
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d002      	beq.n	8000c3e <parsing_command+0xb2>
 8000c38:	693b      	ldr	r3, [r7, #16]
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d103      	bne.n	8000c46 <parsing_command+0xba>
        printf("Parsing error: NULL token(s)\r\n");
 8000c3e:	4821      	ldr	r0, [pc, #132]	@ (8000cc4 <parsing_command+0x138>)
 8000c40:	f003 fc22 	bl	8004488 <puts>
        return;
 8000c44:	e036      	b.n	8000cb4 <parsing_command+0x128>
    }

    char area = pArray[0][0];
 8000c46:	68fb      	ldr	r3, [r7, #12]
 8000c48:	781b      	ldrb	r3, [r3, #0]
 8000c4a:	76fb      	strb	r3, [r7, #27]
    int level = 1;
 8000c4c:	2301      	movs	r3, #1
 8000c4e:	617b      	str	r3, [r7, #20]

    if (strlen(pArray[1]) == 1 && pArray[1][0] >= '1' && pArray[1][0] <= '3') {
 8000c50:	693b      	ldr	r3, [r7, #16]
 8000c52:	4618      	mov	r0, r3
 8000c54:	f7ff fac4 	bl	80001e0 <strlen>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	2b01      	cmp	r3, #1
 8000c5c:	d111      	bne.n	8000c82 <parsing_command+0xf6>
 8000c5e:	693b      	ldr	r3, [r7, #16]
 8000c60:	781b      	ldrb	r3, [r3, #0]
 8000c62:	2b30      	cmp	r3, #48	@ 0x30
 8000c64:	d90d      	bls.n	8000c82 <parsing_command+0xf6>
 8000c66:	693b      	ldr	r3, [r7, #16]
 8000c68:	781b      	ldrb	r3, [r3, #0]
 8000c6a:	2b33      	cmp	r3, #51	@ 0x33
 8000c6c:	d809      	bhi.n	8000c82 <parsing_command+0xf6>
        level = pArray[1][0] - '0';
 8000c6e:	693b      	ldr	r3, [r7, #16]
 8000c70:	781b      	ldrb	r3, [r3, #0]
 8000c72:	3b30      	subs	r3, #48	@ 0x30
 8000c74:	617b      	str	r3, [r7, #20]
    } else {
        printf("Parsing error: level token invalid (%s)\r\n", pArray[1]);
        return;
    }

    int move_deg = 0;
 8000c76:	2300      	movs	r3, #0
 8000c78:	61fb      	str	r3, [r7, #28]
    if (level == 1) move_deg = LEVEL_1_DEGREE;
 8000c7a:	697b      	ldr	r3, [r7, #20]
 8000c7c:	2b01      	cmp	r3, #1
 8000c7e:	d006      	beq.n	8000c8e <parsing_command+0x102>
 8000c80:	e008      	b.n	8000c94 <parsing_command+0x108>
        printf("Parsing error: level token invalid (%s)\r\n", pArray[1]);
 8000c82:	693b      	ldr	r3, [r7, #16]
 8000c84:	4619      	mov	r1, r3
 8000c86:	4810      	ldr	r0, [pc, #64]	@ (8000cc8 <parsing_command+0x13c>)
 8000c88:	f003 fb96 	bl	80043b8 <iprintf>
        return;
 8000c8c:	e012      	b.n	8000cb4 <parsing_command+0x128>
    if (level == 1) move_deg = LEVEL_1_DEGREE;
 8000c8e:	231e      	movs	r3, #30
 8000c90:	61fb      	str	r3, [r7, #28]
 8000c92:	e00a      	b.n	8000caa <parsing_command+0x11e>
    else if (level == 2) move_deg = LEVEL_2_DEGREE;
 8000c94:	697b      	ldr	r3, [r7, #20]
 8000c96:	2b02      	cmp	r3, #2
 8000c98:	d102      	bne.n	8000ca0 <parsing_command+0x114>
 8000c9a:	2314      	movs	r3, #20
 8000c9c:	61fb      	str	r3, [r7, #28]
 8000c9e:	e004      	b.n	8000caa <parsing_command+0x11e>
    else if (level == 3) move_deg = LEVEL_3_DEGREE;
 8000ca0:	697b      	ldr	r3, [r7, #20]
 8000ca2:	2b03      	cmp	r3, #3
 8000ca4:	d101      	bne.n	8000caa <parsing_command+0x11e>
 8000ca6:	230a      	movs	r3, #10
 8000ca8:	61fb      	str	r3, [r7, #28]

    control_pantilt(area, move_deg);
 8000caa:	7efb      	ldrb	r3, [r7, #27]
 8000cac:	69f9      	ldr	r1, [r7, #28]
 8000cae:	4618      	mov	r0, r3
 8000cb0:	f000 f80c 	bl	8000ccc <control_pantilt>
}
 8000cb4:	3728      	adds	r7, #40	@ 0x28
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	bf00      	nop
 8000cbc:	08005324 	.word	0x08005324
 8000cc0:	08005328 	.word	0x08005328
 8000cc4:	08005350 	.word	0x08005350
 8000cc8:	08005370 	.word	0x08005370

08000ccc <control_pantilt>:

void control_pantilt(char area, int move_deg)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b082      	sub	sp, #8
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	6039      	str	r1, [r7, #0]
 8000cd6:	71fb      	strb	r3, [r7, #7]
    switch(area) {
 8000cd8:	79fb      	ldrb	r3, [r7, #7]
 8000cda:	3b41      	subs	r3, #65	@ 0x41
 8000cdc:	2b19      	cmp	r3, #25
 8000cde:	f200 80e1 	bhi.w	8000ea4 <control_pantilt+0x1d8>
 8000ce2:	a201      	add	r2, pc, #4	@ (adr r2, 8000ce8 <control_pantilt+0x1c>)
 8000ce4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ce8:	08000dcf 	.word	0x08000dcf
 8000cec:	08000ea5 	.word	0x08000ea5
 8000cf0:	08000e6d 	.word	0x08000e6d
 8000cf4:	08000df1 	.word	0x08000df1
 8000cf8:	08000da1 	.word	0x08000da1
 8000cfc:	08000ea5 	.word	0x08000ea5
 8000d00:	08000ea5 	.word	0x08000ea5
 8000d04:	08000ea5 	.word	0x08000ea5
 8000d08:	08000ea5 	.word	0x08000ea5
 8000d0c:	08000ea5 	.word	0x08000ea5
 8000d10:	08000ea5 	.word	0x08000ea5
 8000d14:	08000ea5 	.word	0x08000ea5
 8000d18:	08000ea5 	.word	0x08000ea5
 8000d1c:	08000ea5 	.word	0x08000ea5
 8000d20:	08000ea5 	.word	0x08000ea5
 8000d24:	08000ea5 	.word	0x08000ea5
 8000d28:	08000d51 	.word	0x08000d51
 8000d2c:	08000ea5 	.word	0x08000ea5
 8000d30:	08000ea5 	.word	0x08000ea5
 8000d34:	08000ea5 	.word	0x08000ea5
 8000d38:	08000ea5 	.word	0x08000ea5
 8000d3c:	08000ea5 	.word	0x08000ea5
 8000d40:	08000d89 	.word	0x08000d89
 8000d44:	08000e4b 	.word	0x08000e4b
 8000d48:	08000ea5 	.word	0x08000ea5
 8000d4c:	08000e09 	.word	0x08000e09
        case 'Q': // 좌상
            set_servo_degree( (current_servo_degree + move_deg > 180) ? 180 : current_servo_degree + move_deg );
 8000d50:	4b57      	ldr	r3, [pc, #348]	@ (8000eb0 <control_pantilt+0x1e4>)
 8000d52:	781b      	ldrb	r3, [r3, #0]
 8000d54:	461a      	mov	r2, r3
 8000d56:	683b      	ldr	r3, [r7, #0]
 8000d58:	4413      	add	r3, r2
 8000d5a:	2bb4      	cmp	r3, #180	@ 0xb4
 8000d5c:	bfa8      	it	ge
 8000d5e:	23b4      	movge	r3, #180	@ 0xb4
 8000d60:	4618      	mov	r0, r3
 8000d62:	f7ff fe6d 	bl	8000a40 <set_servo_degree>
            set_servo2_degree( (current_servo2_degree >= move_deg) ? current_servo2_degree - move_deg : 0 );
 8000d66:	4b53      	ldr	r3, [pc, #332]	@ (8000eb4 <control_pantilt+0x1e8>)
 8000d68:	781b      	ldrb	r3, [r3, #0]
 8000d6a:	461a      	mov	r2, r3
 8000d6c:	683b      	ldr	r3, [r7, #0]
 8000d6e:	4293      	cmp	r3, r2
 8000d70:	dc05      	bgt.n	8000d7e <control_pantilt+0xb2>
 8000d72:	4b50      	ldr	r3, [pc, #320]	@ (8000eb4 <control_pantilt+0x1e8>)
 8000d74:	781b      	ldrb	r3, [r3, #0]
 8000d76:	461a      	mov	r2, r3
 8000d78:	683b      	ldr	r3, [r7, #0]
 8000d7a:	1ad3      	subs	r3, r2, r3
 8000d7c:	e000      	b.n	8000d80 <control_pantilt+0xb4>
 8000d7e:	2300      	movs	r3, #0
 8000d80:	4618      	mov	r0, r3
 8000d82:	f7ff fe91 	bl	8000aa8 <set_servo2_degree>
            break;
 8000d86:	e08e      	b.n	8000ea6 <control_pantilt+0x1da>
        case 'W': // 상
            set_servo_degree( (current_servo_degree + move_deg > 180) ? 180 : current_servo_degree + move_deg );
 8000d88:	4b49      	ldr	r3, [pc, #292]	@ (8000eb0 <control_pantilt+0x1e4>)
 8000d8a:	781b      	ldrb	r3, [r3, #0]
 8000d8c:	461a      	mov	r2, r3
 8000d8e:	683b      	ldr	r3, [r7, #0]
 8000d90:	4413      	add	r3, r2
 8000d92:	2bb4      	cmp	r3, #180	@ 0xb4
 8000d94:	bfa8      	it	ge
 8000d96:	23b4      	movge	r3, #180	@ 0xb4
 8000d98:	4618      	mov	r0, r3
 8000d9a:	f7ff fe51 	bl	8000a40 <set_servo_degree>
            break;
 8000d9e:	e082      	b.n	8000ea6 <control_pantilt+0x1da>
        case 'E': // 우상
            set_servo_degree( (current_servo_degree + move_deg > 180) ? 180 : current_servo_degree + move_deg );
 8000da0:	4b43      	ldr	r3, [pc, #268]	@ (8000eb0 <control_pantilt+0x1e4>)
 8000da2:	781b      	ldrb	r3, [r3, #0]
 8000da4:	461a      	mov	r2, r3
 8000da6:	683b      	ldr	r3, [r7, #0]
 8000da8:	4413      	add	r3, r2
 8000daa:	2bb4      	cmp	r3, #180	@ 0xb4
 8000dac:	bfa8      	it	ge
 8000dae:	23b4      	movge	r3, #180	@ 0xb4
 8000db0:	4618      	mov	r0, r3
 8000db2:	f7ff fe45 	bl	8000a40 <set_servo_degree>
            set_servo2_degree( (current_servo2_degree + move_deg > 180) ? 180 : current_servo2_degree + move_deg );
 8000db6:	4b3f      	ldr	r3, [pc, #252]	@ (8000eb4 <control_pantilt+0x1e8>)
 8000db8:	781b      	ldrb	r3, [r3, #0]
 8000dba:	461a      	mov	r2, r3
 8000dbc:	683b      	ldr	r3, [r7, #0]
 8000dbe:	4413      	add	r3, r2
 8000dc0:	2bb4      	cmp	r3, #180	@ 0xb4
 8000dc2:	bfa8      	it	ge
 8000dc4:	23b4      	movge	r3, #180	@ 0xb4
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	f7ff fe6e 	bl	8000aa8 <set_servo2_degree>
            break;
 8000dcc:	e06b      	b.n	8000ea6 <control_pantilt+0x1da>
        case 'A': // 좌
            set_servo2_degree( (current_servo2_degree >= move_deg) ? current_servo2_degree - move_deg : 0 );
 8000dce:	4b39      	ldr	r3, [pc, #228]	@ (8000eb4 <control_pantilt+0x1e8>)
 8000dd0:	781b      	ldrb	r3, [r3, #0]
 8000dd2:	461a      	mov	r2, r3
 8000dd4:	683b      	ldr	r3, [r7, #0]
 8000dd6:	4293      	cmp	r3, r2
 8000dd8:	dc05      	bgt.n	8000de6 <control_pantilt+0x11a>
 8000dda:	4b36      	ldr	r3, [pc, #216]	@ (8000eb4 <control_pantilt+0x1e8>)
 8000ddc:	781b      	ldrb	r3, [r3, #0]
 8000dde:	461a      	mov	r2, r3
 8000de0:	683b      	ldr	r3, [r7, #0]
 8000de2:	1ad3      	subs	r3, r2, r3
 8000de4:	e000      	b.n	8000de8 <control_pantilt+0x11c>
 8000de6:	2300      	movs	r3, #0
 8000de8:	4618      	mov	r0, r3
 8000dea:	f7ff fe5d 	bl	8000aa8 <set_servo2_degree>
            break;
 8000dee:	e05a      	b.n	8000ea6 <control_pantilt+0x1da>
        case 'S': // 정지
            break;
        case 'D': // 우
            set_servo2_degree( (current_servo2_degree + move_deg > 180) ? 180 : current_servo2_degree + move_deg );
 8000df0:	4b30      	ldr	r3, [pc, #192]	@ (8000eb4 <control_pantilt+0x1e8>)
 8000df2:	781b      	ldrb	r3, [r3, #0]
 8000df4:	461a      	mov	r2, r3
 8000df6:	683b      	ldr	r3, [r7, #0]
 8000df8:	4413      	add	r3, r2
 8000dfa:	2bb4      	cmp	r3, #180	@ 0xb4
 8000dfc:	bfa8      	it	ge
 8000dfe:	23b4      	movge	r3, #180	@ 0xb4
 8000e00:	4618      	mov	r0, r3
 8000e02:	f7ff fe51 	bl	8000aa8 <set_servo2_degree>
            break;
 8000e06:	e04e      	b.n	8000ea6 <control_pantilt+0x1da>
        case 'Z': // 좌하
            set_servo_degree( (current_servo_degree >= move_deg) ? current_servo_degree - move_deg : 0 );
 8000e08:	4b29      	ldr	r3, [pc, #164]	@ (8000eb0 <control_pantilt+0x1e4>)
 8000e0a:	781b      	ldrb	r3, [r3, #0]
 8000e0c:	461a      	mov	r2, r3
 8000e0e:	683b      	ldr	r3, [r7, #0]
 8000e10:	4293      	cmp	r3, r2
 8000e12:	dc05      	bgt.n	8000e20 <control_pantilt+0x154>
 8000e14:	4b26      	ldr	r3, [pc, #152]	@ (8000eb0 <control_pantilt+0x1e4>)
 8000e16:	781b      	ldrb	r3, [r3, #0]
 8000e18:	461a      	mov	r2, r3
 8000e1a:	683b      	ldr	r3, [r7, #0]
 8000e1c:	1ad3      	subs	r3, r2, r3
 8000e1e:	e000      	b.n	8000e22 <control_pantilt+0x156>
 8000e20:	2300      	movs	r3, #0
 8000e22:	4618      	mov	r0, r3
 8000e24:	f7ff fe0c 	bl	8000a40 <set_servo_degree>
            set_servo2_degree( (current_servo2_degree >= move_deg) ? current_servo2_degree - move_deg : 0 );
 8000e28:	4b22      	ldr	r3, [pc, #136]	@ (8000eb4 <control_pantilt+0x1e8>)
 8000e2a:	781b      	ldrb	r3, [r3, #0]
 8000e2c:	461a      	mov	r2, r3
 8000e2e:	683b      	ldr	r3, [r7, #0]
 8000e30:	4293      	cmp	r3, r2
 8000e32:	dc05      	bgt.n	8000e40 <control_pantilt+0x174>
 8000e34:	4b1f      	ldr	r3, [pc, #124]	@ (8000eb4 <control_pantilt+0x1e8>)
 8000e36:	781b      	ldrb	r3, [r3, #0]
 8000e38:	461a      	mov	r2, r3
 8000e3a:	683b      	ldr	r3, [r7, #0]
 8000e3c:	1ad3      	subs	r3, r2, r3
 8000e3e:	e000      	b.n	8000e42 <control_pantilt+0x176>
 8000e40:	2300      	movs	r3, #0
 8000e42:	4618      	mov	r0, r3
 8000e44:	f7ff fe30 	bl	8000aa8 <set_servo2_degree>
            break;
 8000e48:	e02d      	b.n	8000ea6 <control_pantilt+0x1da>
        case 'X': // 하
            set_servo_degree( (current_servo_degree >= move_deg) ? current_servo_degree - move_deg : 0 );
 8000e4a:	4b19      	ldr	r3, [pc, #100]	@ (8000eb0 <control_pantilt+0x1e4>)
 8000e4c:	781b      	ldrb	r3, [r3, #0]
 8000e4e:	461a      	mov	r2, r3
 8000e50:	683b      	ldr	r3, [r7, #0]
 8000e52:	4293      	cmp	r3, r2
 8000e54:	dc05      	bgt.n	8000e62 <control_pantilt+0x196>
 8000e56:	4b16      	ldr	r3, [pc, #88]	@ (8000eb0 <control_pantilt+0x1e4>)
 8000e58:	781b      	ldrb	r3, [r3, #0]
 8000e5a:	461a      	mov	r2, r3
 8000e5c:	683b      	ldr	r3, [r7, #0]
 8000e5e:	1ad3      	subs	r3, r2, r3
 8000e60:	e000      	b.n	8000e64 <control_pantilt+0x198>
 8000e62:	2300      	movs	r3, #0
 8000e64:	4618      	mov	r0, r3
 8000e66:	f7ff fdeb 	bl	8000a40 <set_servo_degree>
            break;
 8000e6a:	e01c      	b.n	8000ea6 <control_pantilt+0x1da>
        case 'C': // 우하
            set_servo_degree( (current_servo_degree >= move_deg) ? current_servo_degree - move_deg : 0 );
 8000e6c:	4b10      	ldr	r3, [pc, #64]	@ (8000eb0 <control_pantilt+0x1e4>)
 8000e6e:	781b      	ldrb	r3, [r3, #0]
 8000e70:	461a      	mov	r2, r3
 8000e72:	683b      	ldr	r3, [r7, #0]
 8000e74:	4293      	cmp	r3, r2
 8000e76:	dc05      	bgt.n	8000e84 <control_pantilt+0x1b8>
 8000e78:	4b0d      	ldr	r3, [pc, #52]	@ (8000eb0 <control_pantilt+0x1e4>)
 8000e7a:	781b      	ldrb	r3, [r3, #0]
 8000e7c:	461a      	mov	r2, r3
 8000e7e:	683b      	ldr	r3, [r7, #0]
 8000e80:	1ad3      	subs	r3, r2, r3
 8000e82:	e000      	b.n	8000e86 <control_pantilt+0x1ba>
 8000e84:	2300      	movs	r3, #0
 8000e86:	4618      	mov	r0, r3
 8000e88:	f7ff fdda 	bl	8000a40 <set_servo_degree>
            set_servo2_degree( (current_servo2_degree + move_deg > 180) ? 180 : current_servo2_degree + move_deg );
 8000e8c:	4b09      	ldr	r3, [pc, #36]	@ (8000eb4 <control_pantilt+0x1e8>)
 8000e8e:	781b      	ldrb	r3, [r3, #0]
 8000e90:	461a      	mov	r2, r3
 8000e92:	683b      	ldr	r3, [r7, #0]
 8000e94:	4413      	add	r3, r2
 8000e96:	2bb4      	cmp	r3, #180	@ 0xb4
 8000e98:	bfa8      	it	ge
 8000e9a:	23b4      	movge	r3, #180	@ 0xb4
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	f7ff fe03 	bl	8000aa8 <set_servo2_degree>
            break;
 8000ea2:	e000      	b.n	8000ea6 <control_pantilt+0x1da>
        default:
            break;
 8000ea4:	bf00      	nop
    }
}
 8000ea6:	bf00      	nop
 8000ea8:	3708      	adds	r7, #8
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	bf00      	nop
 8000eb0:	20000173 	.word	0x20000173
 8000eb4:	20000000 	.word	0x20000000

08000eb8 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b082      	sub	sp, #8
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART6 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8000ec0:	1d39      	adds	r1, r7, #4
 8000ec2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000ec6:	2201      	movs	r2, #1
 8000ec8:	4803      	ldr	r0, [pc, #12]	@ (8000ed8 <__io_putchar+0x20>)
 8000eca:	f002 f997 	bl	80031fc <HAL_UART_Transmit>

  return ch;
 8000ece:	687b      	ldr	r3, [r7, #4]
}
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	3708      	adds	r7, #8
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bd80      	pop	{r7, pc}
 8000ed8:	20000118 	.word	0x20000118

08000edc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000edc:	b480      	push	{r7}
 8000ede:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ee0:	b672      	cpsid	i
}
 8000ee2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ee4:	bf00      	nop
 8000ee6:	e7fd      	b.n	8000ee4 <Error_Handler+0x8>

08000ee8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b082      	sub	sp, #8
 8000eec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000eee:	2300      	movs	r3, #0
 8000ef0:	607b      	str	r3, [r7, #4]
 8000ef2:	4b10      	ldr	r3, [pc, #64]	@ (8000f34 <HAL_MspInit+0x4c>)
 8000ef4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ef6:	4a0f      	ldr	r2, [pc, #60]	@ (8000f34 <HAL_MspInit+0x4c>)
 8000ef8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000efc:	6453      	str	r3, [r2, #68]	@ 0x44
 8000efe:	4b0d      	ldr	r3, [pc, #52]	@ (8000f34 <HAL_MspInit+0x4c>)
 8000f00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f02:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f06:	607b      	str	r3, [r7, #4]
 8000f08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	603b      	str	r3, [r7, #0]
 8000f0e:	4b09      	ldr	r3, [pc, #36]	@ (8000f34 <HAL_MspInit+0x4c>)
 8000f10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f12:	4a08      	ldr	r2, [pc, #32]	@ (8000f34 <HAL_MspInit+0x4c>)
 8000f14:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f18:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f1a:	4b06      	ldr	r3, [pc, #24]	@ (8000f34 <HAL_MspInit+0x4c>)
 8000f1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f1e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f22:	603b      	str	r3, [r7, #0]
 8000f24:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000f26:	2007      	movs	r0, #7
 8000f28:	f000 fb6e 	bl	8001608 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f2c:	bf00      	nop
 8000f2e:	3708      	adds	r7, #8
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bd80      	pop	{r7, pc}
 8000f34:	40023800 	.word	0x40023800

08000f38 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b084      	sub	sp, #16
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000f48:	d115      	bne.n	8000f76 <HAL_TIM_PWM_MspInit+0x3e>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	60fb      	str	r3, [r7, #12]
 8000f4e:	4b0c      	ldr	r3, [pc, #48]	@ (8000f80 <HAL_TIM_PWM_MspInit+0x48>)
 8000f50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f52:	4a0b      	ldr	r2, [pc, #44]	@ (8000f80 <HAL_TIM_PWM_MspInit+0x48>)
 8000f54:	f043 0301 	orr.w	r3, r3, #1
 8000f58:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f5a:	4b09      	ldr	r3, [pc, #36]	@ (8000f80 <HAL_TIM_PWM_MspInit+0x48>)
 8000f5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f5e:	f003 0301 	and.w	r3, r3, #1
 8000f62:	60fb      	str	r3, [r7, #12]
 8000f64:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000f66:	2200      	movs	r2, #0
 8000f68:	2100      	movs	r1, #0
 8000f6a:	201c      	movs	r0, #28
 8000f6c:	f000 fb57 	bl	800161e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000f70:	201c      	movs	r0, #28
 8000f72:	f000 fb70 	bl	8001656 <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 8000f76:	bf00      	nop
 8000f78:	3710      	adds	r7, #16
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	40023800 	.word	0x40023800

08000f84 <HAL_TIM_OC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_oc: TIM_OC handle pointer
  * @retval None
  */
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b084      	sub	sp, #16
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
  if(htim_oc->Instance==TIM3)
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	4a0e      	ldr	r2, [pc, #56]	@ (8000fcc <HAL_TIM_OC_MspInit+0x48>)
 8000f92:	4293      	cmp	r3, r2
 8000f94:	d115      	bne.n	8000fc2 <HAL_TIM_OC_MspInit+0x3e>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000f96:	2300      	movs	r3, #0
 8000f98:	60fb      	str	r3, [r7, #12]
 8000f9a:	4b0d      	ldr	r3, [pc, #52]	@ (8000fd0 <HAL_TIM_OC_MspInit+0x4c>)
 8000f9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f9e:	4a0c      	ldr	r2, [pc, #48]	@ (8000fd0 <HAL_TIM_OC_MspInit+0x4c>)
 8000fa0:	f043 0302 	orr.w	r3, r3, #2
 8000fa4:	6413      	str	r3, [r2, #64]	@ 0x40
 8000fa6:	4b0a      	ldr	r3, [pc, #40]	@ (8000fd0 <HAL_TIM_OC_MspInit+0x4c>)
 8000fa8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000faa:	f003 0302 	and.w	r3, r3, #2
 8000fae:	60fb      	str	r3, [r7, #12]
 8000fb0:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	2100      	movs	r1, #0
 8000fb6:	201d      	movs	r0, #29
 8000fb8:	f000 fb31 	bl	800161e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000fbc:	201d      	movs	r0, #29
 8000fbe:	f000 fb4a 	bl	8001656 <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM3_MspInit 1 */

  }

}
 8000fc2:	bf00      	nop
 8000fc4:	3710      	adds	r7, #16
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	40000400 	.word	0x40000400
 8000fd0:	40023800 	.word	0x40023800

08000fd4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b088      	sub	sp, #32
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fdc:	f107 030c 	add.w	r3, r7, #12
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	601a      	str	r2, [r3, #0]
 8000fe4:	605a      	str	r2, [r3, #4]
 8000fe6:	609a      	str	r2, [r3, #8]
 8000fe8:	60da      	str	r2, [r3, #12]
 8000fea:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000ff4:	d11d      	bne.n	8001032 <HAL_TIM_MspPostInit+0x5e>
  {
    /* USER CODE BEGIN TIM2_MspPostInit 0 */

    /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	60bb      	str	r3, [r7, #8]
 8000ffa:	4b10      	ldr	r3, [pc, #64]	@ (800103c <HAL_TIM_MspPostInit+0x68>)
 8000ffc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ffe:	4a0f      	ldr	r2, [pc, #60]	@ (800103c <HAL_TIM_MspPostInit+0x68>)
 8001000:	f043 0301 	orr.w	r3, r3, #1
 8001004:	6313      	str	r3, [r2, #48]	@ 0x30
 8001006:	4b0d      	ldr	r3, [pc, #52]	@ (800103c <HAL_TIM_MspPostInit+0x68>)
 8001008:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800100a:	f003 0301 	and.w	r3, r3, #1
 800100e:	60bb      	str	r3, [r7, #8]
 8001010:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001012:	2303      	movs	r3, #3
 8001014:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001016:	2302      	movs	r3, #2
 8001018:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800101a:	2300      	movs	r3, #0
 800101c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800101e:	2300      	movs	r3, #0
 8001020:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001022:	2301      	movs	r3, #1
 8001024:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001026:	f107 030c 	add.w	r3, r7, #12
 800102a:	4619      	mov	r1, r3
 800102c:	4804      	ldr	r0, [pc, #16]	@ (8001040 <HAL_TIM_MspPostInit+0x6c>)
 800102e:	f000 fbbf 	bl	80017b0 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM2_MspPostInit 1 */

    /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001032:	bf00      	nop
 8001034:	3720      	adds	r7, #32
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	40023800 	.word	0x40023800
 8001040:	40020000 	.word	0x40020000

08001044 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b08a      	sub	sp, #40	@ 0x28
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800104c:	f107 0314 	add.w	r3, r7, #20
 8001050:	2200      	movs	r2, #0
 8001052:	601a      	str	r2, [r3, #0]
 8001054:	605a      	str	r2, [r3, #4]
 8001056:	609a      	str	r2, [r3, #8]
 8001058:	60da      	str	r2, [r3, #12]
 800105a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	4a1d      	ldr	r2, [pc, #116]	@ (80010d8 <HAL_UART_MspInit+0x94>)
 8001062:	4293      	cmp	r3, r2
 8001064:	d133      	bne.n	80010ce <HAL_UART_MspInit+0x8a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001066:	2300      	movs	r3, #0
 8001068:	613b      	str	r3, [r7, #16]
 800106a:	4b1c      	ldr	r3, [pc, #112]	@ (80010dc <HAL_UART_MspInit+0x98>)
 800106c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800106e:	4a1b      	ldr	r2, [pc, #108]	@ (80010dc <HAL_UART_MspInit+0x98>)
 8001070:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001074:	6413      	str	r3, [r2, #64]	@ 0x40
 8001076:	4b19      	ldr	r3, [pc, #100]	@ (80010dc <HAL_UART_MspInit+0x98>)
 8001078:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800107a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800107e:	613b      	str	r3, [r7, #16]
 8001080:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001082:	2300      	movs	r3, #0
 8001084:	60fb      	str	r3, [r7, #12]
 8001086:	4b15      	ldr	r3, [pc, #84]	@ (80010dc <HAL_UART_MspInit+0x98>)
 8001088:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800108a:	4a14      	ldr	r2, [pc, #80]	@ (80010dc <HAL_UART_MspInit+0x98>)
 800108c:	f043 0301 	orr.w	r3, r3, #1
 8001090:	6313      	str	r3, [r2, #48]	@ 0x30
 8001092:	4b12      	ldr	r3, [pc, #72]	@ (80010dc <HAL_UART_MspInit+0x98>)
 8001094:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001096:	f003 0301 	and.w	r3, r3, #1
 800109a:	60fb      	str	r3, [r7, #12]
 800109c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800109e:	230c      	movs	r3, #12
 80010a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010a2:	2302      	movs	r3, #2
 80010a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a6:	2300      	movs	r3, #0
 80010a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010aa:	2303      	movs	r3, #3
 80010ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80010ae:	2307      	movs	r3, #7
 80010b0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010b2:	f107 0314 	add.w	r3, r7, #20
 80010b6:	4619      	mov	r1, r3
 80010b8:	4809      	ldr	r0, [pc, #36]	@ (80010e0 <HAL_UART_MspInit+0x9c>)
 80010ba:	f000 fb79 	bl	80017b0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80010be:	2200      	movs	r2, #0
 80010c0:	2100      	movs	r1, #0
 80010c2:	2026      	movs	r0, #38	@ 0x26
 80010c4:	f000 faab 	bl	800161e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80010c8:	2026      	movs	r0, #38	@ 0x26
 80010ca:	f000 fac4 	bl	8001656 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 80010ce:	bf00      	nop
 80010d0:	3728      	adds	r7, #40	@ 0x28
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	40004400 	.word	0x40004400
 80010dc:	40023800 	.word	0x40023800
 80010e0:	40020000 	.word	0x40020000

080010e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010e4:	b480      	push	{r7}
 80010e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80010e8:	bf00      	nop
 80010ea:	e7fd      	b.n	80010e8 <NMI_Handler+0x4>

080010ec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010ec:	b480      	push	{r7}
 80010ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010f0:	bf00      	nop
 80010f2:	e7fd      	b.n	80010f0 <HardFault_Handler+0x4>

080010f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010f4:	b480      	push	{r7}
 80010f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010f8:	bf00      	nop
 80010fa:	e7fd      	b.n	80010f8 <MemManage_Handler+0x4>

080010fc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010fc:	b480      	push	{r7}
 80010fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001100:	bf00      	nop
 8001102:	e7fd      	b.n	8001100 <BusFault_Handler+0x4>

08001104 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001104:	b480      	push	{r7}
 8001106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001108:	bf00      	nop
 800110a:	e7fd      	b.n	8001108 <UsageFault_Handler+0x4>

0800110c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800110c:	b480      	push	{r7}
 800110e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001110:	bf00      	nop
 8001112:	46bd      	mov	sp, r7
 8001114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001118:	4770      	bx	lr

0800111a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800111a:	b480      	push	{r7}
 800111c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800111e:	bf00      	nop
 8001120:	46bd      	mov	sp, r7
 8001122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001126:	4770      	bx	lr

08001128 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001128:	b480      	push	{r7}
 800112a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800112c:	bf00      	nop
 800112e:	46bd      	mov	sp, r7
 8001130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001134:	4770      	bx	lr

08001136 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001136:	b580      	push	{r7, lr}
 8001138:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800113a:	f000 f975 	bl	8001428 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800113e:	bf00      	nop
 8001140:	bd80      	pop	{r7, pc}
	...

08001144 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001148:	4802      	ldr	r0, [pc, #8]	@ (8001154 <TIM2_IRQHandler+0x10>)
 800114a:	f001 fb17 	bl	800277c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800114e:	bf00      	nop
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop
 8001154:	20000088 	.word	0x20000088

08001158 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800115c:	4802      	ldr	r0, [pc, #8]	@ (8001168 <TIM3_IRQHandler+0x10>)
 800115e:	f001 fb0d 	bl	800277c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001162:	bf00      	nop
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	200000d0 	.word	0x200000d0

0800116c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001170:	4802      	ldr	r0, [pc, #8]	@ (800117c <USART2_IRQHandler+0x10>)
 8001172:	f002 f8f3 	bl	800335c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001176:	bf00      	nop
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	20000118 	.word	0x20000118

08001180 <_getpid>:
 8001180:	b480      	push	{r7}
 8001182:	af00      	add	r7, sp, #0
 8001184:	2301      	movs	r3, #1
 8001186:	4618      	mov	r0, r3
 8001188:	46bd      	mov	sp, r7
 800118a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118e:	4770      	bx	lr

08001190 <_kill>:
 8001190:	b580      	push	{r7, lr}
 8001192:	b082      	sub	sp, #8
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
 8001198:	6039      	str	r1, [r7, #0]
 800119a:	f003 faff 	bl	800479c <__errno>
 800119e:	4603      	mov	r3, r0
 80011a0:	2216      	movs	r2, #22
 80011a2:	601a      	str	r2, [r3, #0]
 80011a4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80011a8:	4618      	mov	r0, r3
 80011aa:	3708      	adds	r7, #8
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bd80      	pop	{r7, pc}

080011b0 <_exit>:
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b082      	sub	sp, #8
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
 80011b8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80011bc:	6878      	ldr	r0, [r7, #4]
 80011be:	f7ff ffe7 	bl	8001190 <_kill>
 80011c2:	bf00      	nop
 80011c4:	e7fd      	b.n	80011c2 <_exit+0x12>

080011c6 <_read>:
 80011c6:	b580      	push	{r7, lr}
 80011c8:	b086      	sub	sp, #24
 80011ca:	af00      	add	r7, sp, #0
 80011cc:	60f8      	str	r0, [r7, #12]
 80011ce:	60b9      	str	r1, [r7, #8]
 80011d0:	607a      	str	r2, [r7, #4]
 80011d2:	2300      	movs	r3, #0
 80011d4:	617b      	str	r3, [r7, #20]
 80011d6:	e00a      	b.n	80011ee <_read+0x28>
 80011d8:	f3af 8000 	nop.w
 80011dc:	4601      	mov	r1, r0
 80011de:	68bb      	ldr	r3, [r7, #8]
 80011e0:	1c5a      	adds	r2, r3, #1
 80011e2:	60ba      	str	r2, [r7, #8]
 80011e4:	b2ca      	uxtb	r2, r1
 80011e6:	701a      	strb	r2, [r3, #0]
 80011e8:	697b      	ldr	r3, [r7, #20]
 80011ea:	3301      	adds	r3, #1
 80011ec:	617b      	str	r3, [r7, #20]
 80011ee:	697a      	ldr	r2, [r7, #20]
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	429a      	cmp	r2, r3
 80011f4:	dbf0      	blt.n	80011d8 <_read+0x12>
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	4618      	mov	r0, r3
 80011fa:	3718      	adds	r7, #24
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}

08001200 <_write>:
 8001200:	b580      	push	{r7, lr}
 8001202:	b086      	sub	sp, #24
 8001204:	af00      	add	r7, sp, #0
 8001206:	60f8      	str	r0, [r7, #12]
 8001208:	60b9      	str	r1, [r7, #8]
 800120a:	607a      	str	r2, [r7, #4]
 800120c:	2300      	movs	r3, #0
 800120e:	617b      	str	r3, [r7, #20]
 8001210:	e009      	b.n	8001226 <_write+0x26>
 8001212:	68bb      	ldr	r3, [r7, #8]
 8001214:	1c5a      	adds	r2, r3, #1
 8001216:	60ba      	str	r2, [r7, #8]
 8001218:	781b      	ldrb	r3, [r3, #0]
 800121a:	4618      	mov	r0, r3
 800121c:	f7ff fe4c 	bl	8000eb8 <__io_putchar>
 8001220:	697b      	ldr	r3, [r7, #20]
 8001222:	3301      	adds	r3, #1
 8001224:	617b      	str	r3, [r7, #20]
 8001226:	697a      	ldr	r2, [r7, #20]
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	429a      	cmp	r2, r3
 800122c:	dbf1      	blt.n	8001212 <_write+0x12>
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	4618      	mov	r0, r3
 8001232:	3718      	adds	r7, #24
 8001234:	46bd      	mov	sp, r7
 8001236:	bd80      	pop	{r7, pc}

08001238 <_close>:
 8001238:	b480      	push	{r7}
 800123a:	b083      	sub	sp, #12
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
 8001240:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001244:	4618      	mov	r0, r3
 8001246:	370c      	adds	r7, #12
 8001248:	46bd      	mov	sp, r7
 800124a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124e:	4770      	bx	lr

08001250 <_fstat>:
 8001250:	b480      	push	{r7}
 8001252:	b083      	sub	sp, #12
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
 8001258:	6039      	str	r1, [r7, #0]
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001260:	605a      	str	r2, [r3, #4]
 8001262:	2300      	movs	r3, #0
 8001264:	4618      	mov	r0, r3
 8001266:	370c      	adds	r7, #12
 8001268:	46bd      	mov	sp, r7
 800126a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126e:	4770      	bx	lr

08001270 <_isatty>:
 8001270:	b480      	push	{r7}
 8001272:	b083      	sub	sp, #12
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
 8001278:	2301      	movs	r3, #1
 800127a:	4618      	mov	r0, r3
 800127c:	370c      	adds	r7, #12
 800127e:	46bd      	mov	sp, r7
 8001280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001284:	4770      	bx	lr

08001286 <_lseek>:
 8001286:	b480      	push	{r7}
 8001288:	b085      	sub	sp, #20
 800128a:	af00      	add	r7, sp, #0
 800128c:	60f8      	str	r0, [r7, #12]
 800128e:	60b9      	str	r1, [r7, #8]
 8001290:	607a      	str	r2, [r7, #4]
 8001292:	2300      	movs	r3, #0
 8001294:	4618      	mov	r0, r3
 8001296:	3714      	adds	r7, #20
 8001298:	46bd      	mov	sp, r7
 800129a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129e:	4770      	bx	lr

080012a0 <_sbrk>:
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b086      	sub	sp, #24
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
 80012a8:	4a14      	ldr	r2, [pc, #80]	@ (80012fc <_sbrk+0x5c>)
 80012aa:	4b15      	ldr	r3, [pc, #84]	@ (8001300 <_sbrk+0x60>)
 80012ac:	1ad3      	subs	r3, r2, r3
 80012ae:	617b      	str	r3, [r7, #20]
 80012b0:	697b      	ldr	r3, [r7, #20]
 80012b2:	613b      	str	r3, [r7, #16]
 80012b4:	4b13      	ldr	r3, [pc, #76]	@ (8001304 <_sbrk+0x64>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d102      	bne.n	80012c2 <_sbrk+0x22>
 80012bc:	4b11      	ldr	r3, [pc, #68]	@ (8001304 <_sbrk+0x64>)
 80012be:	4a12      	ldr	r2, [pc, #72]	@ (8001308 <_sbrk+0x68>)
 80012c0:	601a      	str	r2, [r3, #0]
 80012c2:	4b10      	ldr	r3, [pc, #64]	@ (8001304 <_sbrk+0x64>)
 80012c4:	681a      	ldr	r2, [r3, #0]
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	4413      	add	r3, r2
 80012ca:	693a      	ldr	r2, [r7, #16]
 80012cc:	429a      	cmp	r2, r3
 80012ce:	d207      	bcs.n	80012e0 <_sbrk+0x40>
 80012d0:	f003 fa64 	bl	800479c <__errno>
 80012d4:	4603      	mov	r3, r0
 80012d6:	220c      	movs	r2, #12
 80012d8:	601a      	str	r2, [r3, #0]
 80012da:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80012de:	e009      	b.n	80012f4 <_sbrk+0x54>
 80012e0:	4b08      	ldr	r3, [pc, #32]	@ (8001304 <_sbrk+0x64>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	60fb      	str	r3, [r7, #12]
 80012e6:	4b07      	ldr	r3, [pc, #28]	@ (8001304 <_sbrk+0x64>)
 80012e8:	681a      	ldr	r2, [r3, #0]
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	4413      	add	r3, r2
 80012ee:	4a05      	ldr	r2, [pc, #20]	@ (8001304 <_sbrk+0x64>)
 80012f0:	6013      	str	r3, [r2, #0]
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	4618      	mov	r0, r3
 80012f6:	3718      	adds	r7, #24
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bd80      	pop	{r7, pc}
 80012fc:	20020000 	.word	0x20020000
 8001300:	00000400 	.word	0x00000400
 8001304:	20000174 	.word	0x20000174
 8001308:	200002c8 	.word	0x200002c8

0800130c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800130c:	b480      	push	{r7}
 800130e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001310:	4b06      	ldr	r3, [pc, #24]	@ (800132c <SystemInit+0x20>)
 8001312:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001316:	4a05      	ldr	r2, [pc, #20]	@ (800132c <SystemInit+0x20>)
 8001318:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800131c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001320:	bf00      	nop
 8001322:	46bd      	mov	sp, r7
 8001324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001328:	4770      	bx	lr
 800132a:	bf00      	nop
 800132c:	e000ed00 	.word	0xe000ed00

08001330 <Reset_Handler>:
 8001330:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001368 <LoopFillZerobss+0xe>
 8001334:	f7ff ffea 	bl	800130c <SystemInit>
 8001338:	480c      	ldr	r0, [pc, #48]	@ (800136c <LoopFillZerobss+0x12>)
 800133a:	490d      	ldr	r1, [pc, #52]	@ (8001370 <LoopFillZerobss+0x16>)
 800133c:	4a0d      	ldr	r2, [pc, #52]	@ (8001374 <LoopFillZerobss+0x1a>)
 800133e:	2300      	movs	r3, #0
 8001340:	e002      	b.n	8001348 <LoopCopyDataInit>

08001342 <CopyDataInit>:
 8001342:	58d4      	ldr	r4, [r2, r3]
 8001344:	50c4      	str	r4, [r0, r3]
 8001346:	3304      	adds	r3, #4

08001348 <LoopCopyDataInit>:
 8001348:	18c4      	adds	r4, r0, r3
 800134a:	428c      	cmp	r4, r1
 800134c:	d3f9      	bcc.n	8001342 <CopyDataInit>
 800134e:	4a0a      	ldr	r2, [pc, #40]	@ (8001378 <LoopFillZerobss+0x1e>)
 8001350:	4c0a      	ldr	r4, [pc, #40]	@ (800137c <LoopFillZerobss+0x22>)
 8001352:	2300      	movs	r3, #0
 8001354:	e001      	b.n	800135a <LoopFillZerobss>

08001356 <FillZerobss>:
 8001356:	6013      	str	r3, [r2, #0]
 8001358:	3204      	adds	r2, #4

0800135a <LoopFillZerobss>:
 800135a:	42a2      	cmp	r2, r4
 800135c:	d3fb      	bcc.n	8001356 <FillZerobss>
 800135e:	f003 fa23 	bl	80047a8 <__libc_init_array>
 8001362:	f7ff f92b 	bl	80005bc <main>
 8001366:	4770      	bx	lr
 8001368:	20020000 	.word	0x20020000
 800136c:	20000000 	.word	0x20000000
 8001370:	2000006c 	.word	0x2000006c
 8001374:	080054a4 	.word	0x080054a4
 8001378:	2000006c 	.word	0x2000006c
 800137c:	200002c8 	.word	0x200002c8

08001380 <ADC_IRQHandler>:
 8001380:	e7fe      	b.n	8001380 <ADC_IRQHandler>
	...

08001384 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001388:	4b0e      	ldr	r3, [pc, #56]	@ (80013c4 <HAL_Init+0x40>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	4a0d      	ldr	r2, [pc, #52]	@ (80013c4 <HAL_Init+0x40>)
 800138e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001392:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001394:	4b0b      	ldr	r3, [pc, #44]	@ (80013c4 <HAL_Init+0x40>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	4a0a      	ldr	r2, [pc, #40]	@ (80013c4 <HAL_Init+0x40>)
 800139a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800139e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013a0:	4b08      	ldr	r3, [pc, #32]	@ (80013c4 <HAL_Init+0x40>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	4a07      	ldr	r2, [pc, #28]	@ (80013c4 <HAL_Init+0x40>)
 80013a6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80013aa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013ac:	2003      	movs	r0, #3
 80013ae:	f000 f92b 	bl	8001608 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013b2:	2000      	movs	r0, #0
 80013b4:	f000 f808 	bl	80013c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013b8:	f7ff fd96 	bl	8000ee8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013bc:	2300      	movs	r3, #0
}
 80013be:	4618      	mov	r0, r3
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	40023c00 	.word	0x40023c00

080013c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b082      	sub	sp, #8
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80013d0:	4b12      	ldr	r3, [pc, #72]	@ (800141c <HAL_InitTick+0x54>)
 80013d2:	681a      	ldr	r2, [r3, #0]
 80013d4:	4b12      	ldr	r3, [pc, #72]	@ (8001420 <HAL_InitTick+0x58>)
 80013d6:	781b      	ldrb	r3, [r3, #0]
 80013d8:	4619      	mov	r1, r3
 80013da:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80013de:	fbb3 f3f1 	udiv	r3, r3, r1
 80013e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80013e6:	4618      	mov	r0, r3
 80013e8:	f000 f943 	bl	8001672 <HAL_SYSTICK_Config>
 80013ec:	4603      	mov	r3, r0
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d001      	beq.n	80013f6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80013f2:	2301      	movs	r3, #1
 80013f4:	e00e      	b.n	8001414 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	2b0f      	cmp	r3, #15
 80013fa:	d80a      	bhi.n	8001412 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013fc:	2200      	movs	r2, #0
 80013fe:	6879      	ldr	r1, [r7, #4]
 8001400:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001404:	f000 f90b 	bl	800161e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001408:	4a06      	ldr	r2, [pc, #24]	@ (8001424 <HAL_InitTick+0x5c>)
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800140e:	2300      	movs	r3, #0
 8001410:	e000      	b.n	8001414 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001412:	2301      	movs	r3, #1
}
 8001414:	4618      	mov	r0, r3
 8001416:	3708      	adds	r7, #8
 8001418:	46bd      	mov	sp, r7
 800141a:	bd80      	pop	{r7, pc}
 800141c:	20000004 	.word	0x20000004
 8001420:	2000000c 	.word	0x2000000c
 8001424:	20000008 	.word	0x20000008

08001428 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001428:	b480      	push	{r7}
 800142a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800142c:	4b06      	ldr	r3, [pc, #24]	@ (8001448 <HAL_IncTick+0x20>)
 800142e:	781b      	ldrb	r3, [r3, #0]
 8001430:	461a      	mov	r2, r3
 8001432:	4b06      	ldr	r3, [pc, #24]	@ (800144c <HAL_IncTick+0x24>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	4413      	add	r3, r2
 8001438:	4a04      	ldr	r2, [pc, #16]	@ (800144c <HAL_IncTick+0x24>)
 800143a:	6013      	str	r3, [r2, #0]
}
 800143c:	bf00      	nop
 800143e:	46bd      	mov	sp, r7
 8001440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001444:	4770      	bx	lr
 8001446:	bf00      	nop
 8001448:	2000000c 	.word	0x2000000c
 800144c:	20000178 	.word	0x20000178

08001450 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001450:	b480      	push	{r7}
 8001452:	af00      	add	r7, sp, #0
  return uwTick;
 8001454:	4b03      	ldr	r3, [pc, #12]	@ (8001464 <HAL_GetTick+0x14>)
 8001456:	681b      	ldr	r3, [r3, #0]
}
 8001458:	4618      	mov	r0, r3
 800145a:	46bd      	mov	sp, r7
 800145c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001460:	4770      	bx	lr
 8001462:	bf00      	nop
 8001464:	20000178 	.word	0x20000178

08001468 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001468:	b480      	push	{r7}
 800146a:	b085      	sub	sp, #20
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	f003 0307 	and.w	r3, r3, #7
 8001476:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001478:	4b0c      	ldr	r3, [pc, #48]	@ (80014ac <__NVIC_SetPriorityGrouping+0x44>)
 800147a:	68db      	ldr	r3, [r3, #12]
 800147c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800147e:	68ba      	ldr	r2, [r7, #8]
 8001480:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001484:	4013      	ands	r3, r2
 8001486:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800148c:	68bb      	ldr	r3, [r7, #8]
 800148e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001490:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001494:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001498:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800149a:	4a04      	ldr	r2, [pc, #16]	@ (80014ac <__NVIC_SetPriorityGrouping+0x44>)
 800149c:	68bb      	ldr	r3, [r7, #8]
 800149e:	60d3      	str	r3, [r2, #12]
}
 80014a0:	bf00      	nop
 80014a2:	3714      	adds	r7, #20
 80014a4:	46bd      	mov	sp, r7
 80014a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014aa:	4770      	bx	lr
 80014ac:	e000ed00 	.word	0xe000ed00

080014b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014b0:	b480      	push	{r7}
 80014b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014b4:	4b04      	ldr	r3, [pc, #16]	@ (80014c8 <__NVIC_GetPriorityGrouping+0x18>)
 80014b6:	68db      	ldr	r3, [r3, #12]
 80014b8:	0a1b      	lsrs	r3, r3, #8
 80014ba:	f003 0307 	and.w	r3, r3, #7
}
 80014be:	4618      	mov	r0, r3
 80014c0:	46bd      	mov	sp, r7
 80014c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c6:	4770      	bx	lr
 80014c8:	e000ed00 	.word	0xe000ed00

080014cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014cc:	b480      	push	{r7}
 80014ce:	b083      	sub	sp, #12
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	4603      	mov	r3, r0
 80014d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014da:	2b00      	cmp	r3, #0
 80014dc:	db0b      	blt.n	80014f6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014de:	79fb      	ldrb	r3, [r7, #7]
 80014e0:	f003 021f 	and.w	r2, r3, #31
 80014e4:	4907      	ldr	r1, [pc, #28]	@ (8001504 <__NVIC_EnableIRQ+0x38>)
 80014e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ea:	095b      	lsrs	r3, r3, #5
 80014ec:	2001      	movs	r0, #1
 80014ee:	fa00 f202 	lsl.w	r2, r0, r2
 80014f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80014f6:	bf00      	nop
 80014f8:	370c      	adds	r7, #12
 80014fa:	46bd      	mov	sp, r7
 80014fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001500:	4770      	bx	lr
 8001502:	bf00      	nop
 8001504:	e000e100 	.word	0xe000e100

08001508 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001508:	b480      	push	{r7}
 800150a:	b083      	sub	sp, #12
 800150c:	af00      	add	r7, sp, #0
 800150e:	4603      	mov	r3, r0
 8001510:	6039      	str	r1, [r7, #0]
 8001512:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001514:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001518:	2b00      	cmp	r3, #0
 800151a:	db0a      	blt.n	8001532 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	b2da      	uxtb	r2, r3
 8001520:	490c      	ldr	r1, [pc, #48]	@ (8001554 <__NVIC_SetPriority+0x4c>)
 8001522:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001526:	0112      	lsls	r2, r2, #4
 8001528:	b2d2      	uxtb	r2, r2
 800152a:	440b      	add	r3, r1
 800152c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001530:	e00a      	b.n	8001548 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	b2da      	uxtb	r2, r3
 8001536:	4908      	ldr	r1, [pc, #32]	@ (8001558 <__NVIC_SetPriority+0x50>)
 8001538:	79fb      	ldrb	r3, [r7, #7]
 800153a:	f003 030f 	and.w	r3, r3, #15
 800153e:	3b04      	subs	r3, #4
 8001540:	0112      	lsls	r2, r2, #4
 8001542:	b2d2      	uxtb	r2, r2
 8001544:	440b      	add	r3, r1
 8001546:	761a      	strb	r2, [r3, #24]
}
 8001548:	bf00      	nop
 800154a:	370c      	adds	r7, #12
 800154c:	46bd      	mov	sp, r7
 800154e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001552:	4770      	bx	lr
 8001554:	e000e100 	.word	0xe000e100
 8001558:	e000ed00 	.word	0xe000ed00

0800155c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800155c:	b480      	push	{r7}
 800155e:	b089      	sub	sp, #36	@ 0x24
 8001560:	af00      	add	r7, sp, #0
 8001562:	60f8      	str	r0, [r7, #12]
 8001564:	60b9      	str	r1, [r7, #8]
 8001566:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	f003 0307 	and.w	r3, r3, #7
 800156e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001570:	69fb      	ldr	r3, [r7, #28]
 8001572:	f1c3 0307 	rsb	r3, r3, #7
 8001576:	2b04      	cmp	r3, #4
 8001578:	bf28      	it	cs
 800157a:	2304      	movcs	r3, #4
 800157c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800157e:	69fb      	ldr	r3, [r7, #28]
 8001580:	3304      	adds	r3, #4
 8001582:	2b06      	cmp	r3, #6
 8001584:	d902      	bls.n	800158c <NVIC_EncodePriority+0x30>
 8001586:	69fb      	ldr	r3, [r7, #28]
 8001588:	3b03      	subs	r3, #3
 800158a:	e000      	b.n	800158e <NVIC_EncodePriority+0x32>
 800158c:	2300      	movs	r3, #0
 800158e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001590:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001594:	69bb      	ldr	r3, [r7, #24]
 8001596:	fa02 f303 	lsl.w	r3, r2, r3
 800159a:	43da      	mvns	r2, r3
 800159c:	68bb      	ldr	r3, [r7, #8]
 800159e:	401a      	ands	r2, r3
 80015a0:	697b      	ldr	r3, [r7, #20]
 80015a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015a4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80015a8:	697b      	ldr	r3, [r7, #20]
 80015aa:	fa01 f303 	lsl.w	r3, r1, r3
 80015ae:	43d9      	mvns	r1, r3
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015b4:	4313      	orrs	r3, r2
         );
}
 80015b6:	4618      	mov	r0, r3
 80015b8:	3724      	adds	r7, #36	@ 0x24
 80015ba:	46bd      	mov	sp, r7
 80015bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c0:	4770      	bx	lr
	...

080015c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b082      	sub	sp, #8
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	3b01      	subs	r3, #1
 80015d0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80015d4:	d301      	bcc.n	80015da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015d6:	2301      	movs	r3, #1
 80015d8:	e00f      	b.n	80015fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015da:	4a0a      	ldr	r2, [pc, #40]	@ (8001604 <SysTick_Config+0x40>)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	3b01      	subs	r3, #1
 80015e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015e2:	210f      	movs	r1, #15
 80015e4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80015e8:	f7ff ff8e 	bl	8001508 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015ec:	4b05      	ldr	r3, [pc, #20]	@ (8001604 <SysTick_Config+0x40>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015f2:	4b04      	ldr	r3, [pc, #16]	@ (8001604 <SysTick_Config+0x40>)
 80015f4:	2207      	movs	r2, #7
 80015f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015f8:	2300      	movs	r3, #0
}
 80015fa:	4618      	mov	r0, r3
 80015fc:	3708      	adds	r7, #8
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}
 8001602:	bf00      	nop
 8001604:	e000e010 	.word	0xe000e010

08001608 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b082      	sub	sp, #8
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001610:	6878      	ldr	r0, [r7, #4]
 8001612:	f7ff ff29 	bl	8001468 <__NVIC_SetPriorityGrouping>
}
 8001616:	bf00      	nop
 8001618:	3708      	adds	r7, #8
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}

0800161e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800161e:	b580      	push	{r7, lr}
 8001620:	b086      	sub	sp, #24
 8001622:	af00      	add	r7, sp, #0
 8001624:	4603      	mov	r3, r0
 8001626:	60b9      	str	r1, [r7, #8]
 8001628:	607a      	str	r2, [r7, #4]
 800162a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800162c:	2300      	movs	r3, #0
 800162e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001630:	f7ff ff3e 	bl	80014b0 <__NVIC_GetPriorityGrouping>
 8001634:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001636:	687a      	ldr	r2, [r7, #4]
 8001638:	68b9      	ldr	r1, [r7, #8]
 800163a:	6978      	ldr	r0, [r7, #20]
 800163c:	f7ff ff8e 	bl	800155c <NVIC_EncodePriority>
 8001640:	4602      	mov	r2, r0
 8001642:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001646:	4611      	mov	r1, r2
 8001648:	4618      	mov	r0, r3
 800164a:	f7ff ff5d 	bl	8001508 <__NVIC_SetPriority>
}
 800164e:	bf00      	nop
 8001650:	3718      	adds	r7, #24
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}

08001656 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001656:	b580      	push	{r7, lr}
 8001658:	b082      	sub	sp, #8
 800165a:	af00      	add	r7, sp, #0
 800165c:	4603      	mov	r3, r0
 800165e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001660:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001664:	4618      	mov	r0, r3
 8001666:	f7ff ff31 	bl	80014cc <__NVIC_EnableIRQ>
}
 800166a:	bf00      	nop
 800166c:	3708      	adds	r7, #8
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}

08001672 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001672:	b580      	push	{r7, lr}
 8001674:	b082      	sub	sp, #8
 8001676:	af00      	add	r7, sp, #0
 8001678:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800167a:	6878      	ldr	r0, [r7, #4]
 800167c:	f7ff ffa2 	bl	80015c4 <SysTick_Config>
 8001680:	4603      	mov	r3, r0
}
 8001682:	4618      	mov	r0, r3
 8001684:	3708      	adds	r7, #8
 8001686:	46bd      	mov	sp, r7
 8001688:	bd80      	pop	{r7, pc}

0800168a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800168a:	b580      	push	{r7, lr}
 800168c:	b084      	sub	sp, #16
 800168e:	af00      	add	r7, sp, #0
 8001690:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001696:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001698:	f7ff feda 	bl	8001450 <HAL_GetTick>
 800169c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80016a4:	b2db      	uxtb	r3, r3
 80016a6:	2b02      	cmp	r3, #2
 80016a8:	d008      	beq.n	80016bc <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	2280      	movs	r2, #128	@ 0x80
 80016ae:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	2200      	movs	r2, #0
 80016b4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80016b8:	2301      	movs	r3, #1
 80016ba:	e052      	b.n	8001762 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	681a      	ldr	r2, [r3, #0]
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f022 0216 	bic.w	r2, r2, #22
 80016ca:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	695a      	ldr	r2, [r3, #20]
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80016da:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d103      	bne.n	80016ec <HAL_DMA_Abort+0x62>
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d007      	beq.n	80016fc <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	681a      	ldr	r2, [r3, #0]
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f022 0208 	bic.w	r2, r2, #8
 80016fa:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	681a      	ldr	r2, [r3, #0]
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f022 0201 	bic.w	r2, r2, #1
 800170a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800170c:	e013      	b.n	8001736 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800170e:	f7ff fe9f 	bl	8001450 <HAL_GetTick>
 8001712:	4602      	mov	r2, r0
 8001714:	68bb      	ldr	r3, [r7, #8]
 8001716:	1ad3      	subs	r3, r2, r3
 8001718:	2b05      	cmp	r3, #5
 800171a:	d90c      	bls.n	8001736 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	2220      	movs	r2, #32
 8001720:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	2203      	movs	r2, #3
 8001726:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	2200      	movs	r2, #0
 800172e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001732:	2303      	movs	r3, #3
 8001734:	e015      	b.n	8001762 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f003 0301 	and.w	r3, r3, #1
 8001740:	2b00      	cmp	r3, #0
 8001742:	d1e4      	bne.n	800170e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001748:	223f      	movs	r2, #63	@ 0x3f
 800174a:	409a      	lsls	r2, r3
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	2201      	movs	r2, #1
 8001754:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	2200      	movs	r2, #0
 800175c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001760:	2300      	movs	r3, #0
}
 8001762:	4618      	mov	r0, r3
 8001764:	3710      	adds	r7, #16
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}

0800176a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800176a:	b480      	push	{r7}
 800176c:	b083      	sub	sp, #12
 800176e:	af00      	add	r7, sp, #0
 8001770:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001778:	b2db      	uxtb	r3, r3
 800177a:	2b02      	cmp	r3, #2
 800177c:	d004      	beq.n	8001788 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	2280      	movs	r2, #128	@ 0x80
 8001782:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001784:	2301      	movs	r3, #1
 8001786:	e00c      	b.n	80017a2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	2205      	movs	r2, #5
 800178c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	681a      	ldr	r2, [r3, #0]
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f022 0201 	bic.w	r2, r2, #1
 800179e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80017a0:	2300      	movs	r3, #0
}
 80017a2:	4618      	mov	r0, r3
 80017a4:	370c      	adds	r7, #12
 80017a6:	46bd      	mov	sp, r7
 80017a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ac:	4770      	bx	lr
	...

080017b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017b0:	b480      	push	{r7}
 80017b2:	b089      	sub	sp, #36	@ 0x24
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
 80017b8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80017ba:	2300      	movs	r3, #0
 80017bc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80017be:	2300      	movs	r3, #0
 80017c0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80017c2:	2300      	movs	r3, #0
 80017c4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80017c6:	2300      	movs	r3, #0
 80017c8:	61fb      	str	r3, [r7, #28]
 80017ca:	e159      	b.n	8001a80 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80017cc:	2201      	movs	r2, #1
 80017ce:	69fb      	ldr	r3, [r7, #28]
 80017d0:	fa02 f303 	lsl.w	r3, r2, r3
 80017d4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	697a      	ldr	r2, [r7, #20]
 80017dc:	4013      	ands	r3, r2
 80017de:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80017e0:	693a      	ldr	r2, [r7, #16]
 80017e2:	697b      	ldr	r3, [r7, #20]
 80017e4:	429a      	cmp	r2, r3
 80017e6:	f040 8148 	bne.w	8001a7a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	685b      	ldr	r3, [r3, #4]
 80017ee:	f003 0303 	and.w	r3, r3, #3
 80017f2:	2b01      	cmp	r3, #1
 80017f4:	d005      	beq.n	8001802 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017f6:	683b      	ldr	r3, [r7, #0]
 80017f8:	685b      	ldr	r3, [r3, #4]
 80017fa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80017fe:	2b02      	cmp	r3, #2
 8001800:	d130      	bne.n	8001864 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	689b      	ldr	r3, [r3, #8]
 8001806:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001808:	69fb      	ldr	r3, [r7, #28]
 800180a:	005b      	lsls	r3, r3, #1
 800180c:	2203      	movs	r2, #3
 800180e:	fa02 f303 	lsl.w	r3, r2, r3
 8001812:	43db      	mvns	r3, r3
 8001814:	69ba      	ldr	r2, [r7, #24]
 8001816:	4013      	ands	r3, r2
 8001818:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	68da      	ldr	r2, [r3, #12]
 800181e:	69fb      	ldr	r3, [r7, #28]
 8001820:	005b      	lsls	r3, r3, #1
 8001822:	fa02 f303 	lsl.w	r3, r2, r3
 8001826:	69ba      	ldr	r2, [r7, #24]
 8001828:	4313      	orrs	r3, r2
 800182a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	69ba      	ldr	r2, [r7, #24]
 8001830:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	685b      	ldr	r3, [r3, #4]
 8001836:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001838:	2201      	movs	r2, #1
 800183a:	69fb      	ldr	r3, [r7, #28]
 800183c:	fa02 f303 	lsl.w	r3, r2, r3
 8001840:	43db      	mvns	r3, r3
 8001842:	69ba      	ldr	r2, [r7, #24]
 8001844:	4013      	ands	r3, r2
 8001846:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	091b      	lsrs	r3, r3, #4
 800184e:	f003 0201 	and.w	r2, r3, #1
 8001852:	69fb      	ldr	r3, [r7, #28]
 8001854:	fa02 f303 	lsl.w	r3, r2, r3
 8001858:	69ba      	ldr	r2, [r7, #24]
 800185a:	4313      	orrs	r3, r2
 800185c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	69ba      	ldr	r2, [r7, #24]
 8001862:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	685b      	ldr	r3, [r3, #4]
 8001868:	f003 0303 	and.w	r3, r3, #3
 800186c:	2b03      	cmp	r3, #3
 800186e:	d017      	beq.n	80018a0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	68db      	ldr	r3, [r3, #12]
 8001874:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001876:	69fb      	ldr	r3, [r7, #28]
 8001878:	005b      	lsls	r3, r3, #1
 800187a:	2203      	movs	r2, #3
 800187c:	fa02 f303 	lsl.w	r3, r2, r3
 8001880:	43db      	mvns	r3, r3
 8001882:	69ba      	ldr	r2, [r7, #24]
 8001884:	4013      	ands	r3, r2
 8001886:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	689a      	ldr	r2, [r3, #8]
 800188c:	69fb      	ldr	r3, [r7, #28]
 800188e:	005b      	lsls	r3, r3, #1
 8001890:	fa02 f303 	lsl.w	r3, r2, r3
 8001894:	69ba      	ldr	r2, [r7, #24]
 8001896:	4313      	orrs	r3, r2
 8001898:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	69ba      	ldr	r2, [r7, #24]
 800189e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	685b      	ldr	r3, [r3, #4]
 80018a4:	f003 0303 	and.w	r3, r3, #3
 80018a8:	2b02      	cmp	r3, #2
 80018aa:	d123      	bne.n	80018f4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80018ac:	69fb      	ldr	r3, [r7, #28]
 80018ae:	08da      	lsrs	r2, r3, #3
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	3208      	adds	r2, #8
 80018b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80018ba:	69fb      	ldr	r3, [r7, #28]
 80018bc:	f003 0307 	and.w	r3, r3, #7
 80018c0:	009b      	lsls	r3, r3, #2
 80018c2:	220f      	movs	r2, #15
 80018c4:	fa02 f303 	lsl.w	r3, r2, r3
 80018c8:	43db      	mvns	r3, r3
 80018ca:	69ba      	ldr	r2, [r7, #24]
 80018cc:	4013      	ands	r3, r2
 80018ce:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	691a      	ldr	r2, [r3, #16]
 80018d4:	69fb      	ldr	r3, [r7, #28]
 80018d6:	f003 0307 	and.w	r3, r3, #7
 80018da:	009b      	lsls	r3, r3, #2
 80018dc:	fa02 f303 	lsl.w	r3, r2, r3
 80018e0:	69ba      	ldr	r2, [r7, #24]
 80018e2:	4313      	orrs	r3, r2
 80018e4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80018e6:	69fb      	ldr	r3, [r7, #28]
 80018e8:	08da      	lsrs	r2, r3, #3
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	3208      	adds	r2, #8
 80018ee:	69b9      	ldr	r1, [r7, #24]
 80018f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80018fa:	69fb      	ldr	r3, [r7, #28]
 80018fc:	005b      	lsls	r3, r3, #1
 80018fe:	2203      	movs	r2, #3
 8001900:	fa02 f303 	lsl.w	r3, r2, r3
 8001904:	43db      	mvns	r3, r3
 8001906:	69ba      	ldr	r2, [r7, #24]
 8001908:	4013      	ands	r3, r2
 800190a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	685b      	ldr	r3, [r3, #4]
 8001910:	f003 0203 	and.w	r2, r3, #3
 8001914:	69fb      	ldr	r3, [r7, #28]
 8001916:	005b      	lsls	r3, r3, #1
 8001918:	fa02 f303 	lsl.w	r3, r2, r3
 800191c:	69ba      	ldr	r2, [r7, #24]
 800191e:	4313      	orrs	r3, r2
 8001920:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	69ba      	ldr	r2, [r7, #24]
 8001926:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001930:	2b00      	cmp	r3, #0
 8001932:	f000 80a2 	beq.w	8001a7a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001936:	2300      	movs	r3, #0
 8001938:	60fb      	str	r3, [r7, #12]
 800193a:	4b57      	ldr	r3, [pc, #348]	@ (8001a98 <HAL_GPIO_Init+0x2e8>)
 800193c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800193e:	4a56      	ldr	r2, [pc, #344]	@ (8001a98 <HAL_GPIO_Init+0x2e8>)
 8001940:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001944:	6453      	str	r3, [r2, #68]	@ 0x44
 8001946:	4b54      	ldr	r3, [pc, #336]	@ (8001a98 <HAL_GPIO_Init+0x2e8>)
 8001948:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800194a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800194e:	60fb      	str	r3, [r7, #12]
 8001950:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001952:	4a52      	ldr	r2, [pc, #328]	@ (8001a9c <HAL_GPIO_Init+0x2ec>)
 8001954:	69fb      	ldr	r3, [r7, #28]
 8001956:	089b      	lsrs	r3, r3, #2
 8001958:	3302      	adds	r3, #2
 800195a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800195e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001960:	69fb      	ldr	r3, [r7, #28]
 8001962:	f003 0303 	and.w	r3, r3, #3
 8001966:	009b      	lsls	r3, r3, #2
 8001968:	220f      	movs	r2, #15
 800196a:	fa02 f303 	lsl.w	r3, r2, r3
 800196e:	43db      	mvns	r3, r3
 8001970:	69ba      	ldr	r2, [r7, #24]
 8001972:	4013      	ands	r3, r2
 8001974:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	4a49      	ldr	r2, [pc, #292]	@ (8001aa0 <HAL_GPIO_Init+0x2f0>)
 800197a:	4293      	cmp	r3, r2
 800197c:	d019      	beq.n	80019b2 <HAL_GPIO_Init+0x202>
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	4a48      	ldr	r2, [pc, #288]	@ (8001aa4 <HAL_GPIO_Init+0x2f4>)
 8001982:	4293      	cmp	r3, r2
 8001984:	d013      	beq.n	80019ae <HAL_GPIO_Init+0x1fe>
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	4a47      	ldr	r2, [pc, #284]	@ (8001aa8 <HAL_GPIO_Init+0x2f8>)
 800198a:	4293      	cmp	r3, r2
 800198c:	d00d      	beq.n	80019aa <HAL_GPIO_Init+0x1fa>
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	4a46      	ldr	r2, [pc, #280]	@ (8001aac <HAL_GPIO_Init+0x2fc>)
 8001992:	4293      	cmp	r3, r2
 8001994:	d007      	beq.n	80019a6 <HAL_GPIO_Init+0x1f6>
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	4a45      	ldr	r2, [pc, #276]	@ (8001ab0 <HAL_GPIO_Init+0x300>)
 800199a:	4293      	cmp	r3, r2
 800199c:	d101      	bne.n	80019a2 <HAL_GPIO_Init+0x1f2>
 800199e:	2304      	movs	r3, #4
 80019a0:	e008      	b.n	80019b4 <HAL_GPIO_Init+0x204>
 80019a2:	2307      	movs	r3, #7
 80019a4:	e006      	b.n	80019b4 <HAL_GPIO_Init+0x204>
 80019a6:	2303      	movs	r3, #3
 80019a8:	e004      	b.n	80019b4 <HAL_GPIO_Init+0x204>
 80019aa:	2302      	movs	r3, #2
 80019ac:	e002      	b.n	80019b4 <HAL_GPIO_Init+0x204>
 80019ae:	2301      	movs	r3, #1
 80019b0:	e000      	b.n	80019b4 <HAL_GPIO_Init+0x204>
 80019b2:	2300      	movs	r3, #0
 80019b4:	69fa      	ldr	r2, [r7, #28]
 80019b6:	f002 0203 	and.w	r2, r2, #3
 80019ba:	0092      	lsls	r2, r2, #2
 80019bc:	4093      	lsls	r3, r2
 80019be:	69ba      	ldr	r2, [r7, #24]
 80019c0:	4313      	orrs	r3, r2
 80019c2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80019c4:	4935      	ldr	r1, [pc, #212]	@ (8001a9c <HAL_GPIO_Init+0x2ec>)
 80019c6:	69fb      	ldr	r3, [r7, #28]
 80019c8:	089b      	lsrs	r3, r3, #2
 80019ca:	3302      	adds	r3, #2
 80019cc:	69ba      	ldr	r2, [r7, #24]
 80019ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80019d2:	4b38      	ldr	r3, [pc, #224]	@ (8001ab4 <HAL_GPIO_Init+0x304>)
 80019d4:	689b      	ldr	r3, [r3, #8]
 80019d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019d8:	693b      	ldr	r3, [r7, #16]
 80019da:	43db      	mvns	r3, r3
 80019dc:	69ba      	ldr	r2, [r7, #24]
 80019de:	4013      	ands	r3, r2
 80019e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	685b      	ldr	r3, [r3, #4]
 80019e6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d003      	beq.n	80019f6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80019ee:	69ba      	ldr	r2, [r7, #24]
 80019f0:	693b      	ldr	r3, [r7, #16]
 80019f2:	4313      	orrs	r3, r2
 80019f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80019f6:	4a2f      	ldr	r2, [pc, #188]	@ (8001ab4 <HAL_GPIO_Init+0x304>)
 80019f8:	69bb      	ldr	r3, [r7, #24]
 80019fa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80019fc:	4b2d      	ldr	r3, [pc, #180]	@ (8001ab4 <HAL_GPIO_Init+0x304>)
 80019fe:	68db      	ldr	r3, [r3, #12]
 8001a00:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a02:	693b      	ldr	r3, [r7, #16]
 8001a04:	43db      	mvns	r3, r3
 8001a06:	69ba      	ldr	r2, [r7, #24]
 8001a08:	4013      	ands	r3, r2
 8001a0a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d003      	beq.n	8001a20 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001a18:	69ba      	ldr	r2, [r7, #24]
 8001a1a:	693b      	ldr	r3, [r7, #16]
 8001a1c:	4313      	orrs	r3, r2
 8001a1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001a20:	4a24      	ldr	r2, [pc, #144]	@ (8001ab4 <HAL_GPIO_Init+0x304>)
 8001a22:	69bb      	ldr	r3, [r7, #24]
 8001a24:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001a26:	4b23      	ldr	r3, [pc, #140]	@ (8001ab4 <HAL_GPIO_Init+0x304>)
 8001a28:	685b      	ldr	r3, [r3, #4]
 8001a2a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a2c:	693b      	ldr	r3, [r7, #16]
 8001a2e:	43db      	mvns	r3, r3
 8001a30:	69ba      	ldr	r2, [r7, #24]
 8001a32:	4013      	ands	r3, r2
 8001a34:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	685b      	ldr	r3, [r3, #4]
 8001a3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d003      	beq.n	8001a4a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001a42:	69ba      	ldr	r2, [r7, #24]
 8001a44:	693b      	ldr	r3, [r7, #16]
 8001a46:	4313      	orrs	r3, r2
 8001a48:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001a4a:	4a1a      	ldr	r2, [pc, #104]	@ (8001ab4 <HAL_GPIO_Init+0x304>)
 8001a4c:	69bb      	ldr	r3, [r7, #24]
 8001a4e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a50:	4b18      	ldr	r3, [pc, #96]	@ (8001ab4 <HAL_GPIO_Init+0x304>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a56:	693b      	ldr	r3, [r7, #16]
 8001a58:	43db      	mvns	r3, r3
 8001a5a:	69ba      	ldr	r2, [r7, #24]
 8001a5c:	4013      	ands	r3, r2
 8001a5e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	685b      	ldr	r3, [r3, #4]
 8001a64:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d003      	beq.n	8001a74 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001a6c:	69ba      	ldr	r2, [r7, #24]
 8001a6e:	693b      	ldr	r3, [r7, #16]
 8001a70:	4313      	orrs	r3, r2
 8001a72:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001a74:	4a0f      	ldr	r2, [pc, #60]	@ (8001ab4 <HAL_GPIO_Init+0x304>)
 8001a76:	69bb      	ldr	r3, [r7, #24]
 8001a78:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a7a:	69fb      	ldr	r3, [r7, #28]
 8001a7c:	3301      	adds	r3, #1
 8001a7e:	61fb      	str	r3, [r7, #28]
 8001a80:	69fb      	ldr	r3, [r7, #28]
 8001a82:	2b0f      	cmp	r3, #15
 8001a84:	f67f aea2 	bls.w	80017cc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001a88:	bf00      	nop
 8001a8a:	bf00      	nop
 8001a8c:	3724      	adds	r7, #36	@ 0x24
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a94:	4770      	bx	lr
 8001a96:	bf00      	nop
 8001a98:	40023800 	.word	0x40023800
 8001a9c:	40013800 	.word	0x40013800
 8001aa0:	40020000 	.word	0x40020000
 8001aa4:	40020400 	.word	0x40020400
 8001aa8:	40020800 	.word	0x40020800
 8001aac:	40020c00 	.word	0x40020c00
 8001ab0:	40021000 	.word	0x40021000
 8001ab4:	40013c00 	.word	0x40013c00

08001ab8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	b083      	sub	sp, #12
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
 8001ac0:	460b      	mov	r3, r1
 8001ac2:	807b      	strh	r3, [r7, #2]
 8001ac4:	4613      	mov	r3, r2
 8001ac6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ac8:	787b      	ldrb	r3, [r7, #1]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d003      	beq.n	8001ad6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ace:	887a      	ldrh	r2, [r7, #2]
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001ad4:	e003      	b.n	8001ade <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001ad6:	887b      	ldrh	r3, [r7, #2]
 8001ad8:	041a      	lsls	r2, r3, #16
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	619a      	str	r2, [r3, #24]
}
 8001ade:	bf00      	nop
 8001ae0:	370c      	adds	r7, #12
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae8:	4770      	bx	lr
	...

08001aec <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b086      	sub	sp, #24
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d101      	bne.n	8001afe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001afa:	2301      	movs	r3, #1
 8001afc:	e267      	b.n	8001fce <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f003 0301 	and.w	r3, r3, #1
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d075      	beq.n	8001bf6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001b0a:	4b88      	ldr	r3, [pc, #544]	@ (8001d2c <HAL_RCC_OscConfig+0x240>)
 8001b0c:	689b      	ldr	r3, [r3, #8]
 8001b0e:	f003 030c 	and.w	r3, r3, #12
 8001b12:	2b04      	cmp	r3, #4
 8001b14:	d00c      	beq.n	8001b30 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b16:	4b85      	ldr	r3, [pc, #532]	@ (8001d2c <HAL_RCC_OscConfig+0x240>)
 8001b18:	689b      	ldr	r3, [r3, #8]
 8001b1a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001b1e:	2b08      	cmp	r3, #8
 8001b20:	d112      	bne.n	8001b48 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b22:	4b82      	ldr	r3, [pc, #520]	@ (8001d2c <HAL_RCC_OscConfig+0x240>)
 8001b24:	685b      	ldr	r3, [r3, #4]
 8001b26:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001b2a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001b2e:	d10b      	bne.n	8001b48 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b30:	4b7e      	ldr	r3, [pc, #504]	@ (8001d2c <HAL_RCC_OscConfig+0x240>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d05b      	beq.n	8001bf4 <HAL_RCC_OscConfig+0x108>
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	685b      	ldr	r3, [r3, #4]
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d157      	bne.n	8001bf4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001b44:	2301      	movs	r3, #1
 8001b46:	e242      	b.n	8001fce <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001b50:	d106      	bne.n	8001b60 <HAL_RCC_OscConfig+0x74>
 8001b52:	4b76      	ldr	r3, [pc, #472]	@ (8001d2c <HAL_RCC_OscConfig+0x240>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	4a75      	ldr	r2, [pc, #468]	@ (8001d2c <HAL_RCC_OscConfig+0x240>)
 8001b58:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001b5c:	6013      	str	r3, [r2, #0]
 8001b5e:	e01d      	b.n	8001b9c <HAL_RCC_OscConfig+0xb0>
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	685b      	ldr	r3, [r3, #4]
 8001b64:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001b68:	d10c      	bne.n	8001b84 <HAL_RCC_OscConfig+0x98>
 8001b6a:	4b70      	ldr	r3, [pc, #448]	@ (8001d2c <HAL_RCC_OscConfig+0x240>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	4a6f      	ldr	r2, [pc, #444]	@ (8001d2c <HAL_RCC_OscConfig+0x240>)
 8001b70:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001b74:	6013      	str	r3, [r2, #0]
 8001b76:	4b6d      	ldr	r3, [pc, #436]	@ (8001d2c <HAL_RCC_OscConfig+0x240>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	4a6c      	ldr	r2, [pc, #432]	@ (8001d2c <HAL_RCC_OscConfig+0x240>)
 8001b7c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001b80:	6013      	str	r3, [r2, #0]
 8001b82:	e00b      	b.n	8001b9c <HAL_RCC_OscConfig+0xb0>
 8001b84:	4b69      	ldr	r3, [pc, #420]	@ (8001d2c <HAL_RCC_OscConfig+0x240>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	4a68      	ldr	r2, [pc, #416]	@ (8001d2c <HAL_RCC_OscConfig+0x240>)
 8001b8a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001b8e:	6013      	str	r3, [r2, #0]
 8001b90:	4b66      	ldr	r3, [pc, #408]	@ (8001d2c <HAL_RCC_OscConfig+0x240>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	4a65      	ldr	r2, [pc, #404]	@ (8001d2c <HAL_RCC_OscConfig+0x240>)
 8001b96:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001b9a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d013      	beq.n	8001bcc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ba4:	f7ff fc54 	bl	8001450 <HAL_GetTick>
 8001ba8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001baa:	e008      	b.n	8001bbe <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001bac:	f7ff fc50 	bl	8001450 <HAL_GetTick>
 8001bb0:	4602      	mov	r2, r0
 8001bb2:	693b      	ldr	r3, [r7, #16]
 8001bb4:	1ad3      	subs	r3, r2, r3
 8001bb6:	2b64      	cmp	r3, #100	@ 0x64
 8001bb8:	d901      	bls.n	8001bbe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001bba:	2303      	movs	r3, #3
 8001bbc:	e207      	b.n	8001fce <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bbe:	4b5b      	ldr	r3, [pc, #364]	@ (8001d2c <HAL_RCC_OscConfig+0x240>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d0f0      	beq.n	8001bac <HAL_RCC_OscConfig+0xc0>
 8001bca:	e014      	b.n	8001bf6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bcc:	f7ff fc40 	bl	8001450 <HAL_GetTick>
 8001bd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bd2:	e008      	b.n	8001be6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001bd4:	f7ff fc3c 	bl	8001450 <HAL_GetTick>
 8001bd8:	4602      	mov	r2, r0
 8001bda:	693b      	ldr	r3, [r7, #16]
 8001bdc:	1ad3      	subs	r3, r2, r3
 8001bde:	2b64      	cmp	r3, #100	@ 0x64
 8001be0:	d901      	bls.n	8001be6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001be2:	2303      	movs	r3, #3
 8001be4:	e1f3      	b.n	8001fce <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001be6:	4b51      	ldr	r3, [pc, #324]	@ (8001d2c <HAL_RCC_OscConfig+0x240>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d1f0      	bne.n	8001bd4 <HAL_RCC_OscConfig+0xe8>
 8001bf2:	e000      	b.n	8001bf6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bf4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f003 0302 	and.w	r3, r3, #2
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d063      	beq.n	8001cca <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001c02:	4b4a      	ldr	r3, [pc, #296]	@ (8001d2c <HAL_RCC_OscConfig+0x240>)
 8001c04:	689b      	ldr	r3, [r3, #8]
 8001c06:	f003 030c 	and.w	r3, r3, #12
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d00b      	beq.n	8001c26 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c0e:	4b47      	ldr	r3, [pc, #284]	@ (8001d2c <HAL_RCC_OscConfig+0x240>)
 8001c10:	689b      	ldr	r3, [r3, #8]
 8001c12:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001c16:	2b08      	cmp	r3, #8
 8001c18:	d11c      	bne.n	8001c54 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c1a:	4b44      	ldr	r3, [pc, #272]	@ (8001d2c <HAL_RCC_OscConfig+0x240>)
 8001c1c:	685b      	ldr	r3, [r3, #4]
 8001c1e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d116      	bne.n	8001c54 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c26:	4b41      	ldr	r3, [pc, #260]	@ (8001d2c <HAL_RCC_OscConfig+0x240>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f003 0302 	and.w	r3, r3, #2
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d005      	beq.n	8001c3e <HAL_RCC_OscConfig+0x152>
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	68db      	ldr	r3, [r3, #12]
 8001c36:	2b01      	cmp	r3, #1
 8001c38:	d001      	beq.n	8001c3e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	e1c7      	b.n	8001fce <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c3e:	4b3b      	ldr	r3, [pc, #236]	@ (8001d2c <HAL_RCC_OscConfig+0x240>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	691b      	ldr	r3, [r3, #16]
 8001c4a:	00db      	lsls	r3, r3, #3
 8001c4c:	4937      	ldr	r1, [pc, #220]	@ (8001d2c <HAL_RCC_OscConfig+0x240>)
 8001c4e:	4313      	orrs	r3, r2
 8001c50:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c52:	e03a      	b.n	8001cca <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	68db      	ldr	r3, [r3, #12]
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d020      	beq.n	8001c9e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c5c:	4b34      	ldr	r3, [pc, #208]	@ (8001d30 <HAL_RCC_OscConfig+0x244>)
 8001c5e:	2201      	movs	r2, #1
 8001c60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c62:	f7ff fbf5 	bl	8001450 <HAL_GetTick>
 8001c66:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c68:	e008      	b.n	8001c7c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c6a:	f7ff fbf1 	bl	8001450 <HAL_GetTick>
 8001c6e:	4602      	mov	r2, r0
 8001c70:	693b      	ldr	r3, [r7, #16]
 8001c72:	1ad3      	subs	r3, r2, r3
 8001c74:	2b02      	cmp	r3, #2
 8001c76:	d901      	bls.n	8001c7c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001c78:	2303      	movs	r3, #3
 8001c7a:	e1a8      	b.n	8001fce <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c7c:	4b2b      	ldr	r3, [pc, #172]	@ (8001d2c <HAL_RCC_OscConfig+0x240>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f003 0302 	and.w	r3, r3, #2
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d0f0      	beq.n	8001c6a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c88:	4b28      	ldr	r3, [pc, #160]	@ (8001d2c <HAL_RCC_OscConfig+0x240>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	691b      	ldr	r3, [r3, #16]
 8001c94:	00db      	lsls	r3, r3, #3
 8001c96:	4925      	ldr	r1, [pc, #148]	@ (8001d2c <HAL_RCC_OscConfig+0x240>)
 8001c98:	4313      	orrs	r3, r2
 8001c9a:	600b      	str	r3, [r1, #0]
 8001c9c:	e015      	b.n	8001cca <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c9e:	4b24      	ldr	r3, [pc, #144]	@ (8001d30 <HAL_RCC_OscConfig+0x244>)
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ca4:	f7ff fbd4 	bl	8001450 <HAL_GetTick>
 8001ca8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001caa:	e008      	b.n	8001cbe <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001cac:	f7ff fbd0 	bl	8001450 <HAL_GetTick>
 8001cb0:	4602      	mov	r2, r0
 8001cb2:	693b      	ldr	r3, [r7, #16]
 8001cb4:	1ad3      	subs	r3, r2, r3
 8001cb6:	2b02      	cmp	r3, #2
 8001cb8:	d901      	bls.n	8001cbe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001cba:	2303      	movs	r3, #3
 8001cbc:	e187      	b.n	8001fce <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cbe:	4b1b      	ldr	r3, [pc, #108]	@ (8001d2c <HAL_RCC_OscConfig+0x240>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f003 0302 	and.w	r3, r3, #2
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d1f0      	bne.n	8001cac <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f003 0308 	and.w	r3, r3, #8
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d036      	beq.n	8001d44 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	695b      	ldr	r3, [r3, #20]
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d016      	beq.n	8001d0c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001cde:	4b15      	ldr	r3, [pc, #84]	@ (8001d34 <HAL_RCC_OscConfig+0x248>)
 8001ce0:	2201      	movs	r2, #1
 8001ce2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ce4:	f7ff fbb4 	bl	8001450 <HAL_GetTick>
 8001ce8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cea:	e008      	b.n	8001cfe <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001cec:	f7ff fbb0 	bl	8001450 <HAL_GetTick>
 8001cf0:	4602      	mov	r2, r0
 8001cf2:	693b      	ldr	r3, [r7, #16]
 8001cf4:	1ad3      	subs	r3, r2, r3
 8001cf6:	2b02      	cmp	r3, #2
 8001cf8:	d901      	bls.n	8001cfe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001cfa:	2303      	movs	r3, #3
 8001cfc:	e167      	b.n	8001fce <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cfe:	4b0b      	ldr	r3, [pc, #44]	@ (8001d2c <HAL_RCC_OscConfig+0x240>)
 8001d00:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001d02:	f003 0302 	and.w	r3, r3, #2
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d0f0      	beq.n	8001cec <HAL_RCC_OscConfig+0x200>
 8001d0a:	e01b      	b.n	8001d44 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d0c:	4b09      	ldr	r3, [pc, #36]	@ (8001d34 <HAL_RCC_OscConfig+0x248>)
 8001d0e:	2200      	movs	r2, #0
 8001d10:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d12:	f7ff fb9d 	bl	8001450 <HAL_GetTick>
 8001d16:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d18:	e00e      	b.n	8001d38 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d1a:	f7ff fb99 	bl	8001450 <HAL_GetTick>
 8001d1e:	4602      	mov	r2, r0
 8001d20:	693b      	ldr	r3, [r7, #16]
 8001d22:	1ad3      	subs	r3, r2, r3
 8001d24:	2b02      	cmp	r3, #2
 8001d26:	d907      	bls.n	8001d38 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001d28:	2303      	movs	r3, #3
 8001d2a:	e150      	b.n	8001fce <HAL_RCC_OscConfig+0x4e2>
 8001d2c:	40023800 	.word	0x40023800
 8001d30:	42470000 	.word	0x42470000
 8001d34:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d38:	4b88      	ldr	r3, [pc, #544]	@ (8001f5c <HAL_RCC_OscConfig+0x470>)
 8001d3a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001d3c:	f003 0302 	and.w	r3, r3, #2
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d1ea      	bne.n	8001d1a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f003 0304 	and.w	r3, r3, #4
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	f000 8097 	beq.w	8001e80 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d52:	2300      	movs	r3, #0
 8001d54:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d56:	4b81      	ldr	r3, [pc, #516]	@ (8001f5c <HAL_RCC_OscConfig+0x470>)
 8001d58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d5a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d10f      	bne.n	8001d82 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d62:	2300      	movs	r3, #0
 8001d64:	60bb      	str	r3, [r7, #8]
 8001d66:	4b7d      	ldr	r3, [pc, #500]	@ (8001f5c <HAL_RCC_OscConfig+0x470>)
 8001d68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d6a:	4a7c      	ldr	r2, [pc, #496]	@ (8001f5c <HAL_RCC_OscConfig+0x470>)
 8001d6c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d70:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d72:	4b7a      	ldr	r3, [pc, #488]	@ (8001f5c <HAL_RCC_OscConfig+0x470>)
 8001d74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d76:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d7a:	60bb      	str	r3, [r7, #8]
 8001d7c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d7e:	2301      	movs	r3, #1
 8001d80:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d82:	4b77      	ldr	r3, [pc, #476]	@ (8001f60 <HAL_RCC_OscConfig+0x474>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d118      	bne.n	8001dc0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d8e:	4b74      	ldr	r3, [pc, #464]	@ (8001f60 <HAL_RCC_OscConfig+0x474>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	4a73      	ldr	r2, [pc, #460]	@ (8001f60 <HAL_RCC_OscConfig+0x474>)
 8001d94:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d98:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d9a:	f7ff fb59 	bl	8001450 <HAL_GetTick>
 8001d9e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001da0:	e008      	b.n	8001db4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001da2:	f7ff fb55 	bl	8001450 <HAL_GetTick>
 8001da6:	4602      	mov	r2, r0
 8001da8:	693b      	ldr	r3, [r7, #16]
 8001daa:	1ad3      	subs	r3, r2, r3
 8001dac:	2b02      	cmp	r3, #2
 8001dae:	d901      	bls.n	8001db4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001db0:	2303      	movs	r3, #3
 8001db2:	e10c      	b.n	8001fce <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001db4:	4b6a      	ldr	r3, [pc, #424]	@ (8001f60 <HAL_RCC_OscConfig+0x474>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d0f0      	beq.n	8001da2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	689b      	ldr	r3, [r3, #8]
 8001dc4:	2b01      	cmp	r3, #1
 8001dc6:	d106      	bne.n	8001dd6 <HAL_RCC_OscConfig+0x2ea>
 8001dc8:	4b64      	ldr	r3, [pc, #400]	@ (8001f5c <HAL_RCC_OscConfig+0x470>)
 8001dca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001dcc:	4a63      	ldr	r2, [pc, #396]	@ (8001f5c <HAL_RCC_OscConfig+0x470>)
 8001dce:	f043 0301 	orr.w	r3, r3, #1
 8001dd2:	6713      	str	r3, [r2, #112]	@ 0x70
 8001dd4:	e01c      	b.n	8001e10 <HAL_RCC_OscConfig+0x324>
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	689b      	ldr	r3, [r3, #8]
 8001dda:	2b05      	cmp	r3, #5
 8001ddc:	d10c      	bne.n	8001df8 <HAL_RCC_OscConfig+0x30c>
 8001dde:	4b5f      	ldr	r3, [pc, #380]	@ (8001f5c <HAL_RCC_OscConfig+0x470>)
 8001de0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001de2:	4a5e      	ldr	r2, [pc, #376]	@ (8001f5c <HAL_RCC_OscConfig+0x470>)
 8001de4:	f043 0304 	orr.w	r3, r3, #4
 8001de8:	6713      	str	r3, [r2, #112]	@ 0x70
 8001dea:	4b5c      	ldr	r3, [pc, #368]	@ (8001f5c <HAL_RCC_OscConfig+0x470>)
 8001dec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001dee:	4a5b      	ldr	r2, [pc, #364]	@ (8001f5c <HAL_RCC_OscConfig+0x470>)
 8001df0:	f043 0301 	orr.w	r3, r3, #1
 8001df4:	6713      	str	r3, [r2, #112]	@ 0x70
 8001df6:	e00b      	b.n	8001e10 <HAL_RCC_OscConfig+0x324>
 8001df8:	4b58      	ldr	r3, [pc, #352]	@ (8001f5c <HAL_RCC_OscConfig+0x470>)
 8001dfa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001dfc:	4a57      	ldr	r2, [pc, #348]	@ (8001f5c <HAL_RCC_OscConfig+0x470>)
 8001dfe:	f023 0301 	bic.w	r3, r3, #1
 8001e02:	6713      	str	r3, [r2, #112]	@ 0x70
 8001e04:	4b55      	ldr	r3, [pc, #340]	@ (8001f5c <HAL_RCC_OscConfig+0x470>)
 8001e06:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e08:	4a54      	ldr	r2, [pc, #336]	@ (8001f5c <HAL_RCC_OscConfig+0x470>)
 8001e0a:	f023 0304 	bic.w	r3, r3, #4
 8001e0e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	689b      	ldr	r3, [r3, #8]
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d015      	beq.n	8001e44 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e18:	f7ff fb1a 	bl	8001450 <HAL_GetTick>
 8001e1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e1e:	e00a      	b.n	8001e36 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e20:	f7ff fb16 	bl	8001450 <HAL_GetTick>
 8001e24:	4602      	mov	r2, r0
 8001e26:	693b      	ldr	r3, [r7, #16]
 8001e28:	1ad3      	subs	r3, r2, r3
 8001e2a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d901      	bls.n	8001e36 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001e32:	2303      	movs	r3, #3
 8001e34:	e0cb      	b.n	8001fce <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e36:	4b49      	ldr	r3, [pc, #292]	@ (8001f5c <HAL_RCC_OscConfig+0x470>)
 8001e38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e3a:	f003 0302 	and.w	r3, r3, #2
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d0ee      	beq.n	8001e20 <HAL_RCC_OscConfig+0x334>
 8001e42:	e014      	b.n	8001e6e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e44:	f7ff fb04 	bl	8001450 <HAL_GetTick>
 8001e48:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e4a:	e00a      	b.n	8001e62 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e4c:	f7ff fb00 	bl	8001450 <HAL_GetTick>
 8001e50:	4602      	mov	r2, r0
 8001e52:	693b      	ldr	r3, [r7, #16]
 8001e54:	1ad3      	subs	r3, r2, r3
 8001e56:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d901      	bls.n	8001e62 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001e5e:	2303      	movs	r3, #3
 8001e60:	e0b5      	b.n	8001fce <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e62:	4b3e      	ldr	r3, [pc, #248]	@ (8001f5c <HAL_RCC_OscConfig+0x470>)
 8001e64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e66:	f003 0302 	and.w	r3, r3, #2
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d1ee      	bne.n	8001e4c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001e6e:	7dfb      	ldrb	r3, [r7, #23]
 8001e70:	2b01      	cmp	r3, #1
 8001e72:	d105      	bne.n	8001e80 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e74:	4b39      	ldr	r3, [pc, #228]	@ (8001f5c <HAL_RCC_OscConfig+0x470>)
 8001e76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e78:	4a38      	ldr	r2, [pc, #224]	@ (8001f5c <HAL_RCC_OscConfig+0x470>)
 8001e7a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001e7e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	699b      	ldr	r3, [r3, #24]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	f000 80a1 	beq.w	8001fcc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001e8a:	4b34      	ldr	r3, [pc, #208]	@ (8001f5c <HAL_RCC_OscConfig+0x470>)
 8001e8c:	689b      	ldr	r3, [r3, #8]
 8001e8e:	f003 030c 	and.w	r3, r3, #12
 8001e92:	2b08      	cmp	r3, #8
 8001e94:	d05c      	beq.n	8001f50 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	699b      	ldr	r3, [r3, #24]
 8001e9a:	2b02      	cmp	r3, #2
 8001e9c:	d141      	bne.n	8001f22 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e9e:	4b31      	ldr	r3, [pc, #196]	@ (8001f64 <HAL_RCC_OscConfig+0x478>)
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ea4:	f7ff fad4 	bl	8001450 <HAL_GetTick>
 8001ea8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001eaa:	e008      	b.n	8001ebe <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001eac:	f7ff fad0 	bl	8001450 <HAL_GetTick>
 8001eb0:	4602      	mov	r2, r0
 8001eb2:	693b      	ldr	r3, [r7, #16]
 8001eb4:	1ad3      	subs	r3, r2, r3
 8001eb6:	2b02      	cmp	r3, #2
 8001eb8:	d901      	bls.n	8001ebe <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001eba:	2303      	movs	r3, #3
 8001ebc:	e087      	b.n	8001fce <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ebe:	4b27      	ldr	r3, [pc, #156]	@ (8001f5c <HAL_RCC_OscConfig+0x470>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d1f0      	bne.n	8001eac <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	69da      	ldr	r2, [r3, #28]
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	6a1b      	ldr	r3, [r3, #32]
 8001ed2:	431a      	orrs	r2, r3
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ed8:	019b      	lsls	r3, r3, #6
 8001eda:	431a      	orrs	r2, r3
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ee0:	085b      	lsrs	r3, r3, #1
 8001ee2:	3b01      	subs	r3, #1
 8001ee4:	041b      	lsls	r3, r3, #16
 8001ee6:	431a      	orrs	r2, r3
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001eec:	061b      	lsls	r3, r3, #24
 8001eee:	491b      	ldr	r1, [pc, #108]	@ (8001f5c <HAL_RCC_OscConfig+0x470>)
 8001ef0:	4313      	orrs	r3, r2
 8001ef2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ef4:	4b1b      	ldr	r3, [pc, #108]	@ (8001f64 <HAL_RCC_OscConfig+0x478>)
 8001ef6:	2201      	movs	r2, #1
 8001ef8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001efa:	f7ff faa9 	bl	8001450 <HAL_GetTick>
 8001efe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f00:	e008      	b.n	8001f14 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f02:	f7ff faa5 	bl	8001450 <HAL_GetTick>
 8001f06:	4602      	mov	r2, r0
 8001f08:	693b      	ldr	r3, [r7, #16]
 8001f0a:	1ad3      	subs	r3, r2, r3
 8001f0c:	2b02      	cmp	r3, #2
 8001f0e:	d901      	bls.n	8001f14 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001f10:	2303      	movs	r3, #3
 8001f12:	e05c      	b.n	8001fce <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f14:	4b11      	ldr	r3, [pc, #68]	@ (8001f5c <HAL_RCC_OscConfig+0x470>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d0f0      	beq.n	8001f02 <HAL_RCC_OscConfig+0x416>
 8001f20:	e054      	b.n	8001fcc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f22:	4b10      	ldr	r3, [pc, #64]	@ (8001f64 <HAL_RCC_OscConfig+0x478>)
 8001f24:	2200      	movs	r2, #0
 8001f26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f28:	f7ff fa92 	bl	8001450 <HAL_GetTick>
 8001f2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f2e:	e008      	b.n	8001f42 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f30:	f7ff fa8e 	bl	8001450 <HAL_GetTick>
 8001f34:	4602      	mov	r2, r0
 8001f36:	693b      	ldr	r3, [r7, #16]
 8001f38:	1ad3      	subs	r3, r2, r3
 8001f3a:	2b02      	cmp	r3, #2
 8001f3c:	d901      	bls.n	8001f42 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001f3e:	2303      	movs	r3, #3
 8001f40:	e045      	b.n	8001fce <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f42:	4b06      	ldr	r3, [pc, #24]	@ (8001f5c <HAL_RCC_OscConfig+0x470>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d1f0      	bne.n	8001f30 <HAL_RCC_OscConfig+0x444>
 8001f4e:	e03d      	b.n	8001fcc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	699b      	ldr	r3, [r3, #24]
 8001f54:	2b01      	cmp	r3, #1
 8001f56:	d107      	bne.n	8001f68 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001f58:	2301      	movs	r3, #1
 8001f5a:	e038      	b.n	8001fce <HAL_RCC_OscConfig+0x4e2>
 8001f5c:	40023800 	.word	0x40023800
 8001f60:	40007000 	.word	0x40007000
 8001f64:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001f68:	4b1b      	ldr	r3, [pc, #108]	@ (8001fd8 <HAL_RCC_OscConfig+0x4ec>)
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	699b      	ldr	r3, [r3, #24]
 8001f72:	2b01      	cmp	r3, #1
 8001f74:	d028      	beq.n	8001fc8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f80:	429a      	cmp	r2, r3
 8001f82:	d121      	bne.n	8001fc8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f8e:	429a      	cmp	r2, r3
 8001f90:	d11a      	bne.n	8001fc8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001f92:	68fa      	ldr	r2, [r7, #12]
 8001f94:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001f98:	4013      	ands	r3, r2
 8001f9a:	687a      	ldr	r2, [r7, #4]
 8001f9c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001f9e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001fa0:	4293      	cmp	r3, r2
 8001fa2:	d111      	bne.n	8001fc8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fae:	085b      	lsrs	r3, r3, #1
 8001fb0:	3b01      	subs	r3, #1
 8001fb2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001fb4:	429a      	cmp	r2, r3
 8001fb6:	d107      	bne.n	8001fc8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fc2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001fc4:	429a      	cmp	r2, r3
 8001fc6:	d001      	beq.n	8001fcc <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001fc8:	2301      	movs	r3, #1
 8001fca:	e000      	b.n	8001fce <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001fcc:	2300      	movs	r3, #0
}
 8001fce:	4618      	mov	r0, r3
 8001fd0:	3718      	adds	r7, #24
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bd80      	pop	{r7, pc}
 8001fd6:	bf00      	nop
 8001fd8:	40023800 	.word	0x40023800

08001fdc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b084      	sub	sp, #16
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
 8001fe4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d101      	bne.n	8001ff0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001fec:	2301      	movs	r3, #1
 8001fee:	e0cc      	b.n	800218a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001ff0:	4b68      	ldr	r3, [pc, #416]	@ (8002194 <HAL_RCC_ClockConfig+0x1b8>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f003 0307 	and.w	r3, r3, #7
 8001ff8:	683a      	ldr	r2, [r7, #0]
 8001ffa:	429a      	cmp	r2, r3
 8001ffc:	d90c      	bls.n	8002018 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ffe:	4b65      	ldr	r3, [pc, #404]	@ (8002194 <HAL_RCC_ClockConfig+0x1b8>)
 8002000:	683a      	ldr	r2, [r7, #0]
 8002002:	b2d2      	uxtb	r2, r2
 8002004:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002006:	4b63      	ldr	r3, [pc, #396]	@ (8002194 <HAL_RCC_ClockConfig+0x1b8>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f003 0307 	and.w	r3, r3, #7
 800200e:	683a      	ldr	r2, [r7, #0]
 8002010:	429a      	cmp	r2, r3
 8002012:	d001      	beq.n	8002018 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002014:	2301      	movs	r3, #1
 8002016:	e0b8      	b.n	800218a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f003 0302 	and.w	r3, r3, #2
 8002020:	2b00      	cmp	r3, #0
 8002022:	d020      	beq.n	8002066 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f003 0304 	and.w	r3, r3, #4
 800202c:	2b00      	cmp	r3, #0
 800202e:	d005      	beq.n	800203c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002030:	4b59      	ldr	r3, [pc, #356]	@ (8002198 <HAL_RCC_ClockConfig+0x1bc>)
 8002032:	689b      	ldr	r3, [r3, #8]
 8002034:	4a58      	ldr	r2, [pc, #352]	@ (8002198 <HAL_RCC_ClockConfig+0x1bc>)
 8002036:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800203a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f003 0308 	and.w	r3, r3, #8
 8002044:	2b00      	cmp	r3, #0
 8002046:	d005      	beq.n	8002054 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002048:	4b53      	ldr	r3, [pc, #332]	@ (8002198 <HAL_RCC_ClockConfig+0x1bc>)
 800204a:	689b      	ldr	r3, [r3, #8]
 800204c:	4a52      	ldr	r2, [pc, #328]	@ (8002198 <HAL_RCC_ClockConfig+0x1bc>)
 800204e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002052:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002054:	4b50      	ldr	r3, [pc, #320]	@ (8002198 <HAL_RCC_ClockConfig+0x1bc>)
 8002056:	689b      	ldr	r3, [r3, #8]
 8002058:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	689b      	ldr	r3, [r3, #8]
 8002060:	494d      	ldr	r1, [pc, #308]	@ (8002198 <HAL_RCC_ClockConfig+0x1bc>)
 8002062:	4313      	orrs	r3, r2
 8002064:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f003 0301 	and.w	r3, r3, #1
 800206e:	2b00      	cmp	r3, #0
 8002070:	d044      	beq.n	80020fc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	685b      	ldr	r3, [r3, #4]
 8002076:	2b01      	cmp	r3, #1
 8002078:	d107      	bne.n	800208a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800207a:	4b47      	ldr	r3, [pc, #284]	@ (8002198 <HAL_RCC_ClockConfig+0x1bc>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002082:	2b00      	cmp	r3, #0
 8002084:	d119      	bne.n	80020ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002086:	2301      	movs	r3, #1
 8002088:	e07f      	b.n	800218a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	685b      	ldr	r3, [r3, #4]
 800208e:	2b02      	cmp	r3, #2
 8002090:	d003      	beq.n	800209a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002096:	2b03      	cmp	r3, #3
 8002098:	d107      	bne.n	80020aa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800209a:	4b3f      	ldr	r3, [pc, #252]	@ (8002198 <HAL_RCC_ClockConfig+0x1bc>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d109      	bne.n	80020ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020a6:	2301      	movs	r3, #1
 80020a8:	e06f      	b.n	800218a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020aa:	4b3b      	ldr	r3, [pc, #236]	@ (8002198 <HAL_RCC_ClockConfig+0x1bc>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f003 0302 	and.w	r3, r3, #2
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d101      	bne.n	80020ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020b6:	2301      	movs	r3, #1
 80020b8:	e067      	b.n	800218a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80020ba:	4b37      	ldr	r3, [pc, #220]	@ (8002198 <HAL_RCC_ClockConfig+0x1bc>)
 80020bc:	689b      	ldr	r3, [r3, #8]
 80020be:	f023 0203 	bic.w	r2, r3, #3
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	4934      	ldr	r1, [pc, #208]	@ (8002198 <HAL_RCC_ClockConfig+0x1bc>)
 80020c8:	4313      	orrs	r3, r2
 80020ca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80020cc:	f7ff f9c0 	bl	8001450 <HAL_GetTick>
 80020d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020d2:	e00a      	b.n	80020ea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020d4:	f7ff f9bc 	bl	8001450 <HAL_GetTick>
 80020d8:	4602      	mov	r2, r0
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	1ad3      	subs	r3, r2, r3
 80020de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d901      	bls.n	80020ea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80020e6:	2303      	movs	r3, #3
 80020e8:	e04f      	b.n	800218a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020ea:	4b2b      	ldr	r3, [pc, #172]	@ (8002198 <HAL_RCC_ClockConfig+0x1bc>)
 80020ec:	689b      	ldr	r3, [r3, #8]
 80020ee:	f003 020c 	and.w	r2, r3, #12
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	009b      	lsls	r3, r3, #2
 80020f8:	429a      	cmp	r2, r3
 80020fa:	d1eb      	bne.n	80020d4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80020fc:	4b25      	ldr	r3, [pc, #148]	@ (8002194 <HAL_RCC_ClockConfig+0x1b8>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f003 0307 	and.w	r3, r3, #7
 8002104:	683a      	ldr	r2, [r7, #0]
 8002106:	429a      	cmp	r2, r3
 8002108:	d20c      	bcs.n	8002124 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800210a:	4b22      	ldr	r3, [pc, #136]	@ (8002194 <HAL_RCC_ClockConfig+0x1b8>)
 800210c:	683a      	ldr	r2, [r7, #0]
 800210e:	b2d2      	uxtb	r2, r2
 8002110:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002112:	4b20      	ldr	r3, [pc, #128]	@ (8002194 <HAL_RCC_ClockConfig+0x1b8>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f003 0307 	and.w	r3, r3, #7
 800211a:	683a      	ldr	r2, [r7, #0]
 800211c:	429a      	cmp	r2, r3
 800211e:	d001      	beq.n	8002124 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002120:	2301      	movs	r3, #1
 8002122:	e032      	b.n	800218a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f003 0304 	and.w	r3, r3, #4
 800212c:	2b00      	cmp	r3, #0
 800212e:	d008      	beq.n	8002142 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002130:	4b19      	ldr	r3, [pc, #100]	@ (8002198 <HAL_RCC_ClockConfig+0x1bc>)
 8002132:	689b      	ldr	r3, [r3, #8]
 8002134:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	68db      	ldr	r3, [r3, #12]
 800213c:	4916      	ldr	r1, [pc, #88]	@ (8002198 <HAL_RCC_ClockConfig+0x1bc>)
 800213e:	4313      	orrs	r3, r2
 8002140:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f003 0308 	and.w	r3, r3, #8
 800214a:	2b00      	cmp	r3, #0
 800214c:	d009      	beq.n	8002162 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800214e:	4b12      	ldr	r3, [pc, #72]	@ (8002198 <HAL_RCC_ClockConfig+0x1bc>)
 8002150:	689b      	ldr	r3, [r3, #8]
 8002152:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	691b      	ldr	r3, [r3, #16]
 800215a:	00db      	lsls	r3, r3, #3
 800215c:	490e      	ldr	r1, [pc, #56]	@ (8002198 <HAL_RCC_ClockConfig+0x1bc>)
 800215e:	4313      	orrs	r3, r2
 8002160:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002162:	f000 f821 	bl	80021a8 <HAL_RCC_GetSysClockFreq>
 8002166:	4602      	mov	r2, r0
 8002168:	4b0b      	ldr	r3, [pc, #44]	@ (8002198 <HAL_RCC_ClockConfig+0x1bc>)
 800216a:	689b      	ldr	r3, [r3, #8]
 800216c:	091b      	lsrs	r3, r3, #4
 800216e:	f003 030f 	and.w	r3, r3, #15
 8002172:	490a      	ldr	r1, [pc, #40]	@ (800219c <HAL_RCC_ClockConfig+0x1c0>)
 8002174:	5ccb      	ldrb	r3, [r1, r3]
 8002176:	fa22 f303 	lsr.w	r3, r2, r3
 800217a:	4a09      	ldr	r2, [pc, #36]	@ (80021a0 <HAL_RCC_ClockConfig+0x1c4>)
 800217c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800217e:	4b09      	ldr	r3, [pc, #36]	@ (80021a4 <HAL_RCC_ClockConfig+0x1c8>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	4618      	mov	r0, r3
 8002184:	f7ff f920 	bl	80013c8 <HAL_InitTick>

  return HAL_OK;
 8002188:	2300      	movs	r3, #0
}
 800218a:	4618      	mov	r0, r3
 800218c:	3710      	adds	r7, #16
 800218e:	46bd      	mov	sp, r7
 8002190:	bd80      	pop	{r7, pc}
 8002192:	bf00      	nop
 8002194:	40023c00 	.word	0x40023c00
 8002198:	40023800 	.word	0x40023800
 800219c:	0800539c 	.word	0x0800539c
 80021a0:	20000004 	.word	0x20000004
 80021a4:	20000008 	.word	0x20000008

080021a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80021ac:	b094      	sub	sp, #80	@ 0x50
 80021ae:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80021b0:	2300      	movs	r3, #0
 80021b2:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80021b4:	2300      	movs	r3, #0
 80021b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80021b8:	2300      	movs	r3, #0
 80021ba:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80021bc:	2300      	movs	r3, #0
 80021be:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80021c0:	4b79      	ldr	r3, [pc, #484]	@ (80023a8 <HAL_RCC_GetSysClockFreq+0x200>)
 80021c2:	689b      	ldr	r3, [r3, #8]
 80021c4:	f003 030c 	and.w	r3, r3, #12
 80021c8:	2b08      	cmp	r3, #8
 80021ca:	d00d      	beq.n	80021e8 <HAL_RCC_GetSysClockFreq+0x40>
 80021cc:	2b08      	cmp	r3, #8
 80021ce:	f200 80e1 	bhi.w	8002394 <HAL_RCC_GetSysClockFreq+0x1ec>
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d002      	beq.n	80021dc <HAL_RCC_GetSysClockFreq+0x34>
 80021d6:	2b04      	cmp	r3, #4
 80021d8:	d003      	beq.n	80021e2 <HAL_RCC_GetSysClockFreq+0x3a>
 80021da:	e0db      	b.n	8002394 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80021dc:	4b73      	ldr	r3, [pc, #460]	@ (80023ac <HAL_RCC_GetSysClockFreq+0x204>)
 80021de:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80021e0:	e0db      	b.n	800239a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80021e2:	4b73      	ldr	r3, [pc, #460]	@ (80023b0 <HAL_RCC_GetSysClockFreq+0x208>)
 80021e4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80021e6:	e0d8      	b.n	800239a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80021e8:	4b6f      	ldr	r3, [pc, #444]	@ (80023a8 <HAL_RCC_GetSysClockFreq+0x200>)
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80021f0:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80021f2:	4b6d      	ldr	r3, [pc, #436]	@ (80023a8 <HAL_RCC_GetSysClockFreq+0x200>)
 80021f4:	685b      	ldr	r3, [r3, #4]
 80021f6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d063      	beq.n	80022c6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80021fe:	4b6a      	ldr	r3, [pc, #424]	@ (80023a8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002200:	685b      	ldr	r3, [r3, #4]
 8002202:	099b      	lsrs	r3, r3, #6
 8002204:	2200      	movs	r2, #0
 8002206:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002208:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800220a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800220c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002210:	633b      	str	r3, [r7, #48]	@ 0x30
 8002212:	2300      	movs	r3, #0
 8002214:	637b      	str	r3, [r7, #52]	@ 0x34
 8002216:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800221a:	4622      	mov	r2, r4
 800221c:	462b      	mov	r3, r5
 800221e:	f04f 0000 	mov.w	r0, #0
 8002222:	f04f 0100 	mov.w	r1, #0
 8002226:	0159      	lsls	r1, r3, #5
 8002228:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800222c:	0150      	lsls	r0, r2, #5
 800222e:	4602      	mov	r2, r0
 8002230:	460b      	mov	r3, r1
 8002232:	4621      	mov	r1, r4
 8002234:	1a51      	subs	r1, r2, r1
 8002236:	6139      	str	r1, [r7, #16]
 8002238:	4629      	mov	r1, r5
 800223a:	eb63 0301 	sbc.w	r3, r3, r1
 800223e:	617b      	str	r3, [r7, #20]
 8002240:	f04f 0200 	mov.w	r2, #0
 8002244:	f04f 0300 	mov.w	r3, #0
 8002248:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800224c:	4659      	mov	r1, fp
 800224e:	018b      	lsls	r3, r1, #6
 8002250:	4651      	mov	r1, sl
 8002252:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002256:	4651      	mov	r1, sl
 8002258:	018a      	lsls	r2, r1, #6
 800225a:	4651      	mov	r1, sl
 800225c:	ebb2 0801 	subs.w	r8, r2, r1
 8002260:	4659      	mov	r1, fp
 8002262:	eb63 0901 	sbc.w	r9, r3, r1
 8002266:	f04f 0200 	mov.w	r2, #0
 800226a:	f04f 0300 	mov.w	r3, #0
 800226e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002272:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002276:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800227a:	4690      	mov	r8, r2
 800227c:	4699      	mov	r9, r3
 800227e:	4623      	mov	r3, r4
 8002280:	eb18 0303 	adds.w	r3, r8, r3
 8002284:	60bb      	str	r3, [r7, #8]
 8002286:	462b      	mov	r3, r5
 8002288:	eb49 0303 	adc.w	r3, r9, r3
 800228c:	60fb      	str	r3, [r7, #12]
 800228e:	f04f 0200 	mov.w	r2, #0
 8002292:	f04f 0300 	mov.w	r3, #0
 8002296:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800229a:	4629      	mov	r1, r5
 800229c:	024b      	lsls	r3, r1, #9
 800229e:	4621      	mov	r1, r4
 80022a0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80022a4:	4621      	mov	r1, r4
 80022a6:	024a      	lsls	r2, r1, #9
 80022a8:	4610      	mov	r0, r2
 80022aa:	4619      	mov	r1, r3
 80022ac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80022ae:	2200      	movs	r2, #0
 80022b0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80022b2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80022b4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80022b8:	f7fd ffea 	bl	8000290 <__aeabi_uldivmod>
 80022bc:	4602      	mov	r2, r0
 80022be:	460b      	mov	r3, r1
 80022c0:	4613      	mov	r3, r2
 80022c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80022c4:	e058      	b.n	8002378 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80022c6:	4b38      	ldr	r3, [pc, #224]	@ (80023a8 <HAL_RCC_GetSysClockFreq+0x200>)
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	099b      	lsrs	r3, r3, #6
 80022cc:	2200      	movs	r2, #0
 80022ce:	4618      	mov	r0, r3
 80022d0:	4611      	mov	r1, r2
 80022d2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80022d6:	623b      	str	r3, [r7, #32]
 80022d8:	2300      	movs	r3, #0
 80022da:	627b      	str	r3, [r7, #36]	@ 0x24
 80022dc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80022e0:	4642      	mov	r2, r8
 80022e2:	464b      	mov	r3, r9
 80022e4:	f04f 0000 	mov.w	r0, #0
 80022e8:	f04f 0100 	mov.w	r1, #0
 80022ec:	0159      	lsls	r1, r3, #5
 80022ee:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80022f2:	0150      	lsls	r0, r2, #5
 80022f4:	4602      	mov	r2, r0
 80022f6:	460b      	mov	r3, r1
 80022f8:	4641      	mov	r1, r8
 80022fa:	ebb2 0a01 	subs.w	sl, r2, r1
 80022fe:	4649      	mov	r1, r9
 8002300:	eb63 0b01 	sbc.w	fp, r3, r1
 8002304:	f04f 0200 	mov.w	r2, #0
 8002308:	f04f 0300 	mov.w	r3, #0
 800230c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002310:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002314:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002318:	ebb2 040a 	subs.w	r4, r2, sl
 800231c:	eb63 050b 	sbc.w	r5, r3, fp
 8002320:	f04f 0200 	mov.w	r2, #0
 8002324:	f04f 0300 	mov.w	r3, #0
 8002328:	00eb      	lsls	r3, r5, #3
 800232a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800232e:	00e2      	lsls	r2, r4, #3
 8002330:	4614      	mov	r4, r2
 8002332:	461d      	mov	r5, r3
 8002334:	4643      	mov	r3, r8
 8002336:	18e3      	adds	r3, r4, r3
 8002338:	603b      	str	r3, [r7, #0]
 800233a:	464b      	mov	r3, r9
 800233c:	eb45 0303 	adc.w	r3, r5, r3
 8002340:	607b      	str	r3, [r7, #4]
 8002342:	f04f 0200 	mov.w	r2, #0
 8002346:	f04f 0300 	mov.w	r3, #0
 800234a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800234e:	4629      	mov	r1, r5
 8002350:	028b      	lsls	r3, r1, #10
 8002352:	4621      	mov	r1, r4
 8002354:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002358:	4621      	mov	r1, r4
 800235a:	028a      	lsls	r2, r1, #10
 800235c:	4610      	mov	r0, r2
 800235e:	4619      	mov	r1, r3
 8002360:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002362:	2200      	movs	r2, #0
 8002364:	61bb      	str	r3, [r7, #24]
 8002366:	61fa      	str	r2, [r7, #28]
 8002368:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800236c:	f7fd ff90 	bl	8000290 <__aeabi_uldivmod>
 8002370:	4602      	mov	r2, r0
 8002372:	460b      	mov	r3, r1
 8002374:	4613      	mov	r3, r2
 8002376:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002378:	4b0b      	ldr	r3, [pc, #44]	@ (80023a8 <HAL_RCC_GetSysClockFreq+0x200>)
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	0c1b      	lsrs	r3, r3, #16
 800237e:	f003 0303 	and.w	r3, r3, #3
 8002382:	3301      	adds	r3, #1
 8002384:	005b      	lsls	r3, r3, #1
 8002386:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8002388:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800238a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800238c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002390:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002392:	e002      	b.n	800239a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002394:	4b05      	ldr	r3, [pc, #20]	@ (80023ac <HAL_RCC_GetSysClockFreq+0x204>)
 8002396:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002398:	bf00      	nop
    }
  }
  return sysclockfreq;
 800239a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800239c:	4618      	mov	r0, r3
 800239e:	3750      	adds	r7, #80	@ 0x50
 80023a0:	46bd      	mov	sp, r7
 80023a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80023a6:	bf00      	nop
 80023a8:	40023800 	.word	0x40023800
 80023ac:	00f42400 	.word	0x00f42400
 80023b0:	007a1200 	.word	0x007a1200

080023b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80023b4:	b480      	push	{r7}
 80023b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80023b8:	4b03      	ldr	r3, [pc, #12]	@ (80023c8 <HAL_RCC_GetHCLKFreq+0x14>)
 80023ba:	681b      	ldr	r3, [r3, #0]
}
 80023bc:	4618      	mov	r0, r3
 80023be:	46bd      	mov	sp, r7
 80023c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c4:	4770      	bx	lr
 80023c6:	bf00      	nop
 80023c8:	20000004 	.word	0x20000004

080023cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80023d0:	f7ff fff0 	bl	80023b4 <HAL_RCC_GetHCLKFreq>
 80023d4:	4602      	mov	r2, r0
 80023d6:	4b05      	ldr	r3, [pc, #20]	@ (80023ec <HAL_RCC_GetPCLK1Freq+0x20>)
 80023d8:	689b      	ldr	r3, [r3, #8]
 80023da:	0a9b      	lsrs	r3, r3, #10
 80023dc:	f003 0307 	and.w	r3, r3, #7
 80023e0:	4903      	ldr	r1, [pc, #12]	@ (80023f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80023e2:	5ccb      	ldrb	r3, [r1, r3]
 80023e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80023e8:	4618      	mov	r0, r3
 80023ea:	bd80      	pop	{r7, pc}
 80023ec:	40023800 	.word	0x40023800
 80023f0:	080053ac 	.word	0x080053ac

080023f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80023f8:	f7ff ffdc 	bl	80023b4 <HAL_RCC_GetHCLKFreq>
 80023fc:	4602      	mov	r2, r0
 80023fe:	4b05      	ldr	r3, [pc, #20]	@ (8002414 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002400:	689b      	ldr	r3, [r3, #8]
 8002402:	0b5b      	lsrs	r3, r3, #13
 8002404:	f003 0307 	and.w	r3, r3, #7
 8002408:	4903      	ldr	r1, [pc, #12]	@ (8002418 <HAL_RCC_GetPCLK2Freq+0x24>)
 800240a:	5ccb      	ldrb	r3, [r1, r3]
 800240c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002410:	4618      	mov	r0, r3
 8002412:	bd80      	pop	{r7, pc}
 8002414:	40023800 	.word	0x40023800
 8002418:	080053ac 	.word	0x080053ac

0800241c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800241c:	b480      	push	{r7}
 800241e:	b085      	sub	sp, #20
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800242a:	b2db      	uxtb	r3, r3
 800242c:	2b01      	cmp	r3, #1
 800242e:	d001      	beq.n	8002434 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002430:	2301      	movs	r3, #1
 8002432:	e044      	b.n	80024be <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2202      	movs	r2, #2
 8002438:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	68da      	ldr	r2, [r3, #12]
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f042 0201 	orr.w	r2, r2, #1
 800244a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	4a1e      	ldr	r2, [pc, #120]	@ (80024cc <HAL_TIM_Base_Start_IT+0xb0>)
 8002452:	4293      	cmp	r3, r2
 8002454:	d018      	beq.n	8002488 <HAL_TIM_Base_Start_IT+0x6c>
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800245e:	d013      	beq.n	8002488 <HAL_TIM_Base_Start_IT+0x6c>
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	4a1a      	ldr	r2, [pc, #104]	@ (80024d0 <HAL_TIM_Base_Start_IT+0xb4>)
 8002466:	4293      	cmp	r3, r2
 8002468:	d00e      	beq.n	8002488 <HAL_TIM_Base_Start_IT+0x6c>
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	4a19      	ldr	r2, [pc, #100]	@ (80024d4 <HAL_TIM_Base_Start_IT+0xb8>)
 8002470:	4293      	cmp	r3, r2
 8002472:	d009      	beq.n	8002488 <HAL_TIM_Base_Start_IT+0x6c>
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	4a17      	ldr	r2, [pc, #92]	@ (80024d8 <HAL_TIM_Base_Start_IT+0xbc>)
 800247a:	4293      	cmp	r3, r2
 800247c:	d004      	beq.n	8002488 <HAL_TIM_Base_Start_IT+0x6c>
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	4a16      	ldr	r2, [pc, #88]	@ (80024dc <HAL_TIM_Base_Start_IT+0xc0>)
 8002484:	4293      	cmp	r3, r2
 8002486:	d111      	bne.n	80024ac <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	689b      	ldr	r3, [r3, #8]
 800248e:	f003 0307 	and.w	r3, r3, #7
 8002492:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	2b06      	cmp	r3, #6
 8002498:	d010      	beq.n	80024bc <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	681a      	ldr	r2, [r3, #0]
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f042 0201 	orr.w	r2, r2, #1
 80024a8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80024aa:	e007      	b.n	80024bc <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	681a      	ldr	r2, [r3, #0]
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f042 0201 	orr.w	r2, r2, #1
 80024ba:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80024bc:	2300      	movs	r3, #0
}
 80024be:	4618      	mov	r0, r3
 80024c0:	3714      	adds	r7, #20
 80024c2:	46bd      	mov	sp, r7
 80024c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c8:	4770      	bx	lr
 80024ca:	bf00      	nop
 80024cc:	40010000 	.word	0x40010000
 80024d0:	40000400 	.word	0x40000400
 80024d4:	40000800 	.word	0x40000800
 80024d8:	40000c00 	.word	0x40000c00
 80024dc:	40014000 	.word	0x40014000

080024e0 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b082      	sub	sp, #8
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d101      	bne.n	80024f2 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80024ee:	2301      	movs	r3, #1
 80024f0:	e041      	b.n	8002576 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80024f8:	b2db      	uxtb	r3, r3
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d106      	bne.n	800250c <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	2200      	movs	r2, #0
 8002502:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8002506:	6878      	ldr	r0, [r7, #4]
 8002508:	f7fe fd3c 	bl	8000f84 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2202      	movs	r2, #2
 8002510:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681a      	ldr	r2, [r3, #0]
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	3304      	adds	r3, #4
 800251c:	4619      	mov	r1, r3
 800251e:	4610      	mov	r0, r2
 8002520:	f000 fb62 	bl	8002be8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2201      	movs	r2, #1
 8002528:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2201      	movs	r2, #1
 8002530:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2201      	movs	r2, #1
 8002538:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2201      	movs	r2, #1
 8002540:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2201      	movs	r2, #1
 8002548:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2201      	movs	r2, #1
 8002550:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2201      	movs	r2, #1
 8002558:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2201      	movs	r2, #1
 8002560:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2201      	movs	r2, #1
 8002568:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2201      	movs	r2, #1
 8002570:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002574:	2300      	movs	r3, #0
}
 8002576:	4618      	mov	r0, r3
 8002578:	3708      	adds	r7, #8
 800257a:	46bd      	mov	sp, r7
 800257c:	bd80      	pop	{r7, pc}

0800257e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800257e:	b580      	push	{r7, lr}
 8002580:	b082      	sub	sp, #8
 8002582:	af00      	add	r7, sp, #0
 8002584:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	2b00      	cmp	r3, #0
 800258a:	d101      	bne.n	8002590 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800258c:	2301      	movs	r3, #1
 800258e:	e041      	b.n	8002614 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002596:	b2db      	uxtb	r3, r3
 8002598:	2b00      	cmp	r3, #0
 800259a:	d106      	bne.n	80025aa <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2200      	movs	r2, #0
 80025a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80025a4:	6878      	ldr	r0, [r7, #4]
 80025a6:	f7fe fcc7 	bl	8000f38 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	2202      	movs	r2, #2
 80025ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681a      	ldr	r2, [r3, #0]
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	3304      	adds	r3, #4
 80025ba:	4619      	mov	r1, r3
 80025bc:	4610      	mov	r0, r2
 80025be:	f000 fb13 	bl	8002be8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	2201      	movs	r2, #1
 80025c6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2201      	movs	r2, #1
 80025ce:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	2201      	movs	r2, #1
 80025d6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	2201      	movs	r2, #1
 80025de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	2201      	movs	r2, #1
 80025e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	2201      	movs	r2, #1
 80025ee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	2201      	movs	r2, #1
 80025f6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	2201      	movs	r2, #1
 80025fe:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	2201      	movs	r2, #1
 8002606:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	2201      	movs	r2, #1
 800260e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002612:	2300      	movs	r3, #0
}
 8002614:	4618      	mov	r0, r3
 8002616:	3708      	adds	r7, #8
 8002618:	46bd      	mov	sp, r7
 800261a:	bd80      	pop	{r7, pc}

0800261c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b084      	sub	sp, #16
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
 8002624:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	2b00      	cmp	r3, #0
 800262a:	d109      	bne.n	8002640 <HAL_TIM_PWM_Start+0x24>
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002632:	b2db      	uxtb	r3, r3
 8002634:	2b01      	cmp	r3, #1
 8002636:	bf14      	ite	ne
 8002638:	2301      	movne	r3, #1
 800263a:	2300      	moveq	r3, #0
 800263c:	b2db      	uxtb	r3, r3
 800263e:	e022      	b.n	8002686 <HAL_TIM_PWM_Start+0x6a>
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	2b04      	cmp	r3, #4
 8002644:	d109      	bne.n	800265a <HAL_TIM_PWM_Start+0x3e>
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800264c:	b2db      	uxtb	r3, r3
 800264e:	2b01      	cmp	r3, #1
 8002650:	bf14      	ite	ne
 8002652:	2301      	movne	r3, #1
 8002654:	2300      	moveq	r3, #0
 8002656:	b2db      	uxtb	r3, r3
 8002658:	e015      	b.n	8002686 <HAL_TIM_PWM_Start+0x6a>
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	2b08      	cmp	r3, #8
 800265e:	d109      	bne.n	8002674 <HAL_TIM_PWM_Start+0x58>
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002666:	b2db      	uxtb	r3, r3
 8002668:	2b01      	cmp	r3, #1
 800266a:	bf14      	ite	ne
 800266c:	2301      	movne	r3, #1
 800266e:	2300      	moveq	r3, #0
 8002670:	b2db      	uxtb	r3, r3
 8002672:	e008      	b.n	8002686 <HAL_TIM_PWM_Start+0x6a>
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800267a:	b2db      	uxtb	r3, r3
 800267c:	2b01      	cmp	r3, #1
 800267e:	bf14      	ite	ne
 8002680:	2301      	movne	r3, #1
 8002682:	2300      	moveq	r3, #0
 8002684:	b2db      	uxtb	r3, r3
 8002686:	2b00      	cmp	r3, #0
 8002688:	d001      	beq.n	800268e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800268a:	2301      	movs	r3, #1
 800268c:	e068      	b.n	8002760 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	2b00      	cmp	r3, #0
 8002692:	d104      	bne.n	800269e <HAL_TIM_PWM_Start+0x82>
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2202      	movs	r2, #2
 8002698:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800269c:	e013      	b.n	80026c6 <HAL_TIM_PWM_Start+0xaa>
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	2b04      	cmp	r3, #4
 80026a2:	d104      	bne.n	80026ae <HAL_TIM_PWM_Start+0x92>
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2202      	movs	r2, #2
 80026a8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80026ac:	e00b      	b.n	80026c6 <HAL_TIM_PWM_Start+0xaa>
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	2b08      	cmp	r3, #8
 80026b2:	d104      	bne.n	80026be <HAL_TIM_PWM_Start+0xa2>
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2202      	movs	r2, #2
 80026b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80026bc:	e003      	b.n	80026c6 <HAL_TIM_PWM_Start+0xaa>
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	2202      	movs	r2, #2
 80026c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	2201      	movs	r2, #1
 80026cc:	6839      	ldr	r1, [r7, #0]
 80026ce:	4618      	mov	r0, r3
 80026d0:	f000 fc9c 	bl	800300c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4a23      	ldr	r2, [pc, #140]	@ (8002768 <HAL_TIM_PWM_Start+0x14c>)
 80026da:	4293      	cmp	r3, r2
 80026dc:	d107      	bne.n	80026ee <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80026ec:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	4a1d      	ldr	r2, [pc, #116]	@ (8002768 <HAL_TIM_PWM_Start+0x14c>)
 80026f4:	4293      	cmp	r3, r2
 80026f6:	d018      	beq.n	800272a <HAL_TIM_PWM_Start+0x10e>
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002700:	d013      	beq.n	800272a <HAL_TIM_PWM_Start+0x10e>
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	4a19      	ldr	r2, [pc, #100]	@ (800276c <HAL_TIM_PWM_Start+0x150>)
 8002708:	4293      	cmp	r3, r2
 800270a:	d00e      	beq.n	800272a <HAL_TIM_PWM_Start+0x10e>
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	4a17      	ldr	r2, [pc, #92]	@ (8002770 <HAL_TIM_PWM_Start+0x154>)
 8002712:	4293      	cmp	r3, r2
 8002714:	d009      	beq.n	800272a <HAL_TIM_PWM_Start+0x10e>
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4a16      	ldr	r2, [pc, #88]	@ (8002774 <HAL_TIM_PWM_Start+0x158>)
 800271c:	4293      	cmp	r3, r2
 800271e:	d004      	beq.n	800272a <HAL_TIM_PWM_Start+0x10e>
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	4a14      	ldr	r2, [pc, #80]	@ (8002778 <HAL_TIM_PWM_Start+0x15c>)
 8002726:	4293      	cmp	r3, r2
 8002728:	d111      	bne.n	800274e <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	689b      	ldr	r3, [r3, #8]
 8002730:	f003 0307 	and.w	r3, r3, #7
 8002734:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	2b06      	cmp	r3, #6
 800273a:	d010      	beq.n	800275e <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	681a      	ldr	r2, [r3, #0]
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f042 0201 	orr.w	r2, r2, #1
 800274a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800274c:	e007      	b.n	800275e <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	681a      	ldr	r2, [r3, #0]
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f042 0201 	orr.w	r2, r2, #1
 800275c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800275e:	2300      	movs	r3, #0
}
 8002760:	4618      	mov	r0, r3
 8002762:	3710      	adds	r7, #16
 8002764:	46bd      	mov	sp, r7
 8002766:	bd80      	pop	{r7, pc}
 8002768:	40010000 	.word	0x40010000
 800276c:	40000400 	.word	0x40000400
 8002770:	40000800 	.word	0x40000800
 8002774:	40000c00 	.word	0x40000c00
 8002778:	40014000 	.word	0x40014000

0800277c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	b084      	sub	sp, #16
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	68db      	ldr	r3, [r3, #12]
 800278a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	691b      	ldr	r3, [r3, #16]
 8002792:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002794:	68bb      	ldr	r3, [r7, #8]
 8002796:	f003 0302 	and.w	r3, r3, #2
 800279a:	2b00      	cmp	r3, #0
 800279c:	d020      	beq.n	80027e0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	f003 0302 	and.w	r3, r3, #2
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d01b      	beq.n	80027e0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f06f 0202 	mvn.w	r2, #2
 80027b0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	2201      	movs	r2, #1
 80027b6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	699b      	ldr	r3, [r3, #24]
 80027be:	f003 0303 	and.w	r3, r3, #3
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d003      	beq.n	80027ce <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80027c6:	6878      	ldr	r0, [r7, #4]
 80027c8:	f000 f9f0 	bl	8002bac <HAL_TIM_IC_CaptureCallback>
 80027cc:	e005      	b.n	80027da <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80027ce:	6878      	ldr	r0, [r7, #4]
 80027d0:	f000 f9e2 	bl	8002b98 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027d4:	6878      	ldr	r0, [r7, #4]
 80027d6:	f000 f9f3 	bl	8002bc0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	2200      	movs	r2, #0
 80027de:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80027e0:	68bb      	ldr	r3, [r7, #8]
 80027e2:	f003 0304 	and.w	r3, r3, #4
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d020      	beq.n	800282c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	f003 0304 	and.w	r3, r3, #4
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d01b      	beq.n	800282c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f06f 0204 	mvn.w	r2, #4
 80027fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	2202      	movs	r2, #2
 8002802:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	699b      	ldr	r3, [r3, #24]
 800280a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800280e:	2b00      	cmp	r3, #0
 8002810:	d003      	beq.n	800281a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002812:	6878      	ldr	r0, [r7, #4]
 8002814:	f000 f9ca 	bl	8002bac <HAL_TIM_IC_CaptureCallback>
 8002818:	e005      	b.n	8002826 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800281a:	6878      	ldr	r0, [r7, #4]
 800281c:	f000 f9bc 	bl	8002b98 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002820:	6878      	ldr	r0, [r7, #4]
 8002822:	f000 f9cd 	bl	8002bc0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	2200      	movs	r2, #0
 800282a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800282c:	68bb      	ldr	r3, [r7, #8]
 800282e:	f003 0308 	and.w	r3, r3, #8
 8002832:	2b00      	cmp	r3, #0
 8002834:	d020      	beq.n	8002878 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	f003 0308 	and.w	r3, r3, #8
 800283c:	2b00      	cmp	r3, #0
 800283e:	d01b      	beq.n	8002878 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f06f 0208 	mvn.w	r2, #8
 8002848:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	2204      	movs	r2, #4
 800284e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	69db      	ldr	r3, [r3, #28]
 8002856:	f003 0303 	and.w	r3, r3, #3
 800285a:	2b00      	cmp	r3, #0
 800285c:	d003      	beq.n	8002866 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800285e:	6878      	ldr	r0, [r7, #4]
 8002860:	f000 f9a4 	bl	8002bac <HAL_TIM_IC_CaptureCallback>
 8002864:	e005      	b.n	8002872 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002866:	6878      	ldr	r0, [r7, #4]
 8002868:	f000 f996 	bl	8002b98 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800286c:	6878      	ldr	r0, [r7, #4]
 800286e:	f000 f9a7 	bl	8002bc0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	2200      	movs	r2, #0
 8002876:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002878:	68bb      	ldr	r3, [r7, #8]
 800287a:	f003 0310 	and.w	r3, r3, #16
 800287e:	2b00      	cmp	r3, #0
 8002880:	d020      	beq.n	80028c4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	f003 0310 	and.w	r3, r3, #16
 8002888:	2b00      	cmp	r3, #0
 800288a:	d01b      	beq.n	80028c4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f06f 0210 	mvn.w	r2, #16
 8002894:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	2208      	movs	r2, #8
 800289a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	69db      	ldr	r3, [r3, #28]
 80028a2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d003      	beq.n	80028b2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80028aa:	6878      	ldr	r0, [r7, #4]
 80028ac:	f000 f97e 	bl	8002bac <HAL_TIM_IC_CaptureCallback>
 80028b0:	e005      	b.n	80028be <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80028b2:	6878      	ldr	r0, [r7, #4]
 80028b4:	f000 f970 	bl	8002b98 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028b8:	6878      	ldr	r0, [r7, #4]
 80028ba:	f000 f981 	bl	8002bc0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	2200      	movs	r2, #0
 80028c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80028c4:	68bb      	ldr	r3, [r7, #8]
 80028c6:	f003 0301 	and.w	r3, r3, #1
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d00c      	beq.n	80028e8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	f003 0301 	and.w	r3, r3, #1
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d007      	beq.n	80028e8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f06f 0201 	mvn.w	r2, #1
 80028e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80028e2:	6878      	ldr	r0, [r7, #4]
 80028e4:	f7fe f880 	bl	80009e8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80028e8:	68bb      	ldr	r3, [r7, #8]
 80028ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d00c      	beq.n	800290c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d007      	beq.n	800290c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002904:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002906:	6878      	ldr	r0, [r7, #4]
 8002908:	f000 fc1e 	bl	8003148 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800290c:	68bb      	ldr	r3, [r7, #8]
 800290e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002912:	2b00      	cmp	r3, #0
 8002914:	d00c      	beq.n	8002930 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800291c:	2b00      	cmp	r3, #0
 800291e:	d007      	beq.n	8002930 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002928:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800292a:	6878      	ldr	r0, [r7, #4]
 800292c:	f000 f952 	bl	8002bd4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002930:	68bb      	ldr	r3, [r7, #8]
 8002932:	f003 0320 	and.w	r3, r3, #32
 8002936:	2b00      	cmp	r3, #0
 8002938:	d00c      	beq.n	8002954 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	f003 0320 	and.w	r3, r3, #32
 8002940:	2b00      	cmp	r3, #0
 8002942:	d007      	beq.n	8002954 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f06f 0220 	mvn.w	r2, #32
 800294c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800294e:	6878      	ldr	r0, [r7, #4]
 8002950:	f000 fbf0 	bl	8003134 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002954:	bf00      	nop
 8002956:	3710      	adds	r7, #16
 8002958:	46bd      	mov	sp, r7
 800295a:	bd80      	pop	{r7, pc}

0800295c <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b086      	sub	sp, #24
 8002960:	af00      	add	r7, sp, #0
 8002962:	60f8      	str	r0, [r7, #12]
 8002964:	60b9      	str	r1, [r7, #8]
 8002966:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002968:	2300      	movs	r3, #0
 800296a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002972:	2b01      	cmp	r3, #1
 8002974:	d101      	bne.n	800297a <HAL_TIM_OC_ConfigChannel+0x1e>
 8002976:	2302      	movs	r3, #2
 8002978:	e048      	b.n	8002a0c <HAL_TIM_OC_ConfigChannel+0xb0>
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	2201      	movs	r2, #1
 800297e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	2b0c      	cmp	r3, #12
 8002986:	d839      	bhi.n	80029fc <HAL_TIM_OC_ConfigChannel+0xa0>
 8002988:	a201      	add	r2, pc, #4	@ (adr r2, 8002990 <HAL_TIM_OC_ConfigChannel+0x34>)
 800298a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800298e:	bf00      	nop
 8002990:	080029c5 	.word	0x080029c5
 8002994:	080029fd 	.word	0x080029fd
 8002998:	080029fd 	.word	0x080029fd
 800299c:	080029fd 	.word	0x080029fd
 80029a0:	080029d3 	.word	0x080029d3
 80029a4:	080029fd 	.word	0x080029fd
 80029a8:	080029fd 	.word	0x080029fd
 80029ac:	080029fd 	.word	0x080029fd
 80029b0:	080029e1 	.word	0x080029e1
 80029b4:	080029fd 	.word	0x080029fd
 80029b8:	080029fd 	.word	0x080029fd
 80029bc:	080029fd 	.word	0x080029fd
 80029c0:	080029ef 	.word	0x080029ef
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	68b9      	ldr	r1, [r7, #8]
 80029ca:	4618      	mov	r0, r3
 80029cc:	f000 f992 	bl	8002cf4 <TIM_OC1_SetConfig>
      break;
 80029d0:	e017      	b.n	8002a02 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	68b9      	ldr	r1, [r7, #8]
 80029d8:	4618      	mov	r0, r3
 80029da:	f000 f9f1 	bl	8002dc0 <TIM_OC2_SetConfig>
      break;
 80029de:	e010      	b.n	8002a02 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	68b9      	ldr	r1, [r7, #8]
 80029e6:	4618      	mov	r0, r3
 80029e8:	f000 fa56 	bl	8002e98 <TIM_OC3_SetConfig>
      break;
 80029ec:	e009      	b.n	8002a02 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	68b9      	ldr	r1, [r7, #8]
 80029f4:	4618      	mov	r0, r3
 80029f6:	f000 fab9 	bl	8002f6c <TIM_OC4_SetConfig>
      break;
 80029fa:	e002      	b.n	8002a02 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 80029fc:	2301      	movs	r3, #1
 80029fe:	75fb      	strb	r3, [r7, #23]
      break;
 8002a00:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	2200      	movs	r2, #0
 8002a06:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002a0a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	3718      	adds	r7, #24
 8002a10:	46bd      	mov	sp, r7
 8002a12:	bd80      	pop	{r7, pc}

08002a14 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b086      	sub	sp, #24
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	60f8      	str	r0, [r7, #12]
 8002a1c:	60b9      	str	r1, [r7, #8]
 8002a1e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a20:	2300      	movs	r3, #0
 8002a22:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002a2a:	2b01      	cmp	r3, #1
 8002a2c:	d101      	bne.n	8002a32 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002a2e:	2302      	movs	r3, #2
 8002a30:	e0ae      	b.n	8002b90 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	2201      	movs	r2, #1
 8002a36:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	2b0c      	cmp	r3, #12
 8002a3e:	f200 809f 	bhi.w	8002b80 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002a42:	a201      	add	r2, pc, #4	@ (adr r2, 8002a48 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002a44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a48:	08002a7d 	.word	0x08002a7d
 8002a4c:	08002b81 	.word	0x08002b81
 8002a50:	08002b81 	.word	0x08002b81
 8002a54:	08002b81 	.word	0x08002b81
 8002a58:	08002abd 	.word	0x08002abd
 8002a5c:	08002b81 	.word	0x08002b81
 8002a60:	08002b81 	.word	0x08002b81
 8002a64:	08002b81 	.word	0x08002b81
 8002a68:	08002aff 	.word	0x08002aff
 8002a6c:	08002b81 	.word	0x08002b81
 8002a70:	08002b81 	.word	0x08002b81
 8002a74:	08002b81 	.word	0x08002b81
 8002a78:	08002b3f 	.word	0x08002b3f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	68b9      	ldr	r1, [r7, #8]
 8002a82:	4618      	mov	r0, r3
 8002a84:	f000 f936 	bl	8002cf4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	699a      	ldr	r2, [r3, #24]
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f042 0208 	orr.w	r2, r2, #8
 8002a96:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	699a      	ldr	r2, [r3, #24]
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f022 0204 	bic.w	r2, r2, #4
 8002aa6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	6999      	ldr	r1, [r3, #24]
 8002aae:	68bb      	ldr	r3, [r7, #8]
 8002ab0:	691a      	ldr	r2, [r3, #16]
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	430a      	orrs	r2, r1
 8002ab8:	619a      	str	r2, [r3, #24]
      break;
 8002aba:	e064      	b.n	8002b86 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	68b9      	ldr	r1, [r7, #8]
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	f000 f97c 	bl	8002dc0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	699a      	ldr	r2, [r3, #24]
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002ad6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	699a      	ldr	r2, [r3, #24]
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002ae6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	6999      	ldr	r1, [r3, #24]
 8002aee:	68bb      	ldr	r3, [r7, #8]
 8002af0:	691b      	ldr	r3, [r3, #16]
 8002af2:	021a      	lsls	r2, r3, #8
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	430a      	orrs	r2, r1
 8002afa:	619a      	str	r2, [r3, #24]
      break;
 8002afc:	e043      	b.n	8002b86 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	68b9      	ldr	r1, [r7, #8]
 8002b04:	4618      	mov	r0, r3
 8002b06:	f000 f9c7 	bl	8002e98 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	69da      	ldr	r2, [r3, #28]
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f042 0208 	orr.w	r2, r2, #8
 8002b18:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	69da      	ldr	r2, [r3, #28]
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f022 0204 	bic.w	r2, r2, #4
 8002b28:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	69d9      	ldr	r1, [r3, #28]
 8002b30:	68bb      	ldr	r3, [r7, #8]
 8002b32:	691a      	ldr	r2, [r3, #16]
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	430a      	orrs	r2, r1
 8002b3a:	61da      	str	r2, [r3, #28]
      break;
 8002b3c:	e023      	b.n	8002b86 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	68b9      	ldr	r1, [r7, #8]
 8002b44:	4618      	mov	r0, r3
 8002b46:	f000 fa11 	bl	8002f6c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	69da      	ldr	r2, [r3, #28]
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002b58:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	69da      	ldr	r2, [r3, #28]
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002b68:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	69d9      	ldr	r1, [r3, #28]
 8002b70:	68bb      	ldr	r3, [r7, #8]
 8002b72:	691b      	ldr	r3, [r3, #16]
 8002b74:	021a      	lsls	r2, r3, #8
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	430a      	orrs	r2, r1
 8002b7c:	61da      	str	r2, [r3, #28]
      break;
 8002b7e:	e002      	b.n	8002b86 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002b80:	2301      	movs	r3, #1
 8002b82:	75fb      	strb	r3, [r7, #23]
      break;
 8002b84:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	2200      	movs	r2, #0
 8002b8a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002b8e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b90:	4618      	mov	r0, r3
 8002b92:	3718      	adds	r7, #24
 8002b94:	46bd      	mov	sp, r7
 8002b96:	bd80      	pop	{r7, pc}

08002b98 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002b98:	b480      	push	{r7}
 8002b9a:	b083      	sub	sp, #12
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002ba0:	bf00      	nop
 8002ba2:	370c      	adds	r7, #12
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002baa:	4770      	bx	lr

08002bac <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002bac:	b480      	push	{r7}
 8002bae:	b083      	sub	sp, #12
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002bb4:	bf00      	nop
 8002bb6:	370c      	adds	r7, #12
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbe:	4770      	bx	lr

08002bc0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	b083      	sub	sp, #12
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002bc8:	bf00      	nop
 8002bca:	370c      	adds	r7, #12
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd2:	4770      	bx	lr

08002bd4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002bd4:	b480      	push	{r7}
 8002bd6:	b083      	sub	sp, #12
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002bdc:	bf00      	nop
 8002bde:	370c      	adds	r7, #12
 8002be0:	46bd      	mov	sp, r7
 8002be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be6:	4770      	bx	lr

08002be8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002be8:	b480      	push	{r7}
 8002bea:	b085      	sub	sp, #20
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
 8002bf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	4a37      	ldr	r2, [pc, #220]	@ (8002cd8 <TIM_Base_SetConfig+0xf0>)
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	d00f      	beq.n	8002c20 <TIM_Base_SetConfig+0x38>
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002c06:	d00b      	beq.n	8002c20 <TIM_Base_SetConfig+0x38>
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	4a34      	ldr	r2, [pc, #208]	@ (8002cdc <TIM_Base_SetConfig+0xf4>)
 8002c0c:	4293      	cmp	r3, r2
 8002c0e:	d007      	beq.n	8002c20 <TIM_Base_SetConfig+0x38>
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	4a33      	ldr	r2, [pc, #204]	@ (8002ce0 <TIM_Base_SetConfig+0xf8>)
 8002c14:	4293      	cmp	r3, r2
 8002c16:	d003      	beq.n	8002c20 <TIM_Base_SetConfig+0x38>
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	4a32      	ldr	r2, [pc, #200]	@ (8002ce4 <TIM_Base_SetConfig+0xfc>)
 8002c1c:	4293      	cmp	r3, r2
 8002c1e:	d108      	bne.n	8002c32 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002c26:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	685b      	ldr	r3, [r3, #4]
 8002c2c:	68fa      	ldr	r2, [r7, #12]
 8002c2e:	4313      	orrs	r3, r2
 8002c30:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	4a28      	ldr	r2, [pc, #160]	@ (8002cd8 <TIM_Base_SetConfig+0xf0>)
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d01b      	beq.n	8002c72 <TIM_Base_SetConfig+0x8a>
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002c40:	d017      	beq.n	8002c72 <TIM_Base_SetConfig+0x8a>
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	4a25      	ldr	r2, [pc, #148]	@ (8002cdc <TIM_Base_SetConfig+0xf4>)
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d013      	beq.n	8002c72 <TIM_Base_SetConfig+0x8a>
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	4a24      	ldr	r2, [pc, #144]	@ (8002ce0 <TIM_Base_SetConfig+0xf8>)
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d00f      	beq.n	8002c72 <TIM_Base_SetConfig+0x8a>
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	4a23      	ldr	r2, [pc, #140]	@ (8002ce4 <TIM_Base_SetConfig+0xfc>)
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d00b      	beq.n	8002c72 <TIM_Base_SetConfig+0x8a>
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	4a22      	ldr	r2, [pc, #136]	@ (8002ce8 <TIM_Base_SetConfig+0x100>)
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d007      	beq.n	8002c72 <TIM_Base_SetConfig+0x8a>
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	4a21      	ldr	r2, [pc, #132]	@ (8002cec <TIM_Base_SetConfig+0x104>)
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d003      	beq.n	8002c72 <TIM_Base_SetConfig+0x8a>
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	4a20      	ldr	r2, [pc, #128]	@ (8002cf0 <TIM_Base_SetConfig+0x108>)
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d108      	bne.n	8002c84 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002c78:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	68db      	ldr	r3, [r3, #12]
 8002c7e:	68fa      	ldr	r2, [r7, #12]
 8002c80:	4313      	orrs	r3, r2
 8002c82:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	695b      	ldr	r3, [r3, #20]
 8002c8e:	4313      	orrs	r3, r2
 8002c90:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	689a      	ldr	r2, [r3, #8]
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002c9a:	683b      	ldr	r3, [r7, #0]
 8002c9c:	681a      	ldr	r2, [r3, #0]
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	4a0c      	ldr	r2, [pc, #48]	@ (8002cd8 <TIM_Base_SetConfig+0xf0>)
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d103      	bne.n	8002cb2 <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	691a      	ldr	r2, [r3, #16]
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f043 0204 	orr.w	r2, r3, #4
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	2201      	movs	r2, #1
 8002cc2:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	68fa      	ldr	r2, [r7, #12]
 8002cc8:	601a      	str	r2, [r3, #0]
}
 8002cca:	bf00      	nop
 8002ccc:	3714      	adds	r7, #20
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd4:	4770      	bx	lr
 8002cd6:	bf00      	nop
 8002cd8:	40010000 	.word	0x40010000
 8002cdc:	40000400 	.word	0x40000400
 8002ce0:	40000800 	.word	0x40000800
 8002ce4:	40000c00 	.word	0x40000c00
 8002ce8:	40014000 	.word	0x40014000
 8002cec:	40014400 	.word	0x40014400
 8002cf0:	40014800 	.word	0x40014800

08002cf4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002cf4:	b480      	push	{r7}
 8002cf6:	b087      	sub	sp, #28
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
 8002cfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6a1b      	ldr	r3, [r3, #32]
 8002d02:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6a1b      	ldr	r3, [r3, #32]
 8002d08:	f023 0201 	bic.w	r2, r3, #1
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	685b      	ldr	r3, [r3, #4]
 8002d14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	699b      	ldr	r3, [r3, #24]
 8002d1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002d22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	f023 0303 	bic.w	r3, r3, #3
 8002d2a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	68fa      	ldr	r2, [r7, #12]
 8002d32:	4313      	orrs	r3, r2
 8002d34:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002d36:	697b      	ldr	r3, [r7, #20]
 8002d38:	f023 0302 	bic.w	r3, r3, #2
 8002d3c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	689b      	ldr	r3, [r3, #8]
 8002d42:	697a      	ldr	r2, [r7, #20]
 8002d44:	4313      	orrs	r3, r2
 8002d46:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	4a1c      	ldr	r2, [pc, #112]	@ (8002dbc <TIM_OC1_SetConfig+0xc8>)
 8002d4c:	4293      	cmp	r3, r2
 8002d4e:	d10c      	bne.n	8002d6a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002d50:	697b      	ldr	r3, [r7, #20]
 8002d52:	f023 0308 	bic.w	r3, r3, #8
 8002d56:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	68db      	ldr	r3, [r3, #12]
 8002d5c:	697a      	ldr	r2, [r7, #20]
 8002d5e:	4313      	orrs	r3, r2
 8002d60:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002d62:	697b      	ldr	r3, [r7, #20]
 8002d64:	f023 0304 	bic.w	r3, r3, #4
 8002d68:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	4a13      	ldr	r2, [pc, #76]	@ (8002dbc <TIM_OC1_SetConfig+0xc8>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d111      	bne.n	8002d96 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002d72:	693b      	ldr	r3, [r7, #16]
 8002d74:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002d78:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002d7a:	693b      	ldr	r3, [r7, #16]
 8002d7c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002d80:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	695b      	ldr	r3, [r3, #20]
 8002d86:	693a      	ldr	r2, [r7, #16]
 8002d88:	4313      	orrs	r3, r2
 8002d8a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	699b      	ldr	r3, [r3, #24]
 8002d90:	693a      	ldr	r2, [r7, #16]
 8002d92:	4313      	orrs	r3, r2
 8002d94:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	693a      	ldr	r2, [r7, #16]
 8002d9a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	68fa      	ldr	r2, [r7, #12]
 8002da0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	685a      	ldr	r2, [r3, #4]
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	697a      	ldr	r2, [r7, #20]
 8002dae:	621a      	str	r2, [r3, #32]
}
 8002db0:	bf00      	nop
 8002db2:	371c      	adds	r7, #28
 8002db4:	46bd      	mov	sp, r7
 8002db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dba:	4770      	bx	lr
 8002dbc:	40010000 	.word	0x40010000

08002dc0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	b087      	sub	sp, #28
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
 8002dc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6a1b      	ldr	r3, [r3, #32]
 8002dce:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6a1b      	ldr	r3, [r3, #32]
 8002dd4:	f023 0210 	bic.w	r2, r3, #16
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	685b      	ldr	r3, [r3, #4]
 8002de0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	699b      	ldr	r3, [r3, #24]
 8002de6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002dee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002df6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	021b      	lsls	r3, r3, #8
 8002dfe:	68fa      	ldr	r2, [r7, #12]
 8002e00:	4313      	orrs	r3, r2
 8002e02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002e04:	697b      	ldr	r3, [r7, #20]
 8002e06:	f023 0320 	bic.w	r3, r3, #32
 8002e0a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	689b      	ldr	r3, [r3, #8]
 8002e10:	011b      	lsls	r3, r3, #4
 8002e12:	697a      	ldr	r2, [r7, #20]
 8002e14:	4313      	orrs	r3, r2
 8002e16:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	4a1e      	ldr	r2, [pc, #120]	@ (8002e94 <TIM_OC2_SetConfig+0xd4>)
 8002e1c:	4293      	cmp	r3, r2
 8002e1e:	d10d      	bne.n	8002e3c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002e20:	697b      	ldr	r3, [r7, #20]
 8002e22:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002e26:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	68db      	ldr	r3, [r3, #12]
 8002e2c:	011b      	lsls	r3, r3, #4
 8002e2e:	697a      	ldr	r2, [r7, #20]
 8002e30:	4313      	orrs	r3, r2
 8002e32:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002e34:	697b      	ldr	r3, [r7, #20]
 8002e36:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002e3a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	4a15      	ldr	r2, [pc, #84]	@ (8002e94 <TIM_OC2_SetConfig+0xd4>)
 8002e40:	4293      	cmp	r3, r2
 8002e42:	d113      	bne.n	8002e6c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002e44:	693b      	ldr	r3, [r7, #16]
 8002e46:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002e4a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002e4c:	693b      	ldr	r3, [r7, #16]
 8002e4e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002e52:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	695b      	ldr	r3, [r3, #20]
 8002e58:	009b      	lsls	r3, r3, #2
 8002e5a:	693a      	ldr	r2, [r7, #16]
 8002e5c:	4313      	orrs	r3, r2
 8002e5e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	699b      	ldr	r3, [r3, #24]
 8002e64:	009b      	lsls	r3, r3, #2
 8002e66:	693a      	ldr	r2, [r7, #16]
 8002e68:	4313      	orrs	r3, r2
 8002e6a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	693a      	ldr	r2, [r7, #16]
 8002e70:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	68fa      	ldr	r2, [r7, #12]
 8002e76:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	685a      	ldr	r2, [r3, #4]
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	697a      	ldr	r2, [r7, #20]
 8002e84:	621a      	str	r2, [r3, #32]
}
 8002e86:	bf00      	nop
 8002e88:	371c      	adds	r7, #28
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e90:	4770      	bx	lr
 8002e92:	bf00      	nop
 8002e94:	40010000 	.word	0x40010000

08002e98 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002e98:	b480      	push	{r7}
 8002e9a:	b087      	sub	sp, #28
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
 8002ea0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6a1b      	ldr	r3, [r3, #32]
 8002ea6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6a1b      	ldr	r3, [r3, #32]
 8002eac:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	685b      	ldr	r3, [r3, #4]
 8002eb8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	69db      	ldr	r3, [r3, #28]
 8002ebe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002ec6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	f023 0303 	bic.w	r3, r3, #3
 8002ece:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	68fa      	ldr	r2, [r7, #12]
 8002ed6:	4313      	orrs	r3, r2
 8002ed8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002eda:	697b      	ldr	r3, [r7, #20]
 8002edc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002ee0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	689b      	ldr	r3, [r3, #8]
 8002ee6:	021b      	lsls	r3, r3, #8
 8002ee8:	697a      	ldr	r2, [r7, #20]
 8002eea:	4313      	orrs	r3, r2
 8002eec:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	4a1d      	ldr	r2, [pc, #116]	@ (8002f68 <TIM_OC3_SetConfig+0xd0>)
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d10d      	bne.n	8002f12 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002ef6:	697b      	ldr	r3, [r7, #20]
 8002ef8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002efc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	68db      	ldr	r3, [r3, #12]
 8002f02:	021b      	lsls	r3, r3, #8
 8002f04:	697a      	ldr	r2, [r7, #20]
 8002f06:	4313      	orrs	r3, r2
 8002f08:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002f0a:	697b      	ldr	r3, [r7, #20]
 8002f0c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002f10:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	4a14      	ldr	r2, [pc, #80]	@ (8002f68 <TIM_OC3_SetConfig+0xd0>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d113      	bne.n	8002f42 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002f1a:	693b      	ldr	r3, [r7, #16]
 8002f1c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002f20:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002f22:	693b      	ldr	r3, [r7, #16]
 8002f24:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002f28:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	695b      	ldr	r3, [r3, #20]
 8002f2e:	011b      	lsls	r3, r3, #4
 8002f30:	693a      	ldr	r2, [r7, #16]
 8002f32:	4313      	orrs	r3, r2
 8002f34:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	699b      	ldr	r3, [r3, #24]
 8002f3a:	011b      	lsls	r3, r3, #4
 8002f3c:	693a      	ldr	r2, [r7, #16]
 8002f3e:	4313      	orrs	r3, r2
 8002f40:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	693a      	ldr	r2, [r7, #16]
 8002f46:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	68fa      	ldr	r2, [r7, #12]
 8002f4c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	685a      	ldr	r2, [r3, #4]
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	697a      	ldr	r2, [r7, #20]
 8002f5a:	621a      	str	r2, [r3, #32]
}
 8002f5c:	bf00      	nop
 8002f5e:	371c      	adds	r7, #28
 8002f60:	46bd      	mov	sp, r7
 8002f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f66:	4770      	bx	lr
 8002f68:	40010000 	.word	0x40010000

08002f6c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002f6c:	b480      	push	{r7}
 8002f6e:	b087      	sub	sp, #28
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
 8002f74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6a1b      	ldr	r3, [r3, #32]
 8002f7a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6a1b      	ldr	r3, [r3, #32]
 8002f80:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	685b      	ldr	r3, [r3, #4]
 8002f8c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	69db      	ldr	r3, [r3, #28]
 8002f92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002f9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002fa2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	021b      	lsls	r3, r3, #8
 8002faa:	68fa      	ldr	r2, [r7, #12]
 8002fac:	4313      	orrs	r3, r2
 8002fae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002fb0:	693b      	ldr	r3, [r7, #16]
 8002fb2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002fb6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	689b      	ldr	r3, [r3, #8]
 8002fbc:	031b      	lsls	r3, r3, #12
 8002fbe:	693a      	ldr	r2, [r7, #16]
 8002fc0:	4313      	orrs	r3, r2
 8002fc2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	4a10      	ldr	r2, [pc, #64]	@ (8003008 <TIM_OC4_SetConfig+0x9c>)
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	d109      	bne.n	8002fe0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002fcc:	697b      	ldr	r3, [r7, #20]
 8002fce:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002fd2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	695b      	ldr	r3, [r3, #20]
 8002fd8:	019b      	lsls	r3, r3, #6
 8002fda:	697a      	ldr	r2, [r7, #20]
 8002fdc:	4313      	orrs	r3, r2
 8002fde:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	697a      	ldr	r2, [r7, #20]
 8002fe4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	68fa      	ldr	r2, [r7, #12]
 8002fea:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	685a      	ldr	r2, [r3, #4]
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	693a      	ldr	r2, [r7, #16]
 8002ff8:	621a      	str	r2, [r3, #32]
}
 8002ffa:	bf00      	nop
 8002ffc:	371c      	adds	r7, #28
 8002ffe:	46bd      	mov	sp, r7
 8003000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003004:	4770      	bx	lr
 8003006:	bf00      	nop
 8003008:	40010000 	.word	0x40010000

0800300c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800300c:	b480      	push	{r7}
 800300e:	b087      	sub	sp, #28
 8003010:	af00      	add	r7, sp, #0
 8003012:	60f8      	str	r0, [r7, #12]
 8003014:	60b9      	str	r1, [r7, #8]
 8003016:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003018:	68bb      	ldr	r3, [r7, #8]
 800301a:	f003 031f 	and.w	r3, r3, #31
 800301e:	2201      	movs	r2, #1
 8003020:	fa02 f303 	lsl.w	r3, r2, r3
 8003024:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	6a1a      	ldr	r2, [r3, #32]
 800302a:	697b      	ldr	r3, [r7, #20]
 800302c:	43db      	mvns	r3, r3
 800302e:	401a      	ands	r2, r3
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	6a1a      	ldr	r2, [r3, #32]
 8003038:	68bb      	ldr	r3, [r7, #8]
 800303a:	f003 031f 	and.w	r3, r3, #31
 800303e:	6879      	ldr	r1, [r7, #4]
 8003040:	fa01 f303 	lsl.w	r3, r1, r3
 8003044:	431a      	orrs	r2, r3
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	621a      	str	r2, [r3, #32]
}
 800304a:	bf00      	nop
 800304c:	371c      	adds	r7, #28
 800304e:	46bd      	mov	sp, r7
 8003050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003054:	4770      	bx	lr
	...

08003058 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003058:	b480      	push	{r7}
 800305a:	b085      	sub	sp, #20
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
 8003060:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003068:	2b01      	cmp	r3, #1
 800306a:	d101      	bne.n	8003070 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800306c:	2302      	movs	r3, #2
 800306e:	e050      	b.n	8003112 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2201      	movs	r2, #1
 8003074:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2202      	movs	r2, #2
 800307c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	685b      	ldr	r3, [r3, #4]
 8003086:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	689b      	ldr	r3, [r3, #8]
 800308e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003096:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	68fa      	ldr	r2, [r7, #12]
 800309e:	4313      	orrs	r3, r2
 80030a0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	68fa      	ldr	r2, [r7, #12]
 80030a8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	4a1c      	ldr	r2, [pc, #112]	@ (8003120 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80030b0:	4293      	cmp	r3, r2
 80030b2:	d018      	beq.n	80030e6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80030bc:	d013      	beq.n	80030e6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	4a18      	ldr	r2, [pc, #96]	@ (8003124 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80030c4:	4293      	cmp	r3, r2
 80030c6:	d00e      	beq.n	80030e6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4a16      	ldr	r2, [pc, #88]	@ (8003128 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d009      	beq.n	80030e6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	4a15      	ldr	r2, [pc, #84]	@ (800312c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80030d8:	4293      	cmp	r3, r2
 80030da:	d004      	beq.n	80030e6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	4a13      	ldr	r2, [pc, #76]	@ (8003130 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d10c      	bne.n	8003100 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80030e6:	68bb      	ldr	r3, [r7, #8]
 80030e8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80030ec:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	685b      	ldr	r3, [r3, #4]
 80030f2:	68ba      	ldr	r2, [r7, #8]
 80030f4:	4313      	orrs	r3, r2
 80030f6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	68ba      	ldr	r2, [r7, #8]
 80030fe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2201      	movs	r2, #1
 8003104:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2200      	movs	r2, #0
 800310c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003110:	2300      	movs	r3, #0
}
 8003112:	4618      	mov	r0, r3
 8003114:	3714      	adds	r7, #20
 8003116:	46bd      	mov	sp, r7
 8003118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311c:	4770      	bx	lr
 800311e:	bf00      	nop
 8003120:	40010000 	.word	0x40010000
 8003124:	40000400 	.word	0x40000400
 8003128:	40000800 	.word	0x40000800
 800312c:	40000c00 	.word	0x40000c00
 8003130:	40014000 	.word	0x40014000

08003134 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003134:	b480      	push	{r7}
 8003136:	b083      	sub	sp, #12
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800313c:	bf00      	nop
 800313e:	370c      	adds	r7, #12
 8003140:	46bd      	mov	sp, r7
 8003142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003146:	4770      	bx	lr

08003148 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003148:	b480      	push	{r7}
 800314a:	b083      	sub	sp, #12
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003150:	bf00      	nop
 8003152:	370c      	adds	r7, #12
 8003154:	46bd      	mov	sp, r7
 8003156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315a:	4770      	bx	lr

0800315c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b082      	sub	sp, #8
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2b00      	cmp	r3, #0
 8003168:	d101      	bne.n	800316e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800316a:	2301      	movs	r3, #1
 800316c:	e042      	b.n	80031f4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003174:	b2db      	uxtb	r3, r3
 8003176:	2b00      	cmp	r3, #0
 8003178:	d106      	bne.n	8003188 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2200      	movs	r2, #0
 800317e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003182:	6878      	ldr	r0, [r7, #4]
 8003184:	f7fd ff5e 	bl	8001044 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2224      	movs	r2, #36	@ 0x24
 800318c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	68da      	ldr	r2, [r3, #12]
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800319e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80031a0:	6878      	ldr	r0, [r7, #4]
 80031a2:	f000 fdd3 	bl	8003d4c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	691a      	ldr	r2, [r3, #16]
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80031b4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	695a      	ldr	r2, [r3, #20]
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80031c4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	68da      	ldr	r2, [r3, #12]
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80031d4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	2200      	movs	r2, #0
 80031da:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2220      	movs	r2, #32
 80031e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2220      	movs	r2, #32
 80031e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2200      	movs	r2, #0
 80031f0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80031f2:	2300      	movs	r3, #0
}
 80031f4:	4618      	mov	r0, r3
 80031f6:	3708      	adds	r7, #8
 80031f8:	46bd      	mov	sp, r7
 80031fa:	bd80      	pop	{r7, pc}

080031fc <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b08a      	sub	sp, #40	@ 0x28
 8003200:	af02      	add	r7, sp, #8
 8003202:	60f8      	str	r0, [r7, #12]
 8003204:	60b9      	str	r1, [r7, #8]
 8003206:	603b      	str	r3, [r7, #0]
 8003208:	4613      	mov	r3, r2
 800320a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800320c:	2300      	movs	r3, #0
 800320e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003216:	b2db      	uxtb	r3, r3
 8003218:	2b20      	cmp	r3, #32
 800321a:	d175      	bne.n	8003308 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800321c:	68bb      	ldr	r3, [r7, #8]
 800321e:	2b00      	cmp	r3, #0
 8003220:	d002      	beq.n	8003228 <HAL_UART_Transmit+0x2c>
 8003222:	88fb      	ldrh	r3, [r7, #6]
 8003224:	2b00      	cmp	r3, #0
 8003226:	d101      	bne.n	800322c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003228:	2301      	movs	r3, #1
 800322a:	e06e      	b.n	800330a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	2200      	movs	r2, #0
 8003230:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	2221      	movs	r2, #33	@ 0x21
 8003236:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800323a:	f7fe f909 	bl	8001450 <HAL_GetTick>
 800323e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	88fa      	ldrh	r2, [r7, #6]
 8003244:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	88fa      	ldrh	r2, [r7, #6]
 800324a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	689b      	ldr	r3, [r3, #8]
 8003250:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003254:	d108      	bne.n	8003268 <HAL_UART_Transmit+0x6c>
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	691b      	ldr	r3, [r3, #16]
 800325a:	2b00      	cmp	r3, #0
 800325c:	d104      	bne.n	8003268 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800325e:	2300      	movs	r3, #0
 8003260:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003262:	68bb      	ldr	r3, [r7, #8]
 8003264:	61bb      	str	r3, [r7, #24]
 8003266:	e003      	b.n	8003270 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003268:	68bb      	ldr	r3, [r7, #8]
 800326a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800326c:	2300      	movs	r3, #0
 800326e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003270:	e02e      	b.n	80032d0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	9300      	str	r3, [sp, #0]
 8003276:	697b      	ldr	r3, [r7, #20]
 8003278:	2200      	movs	r2, #0
 800327a:	2180      	movs	r1, #128	@ 0x80
 800327c:	68f8      	ldr	r0, [r7, #12]
 800327e:	f000 fb37 	bl	80038f0 <UART_WaitOnFlagUntilTimeout>
 8003282:	4603      	mov	r3, r0
 8003284:	2b00      	cmp	r3, #0
 8003286:	d005      	beq.n	8003294 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	2220      	movs	r2, #32
 800328c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003290:	2303      	movs	r3, #3
 8003292:	e03a      	b.n	800330a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003294:	69fb      	ldr	r3, [r7, #28]
 8003296:	2b00      	cmp	r3, #0
 8003298:	d10b      	bne.n	80032b2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800329a:	69bb      	ldr	r3, [r7, #24]
 800329c:	881b      	ldrh	r3, [r3, #0]
 800329e:	461a      	mov	r2, r3
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80032a8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80032aa:	69bb      	ldr	r3, [r7, #24]
 80032ac:	3302      	adds	r3, #2
 80032ae:	61bb      	str	r3, [r7, #24]
 80032b0:	e007      	b.n	80032c2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80032b2:	69fb      	ldr	r3, [r7, #28]
 80032b4:	781a      	ldrb	r2, [r3, #0]
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80032bc:	69fb      	ldr	r3, [r7, #28]
 80032be:	3301      	adds	r3, #1
 80032c0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80032c6:	b29b      	uxth	r3, r3
 80032c8:	3b01      	subs	r3, #1
 80032ca:	b29a      	uxth	r2, r3
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80032d4:	b29b      	uxth	r3, r3
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d1cb      	bne.n	8003272 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	9300      	str	r3, [sp, #0]
 80032de:	697b      	ldr	r3, [r7, #20]
 80032e0:	2200      	movs	r2, #0
 80032e2:	2140      	movs	r1, #64	@ 0x40
 80032e4:	68f8      	ldr	r0, [r7, #12]
 80032e6:	f000 fb03 	bl	80038f0 <UART_WaitOnFlagUntilTimeout>
 80032ea:	4603      	mov	r3, r0
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d005      	beq.n	80032fc <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	2220      	movs	r2, #32
 80032f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80032f8:	2303      	movs	r3, #3
 80032fa:	e006      	b.n	800330a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	2220      	movs	r2, #32
 8003300:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003304:	2300      	movs	r3, #0
 8003306:	e000      	b.n	800330a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003308:	2302      	movs	r3, #2
  }
}
 800330a:	4618      	mov	r0, r3
 800330c:	3720      	adds	r7, #32
 800330e:	46bd      	mov	sp, r7
 8003310:	bd80      	pop	{r7, pc}

08003312 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003312:	b580      	push	{r7, lr}
 8003314:	b084      	sub	sp, #16
 8003316:	af00      	add	r7, sp, #0
 8003318:	60f8      	str	r0, [r7, #12]
 800331a:	60b9      	str	r1, [r7, #8]
 800331c:	4613      	mov	r3, r2
 800331e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003326:	b2db      	uxtb	r3, r3
 8003328:	2b20      	cmp	r3, #32
 800332a:	d112      	bne.n	8003352 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800332c:	68bb      	ldr	r3, [r7, #8]
 800332e:	2b00      	cmp	r3, #0
 8003330:	d002      	beq.n	8003338 <HAL_UART_Receive_IT+0x26>
 8003332:	88fb      	ldrh	r3, [r7, #6]
 8003334:	2b00      	cmp	r3, #0
 8003336:	d101      	bne.n	800333c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003338:	2301      	movs	r3, #1
 800333a:	e00b      	b.n	8003354 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	2200      	movs	r2, #0
 8003340:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003342:	88fb      	ldrh	r3, [r7, #6]
 8003344:	461a      	mov	r2, r3
 8003346:	68b9      	ldr	r1, [r7, #8]
 8003348:	68f8      	ldr	r0, [r7, #12]
 800334a:	f000 fb2a 	bl	80039a2 <UART_Start_Receive_IT>
 800334e:	4603      	mov	r3, r0
 8003350:	e000      	b.n	8003354 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8003352:	2302      	movs	r3, #2
  }
}
 8003354:	4618      	mov	r0, r3
 8003356:	3710      	adds	r7, #16
 8003358:	46bd      	mov	sp, r7
 800335a:	bd80      	pop	{r7, pc}

0800335c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b0ba      	sub	sp, #232	@ 0xe8
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	68db      	ldr	r3, [r3, #12]
 8003374:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	695b      	ldr	r3, [r3, #20]
 800337e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8003382:	2300      	movs	r3, #0
 8003384:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003388:	2300      	movs	r3, #0
 800338a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800338e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003392:	f003 030f 	and.w	r3, r3, #15
 8003396:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800339a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d10f      	bne.n	80033c2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80033a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80033a6:	f003 0320 	and.w	r3, r3, #32
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d009      	beq.n	80033c2 <HAL_UART_IRQHandler+0x66>
 80033ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80033b2:	f003 0320 	and.w	r3, r3, #32
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d003      	beq.n	80033c2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80033ba:	6878      	ldr	r0, [r7, #4]
 80033bc:	f000 fc07 	bl	8003bce <UART_Receive_IT>
      return;
 80033c0:	e273      	b.n	80038aa <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80033c2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	f000 80de 	beq.w	8003588 <HAL_UART_IRQHandler+0x22c>
 80033cc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80033d0:	f003 0301 	and.w	r3, r3, #1
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d106      	bne.n	80033e6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80033d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80033dc:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	f000 80d1 	beq.w	8003588 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80033e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80033ea:	f003 0301 	and.w	r3, r3, #1
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d00b      	beq.n	800340a <HAL_UART_IRQHandler+0xae>
 80033f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80033f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d005      	beq.n	800340a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003402:	f043 0201 	orr.w	r2, r3, #1
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800340a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800340e:	f003 0304 	and.w	r3, r3, #4
 8003412:	2b00      	cmp	r3, #0
 8003414:	d00b      	beq.n	800342e <HAL_UART_IRQHandler+0xd2>
 8003416:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800341a:	f003 0301 	and.w	r3, r3, #1
 800341e:	2b00      	cmp	r3, #0
 8003420:	d005      	beq.n	800342e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003426:	f043 0202 	orr.w	r2, r3, #2
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800342e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003432:	f003 0302 	and.w	r3, r3, #2
 8003436:	2b00      	cmp	r3, #0
 8003438:	d00b      	beq.n	8003452 <HAL_UART_IRQHandler+0xf6>
 800343a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800343e:	f003 0301 	and.w	r3, r3, #1
 8003442:	2b00      	cmp	r3, #0
 8003444:	d005      	beq.n	8003452 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800344a:	f043 0204 	orr.w	r2, r3, #4
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003452:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003456:	f003 0308 	and.w	r3, r3, #8
 800345a:	2b00      	cmp	r3, #0
 800345c:	d011      	beq.n	8003482 <HAL_UART_IRQHandler+0x126>
 800345e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003462:	f003 0320 	and.w	r3, r3, #32
 8003466:	2b00      	cmp	r3, #0
 8003468:	d105      	bne.n	8003476 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800346a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800346e:	f003 0301 	and.w	r3, r3, #1
 8003472:	2b00      	cmp	r3, #0
 8003474:	d005      	beq.n	8003482 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800347a:	f043 0208 	orr.w	r2, r3, #8
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003486:	2b00      	cmp	r3, #0
 8003488:	f000 820a 	beq.w	80038a0 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800348c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003490:	f003 0320 	and.w	r3, r3, #32
 8003494:	2b00      	cmp	r3, #0
 8003496:	d008      	beq.n	80034aa <HAL_UART_IRQHandler+0x14e>
 8003498:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800349c:	f003 0320 	and.w	r3, r3, #32
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d002      	beq.n	80034aa <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80034a4:	6878      	ldr	r0, [r7, #4]
 80034a6:	f000 fb92 	bl	8003bce <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	695b      	ldr	r3, [r3, #20]
 80034b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80034b4:	2b40      	cmp	r3, #64	@ 0x40
 80034b6:	bf0c      	ite	eq
 80034b8:	2301      	moveq	r3, #1
 80034ba:	2300      	movne	r3, #0
 80034bc:	b2db      	uxtb	r3, r3
 80034be:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034c6:	f003 0308 	and.w	r3, r3, #8
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d103      	bne.n	80034d6 <HAL_UART_IRQHandler+0x17a>
 80034ce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d04f      	beq.n	8003576 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80034d6:	6878      	ldr	r0, [r7, #4]
 80034d8:	f000 fa9d 	bl	8003a16 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	695b      	ldr	r3, [r3, #20]
 80034e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80034e6:	2b40      	cmp	r3, #64	@ 0x40
 80034e8:	d141      	bne.n	800356e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	3314      	adds	r3, #20
 80034f0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034f4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80034f8:	e853 3f00 	ldrex	r3, [r3]
 80034fc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003500:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003504:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003508:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	3314      	adds	r3, #20
 8003512:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003516:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800351a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800351e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003522:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003526:	e841 2300 	strex	r3, r2, [r1]
 800352a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800352e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003532:	2b00      	cmp	r3, #0
 8003534:	d1d9      	bne.n	80034ea <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800353a:	2b00      	cmp	r3, #0
 800353c:	d013      	beq.n	8003566 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003542:	4a8a      	ldr	r2, [pc, #552]	@ (800376c <HAL_UART_IRQHandler+0x410>)
 8003544:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800354a:	4618      	mov	r0, r3
 800354c:	f7fe f90d 	bl	800176a <HAL_DMA_Abort_IT>
 8003550:	4603      	mov	r3, r0
 8003552:	2b00      	cmp	r3, #0
 8003554:	d016      	beq.n	8003584 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800355a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800355c:	687a      	ldr	r2, [r7, #4]
 800355e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003560:	4610      	mov	r0, r2
 8003562:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003564:	e00e      	b.n	8003584 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003566:	6878      	ldr	r0, [r7, #4]
 8003568:	f000 f9ac 	bl	80038c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800356c:	e00a      	b.n	8003584 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800356e:	6878      	ldr	r0, [r7, #4]
 8003570:	f000 f9a8 	bl	80038c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003574:	e006      	b.n	8003584 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003576:	6878      	ldr	r0, [r7, #4]
 8003578:	f000 f9a4 	bl	80038c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2200      	movs	r2, #0
 8003580:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8003582:	e18d      	b.n	80038a0 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003584:	bf00      	nop
    return;
 8003586:	e18b      	b.n	80038a0 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800358c:	2b01      	cmp	r3, #1
 800358e:	f040 8167 	bne.w	8003860 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003592:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003596:	f003 0310 	and.w	r3, r3, #16
 800359a:	2b00      	cmp	r3, #0
 800359c:	f000 8160 	beq.w	8003860 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 80035a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80035a4:	f003 0310 	and.w	r3, r3, #16
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	f000 8159 	beq.w	8003860 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80035ae:	2300      	movs	r3, #0
 80035b0:	60bb      	str	r3, [r7, #8]
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	60bb      	str	r3, [r7, #8]
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	685b      	ldr	r3, [r3, #4]
 80035c0:	60bb      	str	r3, [r7, #8]
 80035c2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	695b      	ldr	r3, [r3, #20]
 80035ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035ce:	2b40      	cmp	r3, #64	@ 0x40
 80035d0:	f040 80ce 	bne.w	8003770 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	685b      	ldr	r3, [r3, #4]
 80035dc:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80035e0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	f000 80a9 	beq.w	800373c <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80035ee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80035f2:	429a      	cmp	r2, r3
 80035f4:	f080 80a2 	bcs.w	800373c <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80035fe:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003604:	69db      	ldr	r3, [r3, #28]
 8003606:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800360a:	f000 8088 	beq.w	800371e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	330c      	adds	r3, #12
 8003614:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003618:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800361c:	e853 3f00 	ldrex	r3, [r3]
 8003620:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003624:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003628:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800362c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	330c      	adds	r3, #12
 8003636:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800363a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800363e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003642:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003646:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800364a:	e841 2300 	strex	r3, r2, [r1]
 800364e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003652:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003656:	2b00      	cmp	r3, #0
 8003658:	d1d9      	bne.n	800360e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	3314      	adds	r3, #20
 8003660:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003662:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003664:	e853 3f00 	ldrex	r3, [r3]
 8003668:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800366a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800366c:	f023 0301 	bic.w	r3, r3, #1
 8003670:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	3314      	adds	r3, #20
 800367a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800367e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003682:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003684:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003686:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800368a:	e841 2300 	strex	r3, r2, [r1]
 800368e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003690:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003692:	2b00      	cmp	r3, #0
 8003694:	d1e1      	bne.n	800365a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	3314      	adds	r3, #20
 800369c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800369e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80036a0:	e853 3f00 	ldrex	r3, [r3]
 80036a4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80036a6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80036a8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80036ac:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	3314      	adds	r3, #20
 80036b6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80036ba:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80036bc:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036be:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80036c0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80036c2:	e841 2300 	strex	r3, r2, [r1]
 80036c6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80036c8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d1e3      	bne.n	8003696 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2220      	movs	r2, #32
 80036d2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2200      	movs	r2, #0
 80036da:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	330c      	adds	r3, #12
 80036e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036e4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80036e6:	e853 3f00 	ldrex	r3, [r3]
 80036ea:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80036ec:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80036ee:	f023 0310 	bic.w	r3, r3, #16
 80036f2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	330c      	adds	r3, #12
 80036fc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8003700:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003702:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003704:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003706:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003708:	e841 2300 	strex	r3, r2, [r1]
 800370c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800370e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003710:	2b00      	cmp	r3, #0
 8003712:	d1e3      	bne.n	80036dc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003718:	4618      	mov	r0, r3
 800371a:	f7fd ffb6 	bl	800168a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2202      	movs	r2, #2
 8003722:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800372c:	b29b      	uxth	r3, r3
 800372e:	1ad3      	subs	r3, r2, r3
 8003730:	b29b      	uxth	r3, r3
 8003732:	4619      	mov	r1, r3
 8003734:	6878      	ldr	r0, [r7, #4]
 8003736:	f000 f8cf 	bl	80038d8 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800373a:	e0b3      	b.n	80038a4 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003740:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003744:	429a      	cmp	r2, r3
 8003746:	f040 80ad 	bne.w	80038a4 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800374e:	69db      	ldr	r3, [r3, #28]
 8003750:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003754:	f040 80a6 	bne.w	80038a4 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2202      	movs	r2, #2
 800375c:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003762:	4619      	mov	r1, r3
 8003764:	6878      	ldr	r0, [r7, #4]
 8003766:	f000 f8b7 	bl	80038d8 <HAL_UARTEx_RxEventCallback>
      return;
 800376a:	e09b      	b.n	80038a4 <HAL_UART_IRQHandler+0x548>
 800376c:	08003add 	.word	0x08003add
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003778:	b29b      	uxth	r3, r3
 800377a:	1ad3      	subs	r3, r2, r3
 800377c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003784:	b29b      	uxth	r3, r3
 8003786:	2b00      	cmp	r3, #0
 8003788:	f000 808e 	beq.w	80038a8 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 800378c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003790:	2b00      	cmp	r3, #0
 8003792:	f000 8089 	beq.w	80038a8 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	330c      	adds	r3, #12
 800379c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800379e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80037a0:	e853 3f00 	ldrex	r3, [r3]
 80037a4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80037a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80037a8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80037ac:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	330c      	adds	r3, #12
 80037b6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80037ba:	647a      	str	r2, [r7, #68]	@ 0x44
 80037bc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037be:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80037c0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80037c2:	e841 2300 	strex	r3, r2, [r1]
 80037c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80037c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d1e3      	bne.n	8003796 <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	3314      	adds	r3, #20
 80037d4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037d8:	e853 3f00 	ldrex	r3, [r3]
 80037dc:	623b      	str	r3, [r7, #32]
   return(result);
 80037de:	6a3b      	ldr	r3, [r7, #32]
 80037e0:	f023 0301 	bic.w	r3, r3, #1
 80037e4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	3314      	adds	r3, #20
 80037ee:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80037f2:	633a      	str	r2, [r7, #48]	@ 0x30
 80037f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037f6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80037f8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80037fa:	e841 2300 	strex	r3, r2, [r1]
 80037fe:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003800:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003802:	2b00      	cmp	r3, #0
 8003804:	d1e3      	bne.n	80037ce <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2220      	movs	r2, #32
 800380a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2200      	movs	r2, #0
 8003812:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	330c      	adds	r3, #12
 800381a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800381c:	693b      	ldr	r3, [r7, #16]
 800381e:	e853 3f00 	ldrex	r3, [r3]
 8003822:	60fb      	str	r3, [r7, #12]
   return(result);
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	f023 0310 	bic.w	r3, r3, #16
 800382a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	330c      	adds	r3, #12
 8003834:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003838:	61fa      	str	r2, [r7, #28]
 800383a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800383c:	69b9      	ldr	r1, [r7, #24]
 800383e:	69fa      	ldr	r2, [r7, #28]
 8003840:	e841 2300 	strex	r3, r2, [r1]
 8003844:	617b      	str	r3, [r7, #20]
   return(result);
 8003846:	697b      	ldr	r3, [r7, #20]
 8003848:	2b00      	cmp	r3, #0
 800384a:	d1e3      	bne.n	8003814 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2202      	movs	r2, #2
 8003850:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003852:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003856:	4619      	mov	r1, r3
 8003858:	6878      	ldr	r0, [r7, #4]
 800385a:	f000 f83d 	bl	80038d8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800385e:	e023      	b.n	80038a8 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003860:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003864:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003868:	2b00      	cmp	r3, #0
 800386a:	d009      	beq.n	8003880 <HAL_UART_IRQHandler+0x524>
 800386c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003870:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003874:	2b00      	cmp	r3, #0
 8003876:	d003      	beq.n	8003880 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 8003878:	6878      	ldr	r0, [r7, #4]
 800387a:	f000 f940 	bl	8003afe <UART_Transmit_IT>
    return;
 800387e:	e014      	b.n	80038aa <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003880:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003884:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003888:	2b00      	cmp	r3, #0
 800388a:	d00e      	beq.n	80038aa <HAL_UART_IRQHandler+0x54e>
 800388c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003890:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003894:	2b00      	cmp	r3, #0
 8003896:	d008      	beq.n	80038aa <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 8003898:	6878      	ldr	r0, [r7, #4]
 800389a:	f000 f980 	bl	8003b9e <UART_EndTransmit_IT>
    return;
 800389e:	e004      	b.n	80038aa <HAL_UART_IRQHandler+0x54e>
    return;
 80038a0:	bf00      	nop
 80038a2:	e002      	b.n	80038aa <HAL_UART_IRQHandler+0x54e>
      return;
 80038a4:	bf00      	nop
 80038a6:	e000      	b.n	80038aa <HAL_UART_IRQHandler+0x54e>
      return;
 80038a8:	bf00      	nop
  }
}
 80038aa:	37e8      	adds	r7, #232	@ 0xe8
 80038ac:	46bd      	mov	sp, r7
 80038ae:	bd80      	pop	{r7, pc}

080038b0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80038b0:	b480      	push	{r7}
 80038b2:	b083      	sub	sp, #12
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80038b8:	bf00      	nop
 80038ba:	370c      	adds	r7, #12
 80038bc:	46bd      	mov	sp, r7
 80038be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c2:	4770      	bx	lr

080038c4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80038c4:	b480      	push	{r7}
 80038c6:	b083      	sub	sp, #12
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80038cc:	bf00      	nop
 80038ce:	370c      	adds	r7, #12
 80038d0:	46bd      	mov	sp, r7
 80038d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d6:	4770      	bx	lr

080038d8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80038d8:	b480      	push	{r7}
 80038da:	b083      	sub	sp, #12
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
 80038e0:	460b      	mov	r3, r1
 80038e2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80038e4:	bf00      	nop
 80038e6:	370c      	adds	r7, #12
 80038e8:	46bd      	mov	sp, r7
 80038ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ee:	4770      	bx	lr

080038f0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b086      	sub	sp, #24
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	60f8      	str	r0, [r7, #12]
 80038f8:	60b9      	str	r1, [r7, #8]
 80038fa:	603b      	str	r3, [r7, #0]
 80038fc:	4613      	mov	r3, r2
 80038fe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003900:	e03b      	b.n	800397a <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003902:	6a3b      	ldr	r3, [r7, #32]
 8003904:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003908:	d037      	beq.n	800397a <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800390a:	f7fd fda1 	bl	8001450 <HAL_GetTick>
 800390e:	4602      	mov	r2, r0
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	1ad3      	subs	r3, r2, r3
 8003914:	6a3a      	ldr	r2, [r7, #32]
 8003916:	429a      	cmp	r2, r3
 8003918:	d302      	bcc.n	8003920 <UART_WaitOnFlagUntilTimeout+0x30>
 800391a:	6a3b      	ldr	r3, [r7, #32]
 800391c:	2b00      	cmp	r3, #0
 800391e:	d101      	bne.n	8003924 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003920:	2303      	movs	r3, #3
 8003922:	e03a      	b.n	800399a <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	68db      	ldr	r3, [r3, #12]
 800392a:	f003 0304 	and.w	r3, r3, #4
 800392e:	2b00      	cmp	r3, #0
 8003930:	d023      	beq.n	800397a <UART_WaitOnFlagUntilTimeout+0x8a>
 8003932:	68bb      	ldr	r3, [r7, #8]
 8003934:	2b80      	cmp	r3, #128	@ 0x80
 8003936:	d020      	beq.n	800397a <UART_WaitOnFlagUntilTimeout+0x8a>
 8003938:	68bb      	ldr	r3, [r7, #8]
 800393a:	2b40      	cmp	r3, #64	@ 0x40
 800393c:	d01d      	beq.n	800397a <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f003 0308 	and.w	r3, r3, #8
 8003948:	2b08      	cmp	r3, #8
 800394a:	d116      	bne.n	800397a <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800394c:	2300      	movs	r3, #0
 800394e:	617b      	str	r3, [r7, #20]
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	617b      	str	r3, [r7, #20]
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	685b      	ldr	r3, [r3, #4]
 800395e:	617b      	str	r3, [r7, #20]
 8003960:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003962:	68f8      	ldr	r0, [r7, #12]
 8003964:	f000 f857 	bl	8003a16 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	2208      	movs	r2, #8
 800396c:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	2200      	movs	r2, #0
 8003972:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003976:	2301      	movs	r3, #1
 8003978:	e00f      	b.n	800399a <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	681a      	ldr	r2, [r3, #0]
 8003980:	68bb      	ldr	r3, [r7, #8]
 8003982:	4013      	ands	r3, r2
 8003984:	68ba      	ldr	r2, [r7, #8]
 8003986:	429a      	cmp	r2, r3
 8003988:	bf0c      	ite	eq
 800398a:	2301      	moveq	r3, #1
 800398c:	2300      	movne	r3, #0
 800398e:	b2db      	uxtb	r3, r3
 8003990:	461a      	mov	r2, r3
 8003992:	79fb      	ldrb	r3, [r7, #7]
 8003994:	429a      	cmp	r2, r3
 8003996:	d0b4      	beq.n	8003902 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003998:	2300      	movs	r3, #0
}
 800399a:	4618      	mov	r0, r3
 800399c:	3718      	adds	r7, #24
 800399e:	46bd      	mov	sp, r7
 80039a0:	bd80      	pop	{r7, pc}

080039a2 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80039a2:	b480      	push	{r7}
 80039a4:	b085      	sub	sp, #20
 80039a6:	af00      	add	r7, sp, #0
 80039a8:	60f8      	str	r0, [r7, #12]
 80039aa:	60b9      	str	r1, [r7, #8]
 80039ac:	4613      	mov	r3, r2
 80039ae:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	68ba      	ldr	r2, [r7, #8]
 80039b4:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	88fa      	ldrh	r2, [r7, #6]
 80039ba:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	88fa      	ldrh	r2, [r7, #6]
 80039c0:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	2200      	movs	r2, #0
 80039c6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	2222      	movs	r2, #34	@ 0x22
 80039cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	691b      	ldr	r3, [r3, #16]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d007      	beq.n	80039e8 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	68da      	ldr	r2, [r3, #12]
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80039e6:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	695a      	ldr	r2, [r3, #20]
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f042 0201 	orr.w	r2, r2, #1
 80039f6:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	68da      	ldr	r2, [r3, #12]
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f042 0220 	orr.w	r2, r2, #32
 8003a06:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003a08:	2300      	movs	r3, #0
}
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	3714      	adds	r7, #20
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a14:	4770      	bx	lr

08003a16 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003a16:	b480      	push	{r7}
 8003a18:	b095      	sub	sp, #84	@ 0x54
 8003a1a:	af00      	add	r7, sp, #0
 8003a1c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	330c      	adds	r3, #12
 8003a24:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a26:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a28:	e853 3f00 	ldrex	r3, [r3]
 8003a2c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003a2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a30:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003a34:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	330c      	adds	r3, #12
 8003a3c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003a3e:	643a      	str	r2, [r7, #64]	@ 0x40
 8003a40:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a42:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003a44:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003a46:	e841 2300 	strex	r3, r2, [r1]
 8003a4a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003a4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d1e5      	bne.n	8003a1e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	3314      	adds	r3, #20
 8003a58:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a5a:	6a3b      	ldr	r3, [r7, #32]
 8003a5c:	e853 3f00 	ldrex	r3, [r3]
 8003a60:	61fb      	str	r3, [r7, #28]
   return(result);
 8003a62:	69fb      	ldr	r3, [r7, #28]
 8003a64:	f023 0301 	bic.w	r3, r3, #1
 8003a68:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	3314      	adds	r3, #20
 8003a70:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003a72:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003a74:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a76:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003a78:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003a7a:	e841 2300 	strex	r3, r2, [r1]
 8003a7e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003a80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d1e5      	bne.n	8003a52 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a8a:	2b01      	cmp	r3, #1
 8003a8c:	d119      	bne.n	8003ac2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	330c      	adds	r3, #12
 8003a94:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	e853 3f00 	ldrex	r3, [r3]
 8003a9c:	60bb      	str	r3, [r7, #8]
   return(result);
 8003a9e:	68bb      	ldr	r3, [r7, #8]
 8003aa0:	f023 0310 	bic.w	r3, r3, #16
 8003aa4:	647b      	str	r3, [r7, #68]	@ 0x44
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	330c      	adds	r3, #12
 8003aac:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003aae:	61ba      	str	r2, [r7, #24]
 8003ab0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ab2:	6979      	ldr	r1, [r7, #20]
 8003ab4:	69ba      	ldr	r2, [r7, #24]
 8003ab6:	e841 2300 	strex	r3, r2, [r1]
 8003aba:	613b      	str	r3, [r7, #16]
   return(result);
 8003abc:	693b      	ldr	r3, [r7, #16]
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d1e5      	bne.n	8003a8e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	2220      	movs	r2, #32
 8003ac6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	2200      	movs	r2, #0
 8003ace:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003ad0:	bf00      	nop
 8003ad2:	3754      	adds	r7, #84	@ 0x54
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ada:	4770      	bx	lr

08003adc <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b084      	sub	sp, #16
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ae8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	2200      	movs	r2, #0
 8003aee:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003af0:	68f8      	ldr	r0, [r7, #12]
 8003af2:	f7ff fee7 	bl	80038c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003af6:	bf00      	nop
 8003af8:	3710      	adds	r7, #16
 8003afa:	46bd      	mov	sp, r7
 8003afc:	bd80      	pop	{r7, pc}

08003afe <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003afe:	b480      	push	{r7}
 8003b00:	b085      	sub	sp, #20
 8003b02:	af00      	add	r7, sp, #0
 8003b04:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003b0c:	b2db      	uxtb	r3, r3
 8003b0e:	2b21      	cmp	r3, #33	@ 0x21
 8003b10:	d13e      	bne.n	8003b90 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	689b      	ldr	r3, [r3, #8]
 8003b16:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003b1a:	d114      	bne.n	8003b46 <UART_Transmit_IT+0x48>
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	691b      	ldr	r3, [r3, #16]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d110      	bne.n	8003b46 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	6a1b      	ldr	r3, [r3, #32]
 8003b28:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	881b      	ldrh	r3, [r3, #0]
 8003b2e:	461a      	mov	r2, r3
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003b38:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6a1b      	ldr	r3, [r3, #32]
 8003b3e:	1c9a      	adds	r2, r3, #2
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	621a      	str	r2, [r3, #32]
 8003b44:	e008      	b.n	8003b58 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6a1b      	ldr	r3, [r3, #32]
 8003b4a:	1c59      	adds	r1, r3, #1
 8003b4c:	687a      	ldr	r2, [r7, #4]
 8003b4e:	6211      	str	r1, [r2, #32]
 8003b50:	781a      	ldrb	r2, [r3, #0]
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003b5c:	b29b      	uxth	r3, r3
 8003b5e:	3b01      	subs	r3, #1
 8003b60:	b29b      	uxth	r3, r3
 8003b62:	687a      	ldr	r2, [r7, #4]
 8003b64:	4619      	mov	r1, r3
 8003b66:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d10f      	bne.n	8003b8c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	68da      	ldr	r2, [r3, #12]
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003b7a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	68da      	ldr	r2, [r3, #12]
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003b8a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	e000      	b.n	8003b92 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003b90:	2302      	movs	r3, #2
  }
}
 8003b92:	4618      	mov	r0, r3
 8003b94:	3714      	adds	r7, #20
 8003b96:	46bd      	mov	sp, r7
 8003b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9c:	4770      	bx	lr

08003b9e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003b9e:	b580      	push	{r7, lr}
 8003ba0:	b082      	sub	sp, #8
 8003ba2:	af00      	add	r7, sp, #0
 8003ba4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	68da      	ldr	r2, [r3, #12]
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003bb4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	2220      	movs	r2, #32
 8003bba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003bbe:	6878      	ldr	r0, [r7, #4]
 8003bc0:	f7ff fe76 	bl	80038b0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003bc4:	2300      	movs	r3, #0
}
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	3708      	adds	r7, #8
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	bd80      	pop	{r7, pc}

08003bce <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003bce:	b580      	push	{r7, lr}
 8003bd0:	b08c      	sub	sp, #48	@ 0x30
 8003bd2:	af00      	add	r7, sp, #0
 8003bd4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 8003bda:	2300      	movs	r3, #0
 8003bdc:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003be4:	b2db      	uxtb	r3, r3
 8003be6:	2b22      	cmp	r3, #34	@ 0x22
 8003be8:	f040 80aa 	bne.w	8003d40 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	689b      	ldr	r3, [r3, #8]
 8003bf0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003bf4:	d115      	bne.n	8003c22 <UART_Receive_IT+0x54>
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	691b      	ldr	r3, [r3, #16]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d111      	bne.n	8003c22 <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c02:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	685b      	ldr	r3, [r3, #4]
 8003c0a:	b29b      	uxth	r3, r3
 8003c0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c10:	b29a      	uxth	r2, r3
 8003c12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c14:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c1a:	1c9a      	adds	r2, r3, #2
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	629a      	str	r2, [r3, #40]	@ 0x28
 8003c20:	e024      	b.n	8003c6c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c26:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	689b      	ldr	r3, [r3, #8]
 8003c2c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003c30:	d007      	beq.n	8003c42 <UART_Receive_IT+0x74>
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	689b      	ldr	r3, [r3, #8]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d10a      	bne.n	8003c50 <UART_Receive_IT+0x82>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	691b      	ldr	r3, [r3, #16]
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d106      	bne.n	8003c50 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	685b      	ldr	r3, [r3, #4]
 8003c48:	b2da      	uxtb	r2, r3
 8003c4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c4c:	701a      	strb	r2, [r3, #0]
 8003c4e:	e008      	b.n	8003c62 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	685b      	ldr	r3, [r3, #4]
 8003c56:	b2db      	uxtb	r3, r3
 8003c58:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003c5c:	b2da      	uxtb	r2, r3
 8003c5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c60:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c66:	1c5a      	adds	r2, r3, #1
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003c70:	b29b      	uxth	r3, r3
 8003c72:	3b01      	subs	r3, #1
 8003c74:	b29b      	uxth	r3, r3
 8003c76:	687a      	ldr	r2, [r7, #4]
 8003c78:	4619      	mov	r1, r3
 8003c7a:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d15d      	bne.n	8003d3c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	68da      	ldr	r2, [r3, #12]
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f022 0220 	bic.w	r2, r2, #32
 8003c8e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	68da      	ldr	r2, [r3, #12]
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003c9e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	695a      	ldr	r2, [r3, #20]
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f022 0201 	bic.w	r2, r2, #1
 8003cae:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2220      	movs	r2, #32
 8003cb4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2200      	movs	r2, #0
 8003cbc:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cc2:	2b01      	cmp	r3, #1
 8003cc4:	d135      	bne.n	8003d32 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	2200      	movs	r2, #0
 8003cca:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	330c      	adds	r3, #12
 8003cd2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cd4:	697b      	ldr	r3, [r7, #20]
 8003cd6:	e853 3f00 	ldrex	r3, [r3]
 8003cda:	613b      	str	r3, [r7, #16]
   return(result);
 8003cdc:	693b      	ldr	r3, [r7, #16]
 8003cde:	f023 0310 	bic.w	r3, r3, #16
 8003ce2:	627b      	str	r3, [r7, #36]	@ 0x24
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	330c      	adds	r3, #12
 8003cea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003cec:	623a      	str	r2, [r7, #32]
 8003cee:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cf0:	69f9      	ldr	r1, [r7, #28]
 8003cf2:	6a3a      	ldr	r2, [r7, #32]
 8003cf4:	e841 2300 	strex	r3, r2, [r1]
 8003cf8:	61bb      	str	r3, [r7, #24]
   return(result);
 8003cfa:	69bb      	ldr	r3, [r7, #24]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d1e5      	bne.n	8003ccc <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f003 0310 	and.w	r3, r3, #16
 8003d0a:	2b10      	cmp	r3, #16
 8003d0c:	d10a      	bne.n	8003d24 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003d0e:	2300      	movs	r3, #0
 8003d10:	60fb      	str	r3, [r7, #12]
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	60fb      	str	r3, [r7, #12]
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	685b      	ldr	r3, [r3, #4]
 8003d20:	60fb      	str	r3, [r7, #12]
 8003d22:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003d28:	4619      	mov	r1, r3
 8003d2a:	6878      	ldr	r0, [r7, #4]
 8003d2c:	f7ff fdd4 	bl	80038d8 <HAL_UARTEx_RxEventCallback>
 8003d30:	e002      	b.n	8003d38 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003d32:	6878      	ldr	r0, [r7, #4]
 8003d34:	f7fc feec 	bl	8000b10 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003d38:	2300      	movs	r3, #0
 8003d3a:	e002      	b.n	8003d42 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003d3c:	2300      	movs	r3, #0
 8003d3e:	e000      	b.n	8003d42 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003d40:	2302      	movs	r3, #2
  }
}
 8003d42:	4618      	mov	r0, r3
 8003d44:	3730      	adds	r7, #48	@ 0x30
 8003d46:	46bd      	mov	sp, r7
 8003d48:	bd80      	pop	{r7, pc}
	...

08003d4c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003d4c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003d50:	b0c0      	sub	sp, #256	@ 0x100
 8003d52:	af00      	add	r7, sp, #0
 8003d54:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003d58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	691b      	ldr	r3, [r3, #16]
 8003d60:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003d64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d68:	68d9      	ldr	r1, [r3, #12]
 8003d6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d6e:	681a      	ldr	r2, [r3, #0]
 8003d70:	ea40 0301 	orr.w	r3, r0, r1
 8003d74:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003d76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d7a:	689a      	ldr	r2, [r3, #8]
 8003d7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d80:	691b      	ldr	r3, [r3, #16]
 8003d82:	431a      	orrs	r2, r3
 8003d84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d88:	695b      	ldr	r3, [r3, #20]
 8003d8a:	431a      	orrs	r2, r3
 8003d8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d90:	69db      	ldr	r3, [r3, #28]
 8003d92:	4313      	orrs	r3, r2
 8003d94:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003d98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	68db      	ldr	r3, [r3, #12]
 8003da0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003da4:	f021 010c 	bic.w	r1, r1, #12
 8003da8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003dac:	681a      	ldr	r2, [r3, #0]
 8003dae:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003db2:	430b      	orrs	r3, r1
 8003db4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003db6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	695b      	ldr	r3, [r3, #20]
 8003dbe:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003dc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003dc6:	6999      	ldr	r1, [r3, #24]
 8003dc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003dcc:	681a      	ldr	r2, [r3, #0]
 8003dce:	ea40 0301 	orr.w	r3, r0, r1
 8003dd2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003dd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003dd8:	681a      	ldr	r2, [r3, #0]
 8003dda:	4b8f      	ldr	r3, [pc, #572]	@ (8004018 <UART_SetConfig+0x2cc>)
 8003ddc:	429a      	cmp	r2, r3
 8003dde:	d005      	beq.n	8003dec <UART_SetConfig+0xa0>
 8003de0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003de4:	681a      	ldr	r2, [r3, #0]
 8003de6:	4b8d      	ldr	r3, [pc, #564]	@ (800401c <UART_SetConfig+0x2d0>)
 8003de8:	429a      	cmp	r2, r3
 8003dea:	d104      	bne.n	8003df6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003dec:	f7fe fb02 	bl	80023f4 <HAL_RCC_GetPCLK2Freq>
 8003df0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003df4:	e003      	b.n	8003dfe <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003df6:	f7fe fae9 	bl	80023cc <HAL_RCC_GetPCLK1Freq>
 8003dfa:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003dfe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e02:	69db      	ldr	r3, [r3, #28]
 8003e04:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003e08:	f040 810c 	bne.w	8004024 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003e0c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003e10:	2200      	movs	r2, #0
 8003e12:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003e16:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003e1a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003e1e:	4622      	mov	r2, r4
 8003e20:	462b      	mov	r3, r5
 8003e22:	1891      	adds	r1, r2, r2
 8003e24:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003e26:	415b      	adcs	r3, r3
 8003e28:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003e2a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003e2e:	4621      	mov	r1, r4
 8003e30:	eb12 0801 	adds.w	r8, r2, r1
 8003e34:	4629      	mov	r1, r5
 8003e36:	eb43 0901 	adc.w	r9, r3, r1
 8003e3a:	f04f 0200 	mov.w	r2, #0
 8003e3e:	f04f 0300 	mov.w	r3, #0
 8003e42:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003e46:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003e4a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003e4e:	4690      	mov	r8, r2
 8003e50:	4699      	mov	r9, r3
 8003e52:	4623      	mov	r3, r4
 8003e54:	eb18 0303 	adds.w	r3, r8, r3
 8003e58:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003e5c:	462b      	mov	r3, r5
 8003e5e:	eb49 0303 	adc.w	r3, r9, r3
 8003e62:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003e66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e6a:	685b      	ldr	r3, [r3, #4]
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003e72:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003e76:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003e7a:	460b      	mov	r3, r1
 8003e7c:	18db      	adds	r3, r3, r3
 8003e7e:	653b      	str	r3, [r7, #80]	@ 0x50
 8003e80:	4613      	mov	r3, r2
 8003e82:	eb42 0303 	adc.w	r3, r2, r3
 8003e86:	657b      	str	r3, [r7, #84]	@ 0x54
 8003e88:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003e8c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003e90:	f7fc f9fe 	bl	8000290 <__aeabi_uldivmod>
 8003e94:	4602      	mov	r2, r0
 8003e96:	460b      	mov	r3, r1
 8003e98:	4b61      	ldr	r3, [pc, #388]	@ (8004020 <UART_SetConfig+0x2d4>)
 8003e9a:	fba3 2302 	umull	r2, r3, r3, r2
 8003e9e:	095b      	lsrs	r3, r3, #5
 8003ea0:	011c      	lsls	r4, r3, #4
 8003ea2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003eac:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003eb0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003eb4:	4642      	mov	r2, r8
 8003eb6:	464b      	mov	r3, r9
 8003eb8:	1891      	adds	r1, r2, r2
 8003eba:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003ebc:	415b      	adcs	r3, r3
 8003ebe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003ec0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003ec4:	4641      	mov	r1, r8
 8003ec6:	eb12 0a01 	adds.w	sl, r2, r1
 8003eca:	4649      	mov	r1, r9
 8003ecc:	eb43 0b01 	adc.w	fp, r3, r1
 8003ed0:	f04f 0200 	mov.w	r2, #0
 8003ed4:	f04f 0300 	mov.w	r3, #0
 8003ed8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003edc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003ee0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003ee4:	4692      	mov	sl, r2
 8003ee6:	469b      	mov	fp, r3
 8003ee8:	4643      	mov	r3, r8
 8003eea:	eb1a 0303 	adds.w	r3, sl, r3
 8003eee:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003ef2:	464b      	mov	r3, r9
 8003ef4:	eb4b 0303 	adc.w	r3, fp, r3
 8003ef8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003efc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f00:	685b      	ldr	r3, [r3, #4]
 8003f02:	2200      	movs	r2, #0
 8003f04:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003f08:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003f0c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003f10:	460b      	mov	r3, r1
 8003f12:	18db      	adds	r3, r3, r3
 8003f14:	643b      	str	r3, [r7, #64]	@ 0x40
 8003f16:	4613      	mov	r3, r2
 8003f18:	eb42 0303 	adc.w	r3, r2, r3
 8003f1c:	647b      	str	r3, [r7, #68]	@ 0x44
 8003f1e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003f22:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003f26:	f7fc f9b3 	bl	8000290 <__aeabi_uldivmod>
 8003f2a:	4602      	mov	r2, r0
 8003f2c:	460b      	mov	r3, r1
 8003f2e:	4611      	mov	r1, r2
 8003f30:	4b3b      	ldr	r3, [pc, #236]	@ (8004020 <UART_SetConfig+0x2d4>)
 8003f32:	fba3 2301 	umull	r2, r3, r3, r1
 8003f36:	095b      	lsrs	r3, r3, #5
 8003f38:	2264      	movs	r2, #100	@ 0x64
 8003f3a:	fb02 f303 	mul.w	r3, r2, r3
 8003f3e:	1acb      	subs	r3, r1, r3
 8003f40:	00db      	lsls	r3, r3, #3
 8003f42:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003f46:	4b36      	ldr	r3, [pc, #216]	@ (8004020 <UART_SetConfig+0x2d4>)
 8003f48:	fba3 2302 	umull	r2, r3, r3, r2
 8003f4c:	095b      	lsrs	r3, r3, #5
 8003f4e:	005b      	lsls	r3, r3, #1
 8003f50:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003f54:	441c      	add	r4, r3
 8003f56:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003f60:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003f64:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003f68:	4642      	mov	r2, r8
 8003f6a:	464b      	mov	r3, r9
 8003f6c:	1891      	adds	r1, r2, r2
 8003f6e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003f70:	415b      	adcs	r3, r3
 8003f72:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003f74:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003f78:	4641      	mov	r1, r8
 8003f7a:	1851      	adds	r1, r2, r1
 8003f7c:	6339      	str	r1, [r7, #48]	@ 0x30
 8003f7e:	4649      	mov	r1, r9
 8003f80:	414b      	adcs	r3, r1
 8003f82:	637b      	str	r3, [r7, #52]	@ 0x34
 8003f84:	f04f 0200 	mov.w	r2, #0
 8003f88:	f04f 0300 	mov.w	r3, #0
 8003f8c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003f90:	4659      	mov	r1, fp
 8003f92:	00cb      	lsls	r3, r1, #3
 8003f94:	4651      	mov	r1, sl
 8003f96:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003f9a:	4651      	mov	r1, sl
 8003f9c:	00ca      	lsls	r2, r1, #3
 8003f9e:	4610      	mov	r0, r2
 8003fa0:	4619      	mov	r1, r3
 8003fa2:	4603      	mov	r3, r0
 8003fa4:	4642      	mov	r2, r8
 8003fa6:	189b      	adds	r3, r3, r2
 8003fa8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003fac:	464b      	mov	r3, r9
 8003fae:	460a      	mov	r2, r1
 8003fb0:	eb42 0303 	adc.w	r3, r2, r3
 8003fb4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003fb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fbc:	685b      	ldr	r3, [r3, #4]
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003fc4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003fc8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003fcc:	460b      	mov	r3, r1
 8003fce:	18db      	adds	r3, r3, r3
 8003fd0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003fd2:	4613      	mov	r3, r2
 8003fd4:	eb42 0303 	adc.w	r3, r2, r3
 8003fd8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003fda:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003fde:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003fe2:	f7fc f955 	bl	8000290 <__aeabi_uldivmod>
 8003fe6:	4602      	mov	r2, r0
 8003fe8:	460b      	mov	r3, r1
 8003fea:	4b0d      	ldr	r3, [pc, #52]	@ (8004020 <UART_SetConfig+0x2d4>)
 8003fec:	fba3 1302 	umull	r1, r3, r3, r2
 8003ff0:	095b      	lsrs	r3, r3, #5
 8003ff2:	2164      	movs	r1, #100	@ 0x64
 8003ff4:	fb01 f303 	mul.w	r3, r1, r3
 8003ff8:	1ad3      	subs	r3, r2, r3
 8003ffa:	00db      	lsls	r3, r3, #3
 8003ffc:	3332      	adds	r3, #50	@ 0x32
 8003ffe:	4a08      	ldr	r2, [pc, #32]	@ (8004020 <UART_SetConfig+0x2d4>)
 8004000:	fba2 2303 	umull	r2, r3, r2, r3
 8004004:	095b      	lsrs	r3, r3, #5
 8004006:	f003 0207 	and.w	r2, r3, #7
 800400a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	4422      	add	r2, r4
 8004012:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004014:	e106      	b.n	8004224 <UART_SetConfig+0x4d8>
 8004016:	bf00      	nop
 8004018:	40011000 	.word	0x40011000
 800401c:	40011400 	.word	0x40011400
 8004020:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004024:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004028:	2200      	movs	r2, #0
 800402a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800402e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004032:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004036:	4642      	mov	r2, r8
 8004038:	464b      	mov	r3, r9
 800403a:	1891      	adds	r1, r2, r2
 800403c:	6239      	str	r1, [r7, #32]
 800403e:	415b      	adcs	r3, r3
 8004040:	627b      	str	r3, [r7, #36]	@ 0x24
 8004042:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004046:	4641      	mov	r1, r8
 8004048:	1854      	adds	r4, r2, r1
 800404a:	4649      	mov	r1, r9
 800404c:	eb43 0501 	adc.w	r5, r3, r1
 8004050:	f04f 0200 	mov.w	r2, #0
 8004054:	f04f 0300 	mov.w	r3, #0
 8004058:	00eb      	lsls	r3, r5, #3
 800405a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800405e:	00e2      	lsls	r2, r4, #3
 8004060:	4614      	mov	r4, r2
 8004062:	461d      	mov	r5, r3
 8004064:	4643      	mov	r3, r8
 8004066:	18e3      	adds	r3, r4, r3
 8004068:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800406c:	464b      	mov	r3, r9
 800406e:	eb45 0303 	adc.w	r3, r5, r3
 8004072:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004076:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800407a:	685b      	ldr	r3, [r3, #4]
 800407c:	2200      	movs	r2, #0
 800407e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004082:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004086:	f04f 0200 	mov.w	r2, #0
 800408a:	f04f 0300 	mov.w	r3, #0
 800408e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004092:	4629      	mov	r1, r5
 8004094:	008b      	lsls	r3, r1, #2
 8004096:	4621      	mov	r1, r4
 8004098:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800409c:	4621      	mov	r1, r4
 800409e:	008a      	lsls	r2, r1, #2
 80040a0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80040a4:	f7fc f8f4 	bl	8000290 <__aeabi_uldivmod>
 80040a8:	4602      	mov	r2, r0
 80040aa:	460b      	mov	r3, r1
 80040ac:	4b60      	ldr	r3, [pc, #384]	@ (8004230 <UART_SetConfig+0x4e4>)
 80040ae:	fba3 2302 	umull	r2, r3, r3, r2
 80040b2:	095b      	lsrs	r3, r3, #5
 80040b4:	011c      	lsls	r4, r3, #4
 80040b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80040ba:	2200      	movs	r2, #0
 80040bc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80040c0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80040c4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80040c8:	4642      	mov	r2, r8
 80040ca:	464b      	mov	r3, r9
 80040cc:	1891      	adds	r1, r2, r2
 80040ce:	61b9      	str	r1, [r7, #24]
 80040d0:	415b      	adcs	r3, r3
 80040d2:	61fb      	str	r3, [r7, #28]
 80040d4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80040d8:	4641      	mov	r1, r8
 80040da:	1851      	adds	r1, r2, r1
 80040dc:	6139      	str	r1, [r7, #16]
 80040de:	4649      	mov	r1, r9
 80040e0:	414b      	adcs	r3, r1
 80040e2:	617b      	str	r3, [r7, #20]
 80040e4:	f04f 0200 	mov.w	r2, #0
 80040e8:	f04f 0300 	mov.w	r3, #0
 80040ec:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80040f0:	4659      	mov	r1, fp
 80040f2:	00cb      	lsls	r3, r1, #3
 80040f4:	4651      	mov	r1, sl
 80040f6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80040fa:	4651      	mov	r1, sl
 80040fc:	00ca      	lsls	r2, r1, #3
 80040fe:	4610      	mov	r0, r2
 8004100:	4619      	mov	r1, r3
 8004102:	4603      	mov	r3, r0
 8004104:	4642      	mov	r2, r8
 8004106:	189b      	adds	r3, r3, r2
 8004108:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800410c:	464b      	mov	r3, r9
 800410e:	460a      	mov	r2, r1
 8004110:	eb42 0303 	adc.w	r3, r2, r3
 8004114:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004118:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800411c:	685b      	ldr	r3, [r3, #4]
 800411e:	2200      	movs	r2, #0
 8004120:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004122:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004124:	f04f 0200 	mov.w	r2, #0
 8004128:	f04f 0300 	mov.w	r3, #0
 800412c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004130:	4649      	mov	r1, r9
 8004132:	008b      	lsls	r3, r1, #2
 8004134:	4641      	mov	r1, r8
 8004136:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800413a:	4641      	mov	r1, r8
 800413c:	008a      	lsls	r2, r1, #2
 800413e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004142:	f7fc f8a5 	bl	8000290 <__aeabi_uldivmod>
 8004146:	4602      	mov	r2, r0
 8004148:	460b      	mov	r3, r1
 800414a:	4611      	mov	r1, r2
 800414c:	4b38      	ldr	r3, [pc, #224]	@ (8004230 <UART_SetConfig+0x4e4>)
 800414e:	fba3 2301 	umull	r2, r3, r3, r1
 8004152:	095b      	lsrs	r3, r3, #5
 8004154:	2264      	movs	r2, #100	@ 0x64
 8004156:	fb02 f303 	mul.w	r3, r2, r3
 800415a:	1acb      	subs	r3, r1, r3
 800415c:	011b      	lsls	r3, r3, #4
 800415e:	3332      	adds	r3, #50	@ 0x32
 8004160:	4a33      	ldr	r2, [pc, #204]	@ (8004230 <UART_SetConfig+0x4e4>)
 8004162:	fba2 2303 	umull	r2, r3, r2, r3
 8004166:	095b      	lsrs	r3, r3, #5
 8004168:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800416c:	441c      	add	r4, r3
 800416e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004172:	2200      	movs	r2, #0
 8004174:	673b      	str	r3, [r7, #112]	@ 0x70
 8004176:	677a      	str	r2, [r7, #116]	@ 0x74
 8004178:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800417c:	4642      	mov	r2, r8
 800417e:	464b      	mov	r3, r9
 8004180:	1891      	adds	r1, r2, r2
 8004182:	60b9      	str	r1, [r7, #8]
 8004184:	415b      	adcs	r3, r3
 8004186:	60fb      	str	r3, [r7, #12]
 8004188:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800418c:	4641      	mov	r1, r8
 800418e:	1851      	adds	r1, r2, r1
 8004190:	6039      	str	r1, [r7, #0]
 8004192:	4649      	mov	r1, r9
 8004194:	414b      	adcs	r3, r1
 8004196:	607b      	str	r3, [r7, #4]
 8004198:	f04f 0200 	mov.w	r2, #0
 800419c:	f04f 0300 	mov.w	r3, #0
 80041a0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80041a4:	4659      	mov	r1, fp
 80041a6:	00cb      	lsls	r3, r1, #3
 80041a8:	4651      	mov	r1, sl
 80041aa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80041ae:	4651      	mov	r1, sl
 80041b0:	00ca      	lsls	r2, r1, #3
 80041b2:	4610      	mov	r0, r2
 80041b4:	4619      	mov	r1, r3
 80041b6:	4603      	mov	r3, r0
 80041b8:	4642      	mov	r2, r8
 80041ba:	189b      	adds	r3, r3, r2
 80041bc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80041be:	464b      	mov	r3, r9
 80041c0:	460a      	mov	r2, r1
 80041c2:	eb42 0303 	adc.w	r3, r2, r3
 80041c6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80041c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041cc:	685b      	ldr	r3, [r3, #4]
 80041ce:	2200      	movs	r2, #0
 80041d0:	663b      	str	r3, [r7, #96]	@ 0x60
 80041d2:	667a      	str	r2, [r7, #100]	@ 0x64
 80041d4:	f04f 0200 	mov.w	r2, #0
 80041d8:	f04f 0300 	mov.w	r3, #0
 80041dc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80041e0:	4649      	mov	r1, r9
 80041e2:	008b      	lsls	r3, r1, #2
 80041e4:	4641      	mov	r1, r8
 80041e6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80041ea:	4641      	mov	r1, r8
 80041ec:	008a      	lsls	r2, r1, #2
 80041ee:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80041f2:	f7fc f84d 	bl	8000290 <__aeabi_uldivmod>
 80041f6:	4602      	mov	r2, r0
 80041f8:	460b      	mov	r3, r1
 80041fa:	4b0d      	ldr	r3, [pc, #52]	@ (8004230 <UART_SetConfig+0x4e4>)
 80041fc:	fba3 1302 	umull	r1, r3, r3, r2
 8004200:	095b      	lsrs	r3, r3, #5
 8004202:	2164      	movs	r1, #100	@ 0x64
 8004204:	fb01 f303 	mul.w	r3, r1, r3
 8004208:	1ad3      	subs	r3, r2, r3
 800420a:	011b      	lsls	r3, r3, #4
 800420c:	3332      	adds	r3, #50	@ 0x32
 800420e:	4a08      	ldr	r2, [pc, #32]	@ (8004230 <UART_SetConfig+0x4e4>)
 8004210:	fba2 2303 	umull	r2, r3, r2, r3
 8004214:	095b      	lsrs	r3, r3, #5
 8004216:	f003 020f 	and.w	r2, r3, #15
 800421a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	4422      	add	r2, r4
 8004222:	609a      	str	r2, [r3, #8]
}
 8004224:	bf00      	nop
 8004226:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800422a:	46bd      	mov	sp, r7
 800422c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004230:	51eb851f 	.word	0x51eb851f

08004234 <std>:
 8004234:	2300      	movs	r3, #0
 8004236:	b510      	push	{r4, lr}
 8004238:	4604      	mov	r4, r0
 800423a:	e9c0 3300 	strd	r3, r3, [r0]
 800423e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004242:	6083      	str	r3, [r0, #8]
 8004244:	8181      	strh	r1, [r0, #12]
 8004246:	6643      	str	r3, [r0, #100]	@ 0x64
 8004248:	81c2      	strh	r2, [r0, #14]
 800424a:	6183      	str	r3, [r0, #24]
 800424c:	4619      	mov	r1, r3
 800424e:	2208      	movs	r2, #8
 8004250:	305c      	adds	r0, #92	@ 0x5c
 8004252:	f000 f9f9 	bl	8004648 <memset>
 8004256:	4b0d      	ldr	r3, [pc, #52]	@ (800428c <std+0x58>)
 8004258:	6263      	str	r3, [r4, #36]	@ 0x24
 800425a:	4b0d      	ldr	r3, [pc, #52]	@ (8004290 <std+0x5c>)
 800425c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800425e:	4b0d      	ldr	r3, [pc, #52]	@ (8004294 <std+0x60>)
 8004260:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004262:	4b0d      	ldr	r3, [pc, #52]	@ (8004298 <std+0x64>)
 8004264:	6323      	str	r3, [r4, #48]	@ 0x30
 8004266:	4b0d      	ldr	r3, [pc, #52]	@ (800429c <std+0x68>)
 8004268:	6224      	str	r4, [r4, #32]
 800426a:	429c      	cmp	r4, r3
 800426c:	d006      	beq.n	800427c <std+0x48>
 800426e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004272:	4294      	cmp	r4, r2
 8004274:	d002      	beq.n	800427c <std+0x48>
 8004276:	33d0      	adds	r3, #208	@ 0xd0
 8004278:	429c      	cmp	r4, r3
 800427a:	d105      	bne.n	8004288 <std+0x54>
 800427c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004280:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004284:	f000 bab4 	b.w	80047f0 <__retarget_lock_init_recursive>
 8004288:	bd10      	pop	{r4, pc}
 800428a:	bf00      	nop
 800428c:	08004499 	.word	0x08004499
 8004290:	080044bb 	.word	0x080044bb
 8004294:	080044f3 	.word	0x080044f3
 8004298:	08004517 	.word	0x08004517
 800429c:	2000017c 	.word	0x2000017c

080042a0 <stdio_exit_handler>:
 80042a0:	4a02      	ldr	r2, [pc, #8]	@ (80042ac <stdio_exit_handler+0xc>)
 80042a2:	4903      	ldr	r1, [pc, #12]	@ (80042b0 <stdio_exit_handler+0x10>)
 80042a4:	4803      	ldr	r0, [pc, #12]	@ (80042b4 <stdio_exit_handler+0x14>)
 80042a6:	f000 b869 	b.w	800437c <_fwalk_sglue>
 80042aa:	bf00      	nop
 80042ac:	20000010 	.word	0x20000010
 80042b0:	080050d9 	.word	0x080050d9
 80042b4:	20000020 	.word	0x20000020

080042b8 <cleanup_stdio>:
 80042b8:	6841      	ldr	r1, [r0, #4]
 80042ba:	4b0c      	ldr	r3, [pc, #48]	@ (80042ec <cleanup_stdio+0x34>)
 80042bc:	4299      	cmp	r1, r3
 80042be:	b510      	push	{r4, lr}
 80042c0:	4604      	mov	r4, r0
 80042c2:	d001      	beq.n	80042c8 <cleanup_stdio+0x10>
 80042c4:	f000 ff08 	bl	80050d8 <_fflush_r>
 80042c8:	68a1      	ldr	r1, [r4, #8]
 80042ca:	4b09      	ldr	r3, [pc, #36]	@ (80042f0 <cleanup_stdio+0x38>)
 80042cc:	4299      	cmp	r1, r3
 80042ce:	d002      	beq.n	80042d6 <cleanup_stdio+0x1e>
 80042d0:	4620      	mov	r0, r4
 80042d2:	f000 ff01 	bl	80050d8 <_fflush_r>
 80042d6:	68e1      	ldr	r1, [r4, #12]
 80042d8:	4b06      	ldr	r3, [pc, #24]	@ (80042f4 <cleanup_stdio+0x3c>)
 80042da:	4299      	cmp	r1, r3
 80042dc:	d004      	beq.n	80042e8 <cleanup_stdio+0x30>
 80042de:	4620      	mov	r0, r4
 80042e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80042e4:	f000 bef8 	b.w	80050d8 <_fflush_r>
 80042e8:	bd10      	pop	{r4, pc}
 80042ea:	bf00      	nop
 80042ec:	2000017c 	.word	0x2000017c
 80042f0:	200001e4 	.word	0x200001e4
 80042f4:	2000024c 	.word	0x2000024c

080042f8 <global_stdio_init.part.0>:
 80042f8:	b510      	push	{r4, lr}
 80042fa:	4b0b      	ldr	r3, [pc, #44]	@ (8004328 <global_stdio_init.part.0+0x30>)
 80042fc:	4c0b      	ldr	r4, [pc, #44]	@ (800432c <global_stdio_init.part.0+0x34>)
 80042fe:	4a0c      	ldr	r2, [pc, #48]	@ (8004330 <global_stdio_init.part.0+0x38>)
 8004300:	601a      	str	r2, [r3, #0]
 8004302:	4620      	mov	r0, r4
 8004304:	2200      	movs	r2, #0
 8004306:	2104      	movs	r1, #4
 8004308:	f7ff ff94 	bl	8004234 <std>
 800430c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004310:	2201      	movs	r2, #1
 8004312:	2109      	movs	r1, #9
 8004314:	f7ff ff8e 	bl	8004234 <std>
 8004318:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800431c:	2202      	movs	r2, #2
 800431e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004322:	2112      	movs	r1, #18
 8004324:	f7ff bf86 	b.w	8004234 <std>
 8004328:	200002b4 	.word	0x200002b4
 800432c:	2000017c 	.word	0x2000017c
 8004330:	080042a1 	.word	0x080042a1

08004334 <__sfp_lock_acquire>:
 8004334:	4801      	ldr	r0, [pc, #4]	@ (800433c <__sfp_lock_acquire+0x8>)
 8004336:	f000 ba5c 	b.w	80047f2 <__retarget_lock_acquire_recursive>
 800433a:	bf00      	nop
 800433c:	200002bd 	.word	0x200002bd

08004340 <__sfp_lock_release>:
 8004340:	4801      	ldr	r0, [pc, #4]	@ (8004348 <__sfp_lock_release+0x8>)
 8004342:	f000 ba57 	b.w	80047f4 <__retarget_lock_release_recursive>
 8004346:	bf00      	nop
 8004348:	200002bd 	.word	0x200002bd

0800434c <__sinit>:
 800434c:	b510      	push	{r4, lr}
 800434e:	4604      	mov	r4, r0
 8004350:	f7ff fff0 	bl	8004334 <__sfp_lock_acquire>
 8004354:	6a23      	ldr	r3, [r4, #32]
 8004356:	b11b      	cbz	r3, 8004360 <__sinit+0x14>
 8004358:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800435c:	f7ff bff0 	b.w	8004340 <__sfp_lock_release>
 8004360:	4b04      	ldr	r3, [pc, #16]	@ (8004374 <__sinit+0x28>)
 8004362:	6223      	str	r3, [r4, #32]
 8004364:	4b04      	ldr	r3, [pc, #16]	@ (8004378 <__sinit+0x2c>)
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	2b00      	cmp	r3, #0
 800436a:	d1f5      	bne.n	8004358 <__sinit+0xc>
 800436c:	f7ff ffc4 	bl	80042f8 <global_stdio_init.part.0>
 8004370:	e7f2      	b.n	8004358 <__sinit+0xc>
 8004372:	bf00      	nop
 8004374:	080042b9 	.word	0x080042b9
 8004378:	200002b4 	.word	0x200002b4

0800437c <_fwalk_sglue>:
 800437c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004380:	4607      	mov	r7, r0
 8004382:	4688      	mov	r8, r1
 8004384:	4614      	mov	r4, r2
 8004386:	2600      	movs	r6, #0
 8004388:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800438c:	f1b9 0901 	subs.w	r9, r9, #1
 8004390:	d505      	bpl.n	800439e <_fwalk_sglue+0x22>
 8004392:	6824      	ldr	r4, [r4, #0]
 8004394:	2c00      	cmp	r4, #0
 8004396:	d1f7      	bne.n	8004388 <_fwalk_sglue+0xc>
 8004398:	4630      	mov	r0, r6
 800439a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800439e:	89ab      	ldrh	r3, [r5, #12]
 80043a0:	2b01      	cmp	r3, #1
 80043a2:	d907      	bls.n	80043b4 <_fwalk_sglue+0x38>
 80043a4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80043a8:	3301      	adds	r3, #1
 80043aa:	d003      	beq.n	80043b4 <_fwalk_sglue+0x38>
 80043ac:	4629      	mov	r1, r5
 80043ae:	4638      	mov	r0, r7
 80043b0:	47c0      	blx	r8
 80043b2:	4306      	orrs	r6, r0
 80043b4:	3568      	adds	r5, #104	@ 0x68
 80043b6:	e7e9      	b.n	800438c <_fwalk_sglue+0x10>

080043b8 <iprintf>:
 80043b8:	b40f      	push	{r0, r1, r2, r3}
 80043ba:	b507      	push	{r0, r1, r2, lr}
 80043bc:	4906      	ldr	r1, [pc, #24]	@ (80043d8 <iprintf+0x20>)
 80043be:	ab04      	add	r3, sp, #16
 80043c0:	6808      	ldr	r0, [r1, #0]
 80043c2:	f853 2b04 	ldr.w	r2, [r3], #4
 80043c6:	6881      	ldr	r1, [r0, #8]
 80043c8:	9301      	str	r3, [sp, #4]
 80043ca:	f000 fb5d 	bl	8004a88 <_vfiprintf_r>
 80043ce:	b003      	add	sp, #12
 80043d0:	f85d eb04 	ldr.w	lr, [sp], #4
 80043d4:	b004      	add	sp, #16
 80043d6:	4770      	bx	lr
 80043d8:	2000001c 	.word	0x2000001c

080043dc <_puts_r>:
 80043dc:	6a03      	ldr	r3, [r0, #32]
 80043de:	b570      	push	{r4, r5, r6, lr}
 80043e0:	6884      	ldr	r4, [r0, #8]
 80043e2:	4605      	mov	r5, r0
 80043e4:	460e      	mov	r6, r1
 80043e6:	b90b      	cbnz	r3, 80043ec <_puts_r+0x10>
 80043e8:	f7ff ffb0 	bl	800434c <__sinit>
 80043ec:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80043ee:	07db      	lsls	r3, r3, #31
 80043f0:	d405      	bmi.n	80043fe <_puts_r+0x22>
 80043f2:	89a3      	ldrh	r3, [r4, #12]
 80043f4:	0598      	lsls	r0, r3, #22
 80043f6:	d402      	bmi.n	80043fe <_puts_r+0x22>
 80043f8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80043fa:	f000 f9fa 	bl	80047f2 <__retarget_lock_acquire_recursive>
 80043fe:	89a3      	ldrh	r3, [r4, #12]
 8004400:	0719      	lsls	r1, r3, #28
 8004402:	d502      	bpl.n	800440a <_puts_r+0x2e>
 8004404:	6923      	ldr	r3, [r4, #16]
 8004406:	2b00      	cmp	r3, #0
 8004408:	d135      	bne.n	8004476 <_puts_r+0x9a>
 800440a:	4621      	mov	r1, r4
 800440c:	4628      	mov	r0, r5
 800440e:	f000 f8c5 	bl	800459c <__swsetup_r>
 8004412:	b380      	cbz	r0, 8004476 <_puts_r+0x9a>
 8004414:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8004418:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800441a:	07da      	lsls	r2, r3, #31
 800441c:	d405      	bmi.n	800442a <_puts_r+0x4e>
 800441e:	89a3      	ldrh	r3, [r4, #12]
 8004420:	059b      	lsls	r3, r3, #22
 8004422:	d402      	bmi.n	800442a <_puts_r+0x4e>
 8004424:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004426:	f000 f9e5 	bl	80047f4 <__retarget_lock_release_recursive>
 800442a:	4628      	mov	r0, r5
 800442c:	bd70      	pop	{r4, r5, r6, pc}
 800442e:	2b00      	cmp	r3, #0
 8004430:	da04      	bge.n	800443c <_puts_r+0x60>
 8004432:	69a2      	ldr	r2, [r4, #24]
 8004434:	429a      	cmp	r2, r3
 8004436:	dc17      	bgt.n	8004468 <_puts_r+0x8c>
 8004438:	290a      	cmp	r1, #10
 800443a:	d015      	beq.n	8004468 <_puts_r+0x8c>
 800443c:	6823      	ldr	r3, [r4, #0]
 800443e:	1c5a      	adds	r2, r3, #1
 8004440:	6022      	str	r2, [r4, #0]
 8004442:	7019      	strb	r1, [r3, #0]
 8004444:	68a3      	ldr	r3, [r4, #8]
 8004446:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800444a:	3b01      	subs	r3, #1
 800444c:	60a3      	str	r3, [r4, #8]
 800444e:	2900      	cmp	r1, #0
 8004450:	d1ed      	bne.n	800442e <_puts_r+0x52>
 8004452:	2b00      	cmp	r3, #0
 8004454:	da11      	bge.n	800447a <_puts_r+0x9e>
 8004456:	4622      	mov	r2, r4
 8004458:	210a      	movs	r1, #10
 800445a:	4628      	mov	r0, r5
 800445c:	f000 f85f 	bl	800451e <__swbuf_r>
 8004460:	3001      	adds	r0, #1
 8004462:	d0d7      	beq.n	8004414 <_puts_r+0x38>
 8004464:	250a      	movs	r5, #10
 8004466:	e7d7      	b.n	8004418 <_puts_r+0x3c>
 8004468:	4622      	mov	r2, r4
 800446a:	4628      	mov	r0, r5
 800446c:	f000 f857 	bl	800451e <__swbuf_r>
 8004470:	3001      	adds	r0, #1
 8004472:	d1e7      	bne.n	8004444 <_puts_r+0x68>
 8004474:	e7ce      	b.n	8004414 <_puts_r+0x38>
 8004476:	3e01      	subs	r6, #1
 8004478:	e7e4      	b.n	8004444 <_puts_r+0x68>
 800447a:	6823      	ldr	r3, [r4, #0]
 800447c:	1c5a      	adds	r2, r3, #1
 800447e:	6022      	str	r2, [r4, #0]
 8004480:	220a      	movs	r2, #10
 8004482:	701a      	strb	r2, [r3, #0]
 8004484:	e7ee      	b.n	8004464 <_puts_r+0x88>
	...

08004488 <puts>:
 8004488:	4b02      	ldr	r3, [pc, #8]	@ (8004494 <puts+0xc>)
 800448a:	4601      	mov	r1, r0
 800448c:	6818      	ldr	r0, [r3, #0]
 800448e:	f7ff bfa5 	b.w	80043dc <_puts_r>
 8004492:	bf00      	nop
 8004494:	2000001c 	.word	0x2000001c

08004498 <__sread>:
 8004498:	b510      	push	{r4, lr}
 800449a:	460c      	mov	r4, r1
 800449c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80044a0:	f000 f958 	bl	8004754 <_read_r>
 80044a4:	2800      	cmp	r0, #0
 80044a6:	bfab      	itete	ge
 80044a8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80044aa:	89a3      	ldrhlt	r3, [r4, #12]
 80044ac:	181b      	addge	r3, r3, r0
 80044ae:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80044b2:	bfac      	ite	ge
 80044b4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80044b6:	81a3      	strhlt	r3, [r4, #12]
 80044b8:	bd10      	pop	{r4, pc}

080044ba <__swrite>:
 80044ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80044be:	461f      	mov	r7, r3
 80044c0:	898b      	ldrh	r3, [r1, #12]
 80044c2:	05db      	lsls	r3, r3, #23
 80044c4:	4605      	mov	r5, r0
 80044c6:	460c      	mov	r4, r1
 80044c8:	4616      	mov	r6, r2
 80044ca:	d505      	bpl.n	80044d8 <__swrite+0x1e>
 80044cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80044d0:	2302      	movs	r3, #2
 80044d2:	2200      	movs	r2, #0
 80044d4:	f000 f92c 	bl	8004730 <_lseek_r>
 80044d8:	89a3      	ldrh	r3, [r4, #12]
 80044da:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80044de:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80044e2:	81a3      	strh	r3, [r4, #12]
 80044e4:	4632      	mov	r2, r6
 80044e6:	463b      	mov	r3, r7
 80044e8:	4628      	mov	r0, r5
 80044ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80044ee:	f000 b943 	b.w	8004778 <_write_r>

080044f2 <__sseek>:
 80044f2:	b510      	push	{r4, lr}
 80044f4:	460c      	mov	r4, r1
 80044f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80044fa:	f000 f919 	bl	8004730 <_lseek_r>
 80044fe:	1c43      	adds	r3, r0, #1
 8004500:	89a3      	ldrh	r3, [r4, #12]
 8004502:	bf15      	itete	ne
 8004504:	6560      	strne	r0, [r4, #84]	@ 0x54
 8004506:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800450a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800450e:	81a3      	strheq	r3, [r4, #12]
 8004510:	bf18      	it	ne
 8004512:	81a3      	strhne	r3, [r4, #12]
 8004514:	bd10      	pop	{r4, pc}

08004516 <__sclose>:
 8004516:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800451a:	f000 b8f9 	b.w	8004710 <_close_r>

0800451e <__swbuf_r>:
 800451e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004520:	460e      	mov	r6, r1
 8004522:	4614      	mov	r4, r2
 8004524:	4605      	mov	r5, r0
 8004526:	b118      	cbz	r0, 8004530 <__swbuf_r+0x12>
 8004528:	6a03      	ldr	r3, [r0, #32]
 800452a:	b90b      	cbnz	r3, 8004530 <__swbuf_r+0x12>
 800452c:	f7ff ff0e 	bl	800434c <__sinit>
 8004530:	69a3      	ldr	r3, [r4, #24]
 8004532:	60a3      	str	r3, [r4, #8]
 8004534:	89a3      	ldrh	r3, [r4, #12]
 8004536:	071a      	lsls	r2, r3, #28
 8004538:	d501      	bpl.n	800453e <__swbuf_r+0x20>
 800453a:	6923      	ldr	r3, [r4, #16]
 800453c:	b943      	cbnz	r3, 8004550 <__swbuf_r+0x32>
 800453e:	4621      	mov	r1, r4
 8004540:	4628      	mov	r0, r5
 8004542:	f000 f82b 	bl	800459c <__swsetup_r>
 8004546:	b118      	cbz	r0, 8004550 <__swbuf_r+0x32>
 8004548:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800454c:	4638      	mov	r0, r7
 800454e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004550:	6823      	ldr	r3, [r4, #0]
 8004552:	6922      	ldr	r2, [r4, #16]
 8004554:	1a98      	subs	r0, r3, r2
 8004556:	6963      	ldr	r3, [r4, #20]
 8004558:	b2f6      	uxtb	r6, r6
 800455a:	4283      	cmp	r3, r0
 800455c:	4637      	mov	r7, r6
 800455e:	dc05      	bgt.n	800456c <__swbuf_r+0x4e>
 8004560:	4621      	mov	r1, r4
 8004562:	4628      	mov	r0, r5
 8004564:	f000 fdb8 	bl	80050d8 <_fflush_r>
 8004568:	2800      	cmp	r0, #0
 800456a:	d1ed      	bne.n	8004548 <__swbuf_r+0x2a>
 800456c:	68a3      	ldr	r3, [r4, #8]
 800456e:	3b01      	subs	r3, #1
 8004570:	60a3      	str	r3, [r4, #8]
 8004572:	6823      	ldr	r3, [r4, #0]
 8004574:	1c5a      	adds	r2, r3, #1
 8004576:	6022      	str	r2, [r4, #0]
 8004578:	701e      	strb	r6, [r3, #0]
 800457a:	6962      	ldr	r2, [r4, #20]
 800457c:	1c43      	adds	r3, r0, #1
 800457e:	429a      	cmp	r2, r3
 8004580:	d004      	beq.n	800458c <__swbuf_r+0x6e>
 8004582:	89a3      	ldrh	r3, [r4, #12]
 8004584:	07db      	lsls	r3, r3, #31
 8004586:	d5e1      	bpl.n	800454c <__swbuf_r+0x2e>
 8004588:	2e0a      	cmp	r6, #10
 800458a:	d1df      	bne.n	800454c <__swbuf_r+0x2e>
 800458c:	4621      	mov	r1, r4
 800458e:	4628      	mov	r0, r5
 8004590:	f000 fda2 	bl	80050d8 <_fflush_r>
 8004594:	2800      	cmp	r0, #0
 8004596:	d0d9      	beq.n	800454c <__swbuf_r+0x2e>
 8004598:	e7d6      	b.n	8004548 <__swbuf_r+0x2a>
	...

0800459c <__swsetup_r>:
 800459c:	b538      	push	{r3, r4, r5, lr}
 800459e:	4b29      	ldr	r3, [pc, #164]	@ (8004644 <__swsetup_r+0xa8>)
 80045a0:	4605      	mov	r5, r0
 80045a2:	6818      	ldr	r0, [r3, #0]
 80045a4:	460c      	mov	r4, r1
 80045a6:	b118      	cbz	r0, 80045b0 <__swsetup_r+0x14>
 80045a8:	6a03      	ldr	r3, [r0, #32]
 80045aa:	b90b      	cbnz	r3, 80045b0 <__swsetup_r+0x14>
 80045ac:	f7ff fece 	bl	800434c <__sinit>
 80045b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80045b4:	0719      	lsls	r1, r3, #28
 80045b6:	d422      	bmi.n	80045fe <__swsetup_r+0x62>
 80045b8:	06da      	lsls	r2, r3, #27
 80045ba:	d407      	bmi.n	80045cc <__swsetup_r+0x30>
 80045bc:	2209      	movs	r2, #9
 80045be:	602a      	str	r2, [r5, #0]
 80045c0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80045c4:	81a3      	strh	r3, [r4, #12]
 80045c6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80045ca:	e033      	b.n	8004634 <__swsetup_r+0x98>
 80045cc:	0758      	lsls	r0, r3, #29
 80045ce:	d512      	bpl.n	80045f6 <__swsetup_r+0x5a>
 80045d0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80045d2:	b141      	cbz	r1, 80045e6 <__swsetup_r+0x4a>
 80045d4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80045d8:	4299      	cmp	r1, r3
 80045da:	d002      	beq.n	80045e2 <__swsetup_r+0x46>
 80045dc:	4628      	mov	r0, r5
 80045de:	f000 f929 	bl	8004834 <_free_r>
 80045e2:	2300      	movs	r3, #0
 80045e4:	6363      	str	r3, [r4, #52]	@ 0x34
 80045e6:	89a3      	ldrh	r3, [r4, #12]
 80045e8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80045ec:	81a3      	strh	r3, [r4, #12]
 80045ee:	2300      	movs	r3, #0
 80045f0:	6063      	str	r3, [r4, #4]
 80045f2:	6923      	ldr	r3, [r4, #16]
 80045f4:	6023      	str	r3, [r4, #0]
 80045f6:	89a3      	ldrh	r3, [r4, #12]
 80045f8:	f043 0308 	orr.w	r3, r3, #8
 80045fc:	81a3      	strh	r3, [r4, #12]
 80045fe:	6923      	ldr	r3, [r4, #16]
 8004600:	b94b      	cbnz	r3, 8004616 <__swsetup_r+0x7a>
 8004602:	89a3      	ldrh	r3, [r4, #12]
 8004604:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8004608:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800460c:	d003      	beq.n	8004616 <__swsetup_r+0x7a>
 800460e:	4621      	mov	r1, r4
 8004610:	4628      	mov	r0, r5
 8004612:	f000 fdc1 	bl	8005198 <__smakebuf_r>
 8004616:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800461a:	f013 0201 	ands.w	r2, r3, #1
 800461e:	d00a      	beq.n	8004636 <__swsetup_r+0x9a>
 8004620:	2200      	movs	r2, #0
 8004622:	60a2      	str	r2, [r4, #8]
 8004624:	6962      	ldr	r2, [r4, #20]
 8004626:	4252      	negs	r2, r2
 8004628:	61a2      	str	r2, [r4, #24]
 800462a:	6922      	ldr	r2, [r4, #16]
 800462c:	b942      	cbnz	r2, 8004640 <__swsetup_r+0xa4>
 800462e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8004632:	d1c5      	bne.n	80045c0 <__swsetup_r+0x24>
 8004634:	bd38      	pop	{r3, r4, r5, pc}
 8004636:	0799      	lsls	r1, r3, #30
 8004638:	bf58      	it	pl
 800463a:	6962      	ldrpl	r2, [r4, #20]
 800463c:	60a2      	str	r2, [r4, #8]
 800463e:	e7f4      	b.n	800462a <__swsetup_r+0x8e>
 8004640:	2000      	movs	r0, #0
 8004642:	e7f7      	b.n	8004634 <__swsetup_r+0x98>
 8004644:	2000001c 	.word	0x2000001c

08004648 <memset>:
 8004648:	4402      	add	r2, r0
 800464a:	4603      	mov	r3, r0
 800464c:	4293      	cmp	r3, r2
 800464e:	d100      	bne.n	8004652 <memset+0xa>
 8004650:	4770      	bx	lr
 8004652:	f803 1b01 	strb.w	r1, [r3], #1
 8004656:	e7f9      	b.n	800464c <memset+0x4>

08004658 <strtok>:
 8004658:	4b16      	ldr	r3, [pc, #88]	@ (80046b4 <strtok+0x5c>)
 800465a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800465e:	681f      	ldr	r7, [r3, #0]
 8004660:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 8004662:	4605      	mov	r5, r0
 8004664:	460e      	mov	r6, r1
 8004666:	b9ec      	cbnz	r4, 80046a4 <strtok+0x4c>
 8004668:	2050      	movs	r0, #80	@ 0x50
 800466a:	f000 f92d 	bl	80048c8 <malloc>
 800466e:	4602      	mov	r2, r0
 8004670:	6478      	str	r0, [r7, #68]	@ 0x44
 8004672:	b920      	cbnz	r0, 800467e <strtok+0x26>
 8004674:	4b10      	ldr	r3, [pc, #64]	@ (80046b8 <strtok+0x60>)
 8004676:	4811      	ldr	r0, [pc, #68]	@ (80046bc <strtok+0x64>)
 8004678:	215b      	movs	r1, #91	@ 0x5b
 800467a:	f000 f8bd 	bl	80047f8 <__assert_func>
 800467e:	e9c0 4400 	strd	r4, r4, [r0]
 8004682:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8004686:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800468a:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 800468e:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 8004692:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 8004696:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 800469a:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 800469e:	6184      	str	r4, [r0, #24]
 80046a0:	7704      	strb	r4, [r0, #28]
 80046a2:	6244      	str	r4, [r0, #36]	@ 0x24
 80046a4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80046a6:	4631      	mov	r1, r6
 80046a8:	4628      	mov	r0, r5
 80046aa:	2301      	movs	r3, #1
 80046ac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80046b0:	f000 b806 	b.w	80046c0 <__strtok_r>
 80046b4:	2000001c 	.word	0x2000001c
 80046b8:	080053b4 	.word	0x080053b4
 80046bc:	080053cb 	.word	0x080053cb

080046c0 <__strtok_r>:
 80046c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80046c2:	4604      	mov	r4, r0
 80046c4:	b908      	cbnz	r0, 80046ca <__strtok_r+0xa>
 80046c6:	6814      	ldr	r4, [r2, #0]
 80046c8:	b144      	cbz	r4, 80046dc <__strtok_r+0x1c>
 80046ca:	4620      	mov	r0, r4
 80046cc:	f814 5b01 	ldrb.w	r5, [r4], #1
 80046d0:	460f      	mov	r7, r1
 80046d2:	f817 6b01 	ldrb.w	r6, [r7], #1
 80046d6:	b91e      	cbnz	r6, 80046e0 <__strtok_r+0x20>
 80046d8:	b965      	cbnz	r5, 80046f4 <__strtok_r+0x34>
 80046da:	6015      	str	r5, [r2, #0]
 80046dc:	2000      	movs	r0, #0
 80046de:	e005      	b.n	80046ec <__strtok_r+0x2c>
 80046e0:	42b5      	cmp	r5, r6
 80046e2:	d1f6      	bne.n	80046d2 <__strtok_r+0x12>
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d1f0      	bne.n	80046ca <__strtok_r+0xa>
 80046e8:	6014      	str	r4, [r2, #0]
 80046ea:	7003      	strb	r3, [r0, #0]
 80046ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80046ee:	461c      	mov	r4, r3
 80046f0:	e00c      	b.n	800470c <__strtok_r+0x4c>
 80046f2:	b91d      	cbnz	r5, 80046fc <__strtok_r+0x3c>
 80046f4:	4627      	mov	r7, r4
 80046f6:	f814 3b01 	ldrb.w	r3, [r4], #1
 80046fa:	460e      	mov	r6, r1
 80046fc:	f816 5b01 	ldrb.w	r5, [r6], #1
 8004700:	42ab      	cmp	r3, r5
 8004702:	d1f6      	bne.n	80046f2 <__strtok_r+0x32>
 8004704:	2b00      	cmp	r3, #0
 8004706:	d0f2      	beq.n	80046ee <__strtok_r+0x2e>
 8004708:	2300      	movs	r3, #0
 800470a:	703b      	strb	r3, [r7, #0]
 800470c:	6014      	str	r4, [r2, #0]
 800470e:	e7ed      	b.n	80046ec <__strtok_r+0x2c>

08004710 <_close_r>:
 8004710:	b538      	push	{r3, r4, r5, lr}
 8004712:	4d06      	ldr	r5, [pc, #24]	@ (800472c <_close_r+0x1c>)
 8004714:	2300      	movs	r3, #0
 8004716:	4604      	mov	r4, r0
 8004718:	4608      	mov	r0, r1
 800471a:	602b      	str	r3, [r5, #0]
 800471c:	f7fc fd8c 	bl	8001238 <_close>
 8004720:	1c43      	adds	r3, r0, #1
 8004722:	d102      	bne.n	800472a <_close_r+0x1a>
 8004724:	682b      	ldr	r3, [r5, #0]
 8004726:	b103      	cbz	r3, 800472a <_close_r+0x1a>
 8004728:	6023      	str	r3, [r4, #0]
 800472a:	bd38      	pop	{r3, r4, r5, pc}
 800472c:	200002b8 	.word	0x200002b8

08004730 <_lseek_r>:
 8004730:	b538      	push	{r3, r4, r5, lr}
 8004732:	4d07      	ldr	r5, [pc, #28]	@ (8004750 <_lseek_r+0x20>)
 8004734:	4604      	mov	r4, r0
 8004736:	4608      	mov	r0, r1
 8004738:	4611      	mov	r1, r2
 800473a:	2200      	movs	r2, #0
 800473c:	602a      	str	r2, [r5, #0]
 800473e:	461a      	mov	r2, r3
 8004740:	f7fc fda1 	bl	8001286 <_lseek>
 8004744:	1c43      	adds	r3, r0, #1
 8004746:	d102      	bne.n	800474e <_lseek_r+0x1e>
 8004748:	682b      	ldr	r3, [r5, #0]
 800474a:	b103      	cbz	r3, 800474e <_lseek_r+0x1e>
 800474c:	6023      	str	r3, [r4, #0]
 800474e:	bd38      	pop	{r3, r4, r5, pc}
 8004750:	200002b8 	.word	0x200002b8

08004754 <_read_r>:
 8004754:	b538      	push	{r3, r4, r5, lr}
 8004756:	4d07      	ldr	r5, [pc, #28]	@ (8004774 <_read_r+0x20>)
 8004758:	4604      	mov	r4, r0
 800475a:	4608      	mov	r0, r1
 800475c:	4611      	mov	r1, r2
 800475e:	2200      	movs	r2, #0
 8004760:	602a      	str	r2, [r5, #0]
 8004762:	461a      	mov	r2, r3
 8004764:	f7fc fd2f 	bl	80011c6 <_read>
 8004768:	1c43      	adds	r3, r0, #1
 800476a:	d102      	bne.n	8004772 <_read_r+0x1e>
 800476c:	682b      	ldr	r3, [r5, #0]
 800476e:	b103      	cbz	r3, 8004772 <_read_r+0x1e>
 8004770:	6023      	str	r3, [r4, #0]
 8004772:	bd38      	pop	{r3, r4, r5, pc}
 8004774:	200002b8 	.word	0x200002b8

08004778 <_write_r>:
 8004778:	b538      	push	{r3, r4, r5, lr}
 800477a:	4d07      	ldr	r5, [pc, #28]	@ (8004798 <_write_r+0x20>)
 800477c:	4604      	mov	r4, r0
 800477e:	4608      	mov	r0, r1
 8004780:	4611      	mov	r1, r2
 8004782:	2200      	movs	r2, #0
 8004784:	602a      	str	r2, [r5, #0]
 8004786:	461a      	mov	r2, r3
 8004788:	f7fc fd3a 	bl	8001200 <_write>
 800478c:	1c43      	adds	r3, r0, #1
 800478e:	d102      	bne.n	8004796 <_write_r+0x1e>
 8004790:	682b      	ldr	r3, [r5, #0]
 8004792:	b103      	cbz	r3, 8004796 <_write_r+0x1e>
 8004794:	6023      	str	r3, [r4, #0]
 8004796:	bd38      	pop	{r3, r4, r5, pc}
 8004798:	200002b8 	.word	0x200002b8

0800479c <__errno>:
 800479c:	4b01      	ldr	r3, [pc, #4]	@ (80047a4 <__errno+0x8>)
 800479e:	6818      	ldr	r0, [r3, #0]
 80047a0:	4770      	bx	lr
 80047a2:	bf00      	nop
 80047a4:	2000001c 	.word	0x2000001c

080047a8 <__libc_init_array>:
 80047a8:	b570      	push	{r4, r5, r6, lr}
 80047aa:	4d0d      	ldr	r5, [pc, #52]	@ (80047e0 <__libc_init_array+0x38>)
 80047ac:	4c0d      	ldr	r4, [pc, #52]	@ (80047e4 <__libc_init_array+0x3c>)
 80047ae:	1b64      	subs	r4, r4, r5
 80047b0:	10a4      	asrs	r4, r4, #2
 80047b2:	2600      	movs	r6, #0
 80047b4:	42a6      	cmp	r6, r4
 80047b6:	d109      	bne.n	80047cc <__libc_init_array+0x24>
 80047b8:	4d0b      	ldr	r5, [pc, #44]	@ (80047e8 <__libc_init_array+0x40>)
 80047ba:	4c0c      	ldr	r4, [pc, #48]	@ (80047ec <__libc_init_array+0x44>)
 80047bc:	f000 fda6 	bl	800530c <_init>
 80047c0:	1b64      	subs	r4, r4, r5
 80047c2:	10a4      	asrs	r4, r4, #2
 80047c4:	2600      	movs	r6, #0
 80047c6:	42a6      	cmp	r6, r4
 80047c8:	d105      	bne.n	80047d6 <__libc_init_array+0x2e>
 80047ca:	bd70      	pop	{r4, r5, r6, pc}
 80047cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80047d0:	4798      	blx	r3
 80047d2:	3601      	adds	r6, #1
 80047d4:	e7ee      	b.n	80047b4 <__libc_init_array+0xc>
 80047d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80047da:	4798      	blx	r3
 80047dc:	3601      	adds	r6, #1
 80047de:	e7f2      	b.n	80047c6 <__libc_init_array+0x1e>
 80047e0:	0800549c 	.word	0x0800549c
 80047e4:	0800549c 	.word	0x0800549c
 80047e8:	0800549c 	.word	0x0800549c
 80047ec:	080054a0 	.word	0x080054a0

080047f0 <__retarget_lock_init_recursive>:
 80047f0:	4770      	bx	lr

080047f2 <__retarget_lock_acquire_recursive>:
 80047f2:	4770      	bx	lr

080047f4 <__retarget_lock_release_recursive>:
 80047f4:	4770      	bx	lr
	...

080047f8 <__assert_func>:
 80047f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80047fa:	4614      	mov	r4, r2
 80047fc:	461a      	mov	r2, r3
 80047fe:	4b09      	ldr	r3, [pc, #36]	@ (8004824 <__assert_func+0x2c>)
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	4605      	mov	r5, r0
 8004804:	68d8      	ldr	r0, [r3, #12]
 8004806:	b14c      	cbz	r4, 800481c <__assert_func+0x24>
 8004808:	4b07      	ldr	r3, [pc, #28]	@ (8004828 <__assert_func+0x30>)
 800480a:	9100      	str	r1, [sp, #0]
 800480c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8004810:	4906      	ldr	r1, [pc, #24]	@ (800482c <__assert_func+0x34>)
 8004812:	462b      	mov	r3, r5
 8004814:	f000 fc88 	bl	8005128 <fiprintf>
 8004818:	f000 fd2c 	bl	8005274 <abort>
 800481c:	4b04      	ldr	r3, [pc, #16]	@ (8004830 <__assert_func+0x38>)
 800481e:	461c      	mov	r4, r3
 8004820:	e7f3      	b.n	800480a <__assert_func+0x12>
 8004822:	bf00      	nop
 8004824:	2000001c 	.word	0x2000001c
 8004828:	08005425 	.word	0x08005425
 800482c:	08005432 	.word	0x08005432
 8004830:	08005460 	.word	0x08005460

08004834 <_free_r>:
 8004834:	b538      	push	{r3, r4, r5, lr}
 8004836:	4605      	mov	r5, r0
 8004838:	2900      	cmp	r1, #0
 800483a:	d041      	beq.n	80048c0 <_free_r+0x8c>
 800483c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004840:	1f0c      	subs	r4, r1, #4
 8004842:	2b00      	cmp	r3, #0
 8004844:	bfb8      	it	lt
 8004846:	18e4      	addlt	r4, r4, r3
 8004848:	f000 f8e8 	bl	8004a1c <__malloc_lock>
 800484c:	4a1d      	ldr	r2, [pc, #116]	@ (80048c4 <_free_r+0x90>)
 800484e:	6813      	ldr	r3, [r2, #0]
 8004850:	b933      	cbnz	r3, 8004860 <_free_r+0x2c>
 8004852:	6063      	str	r3, [r4, #4]
 8004854:	6014      	str	r4, [r2, #0]
 8004856:	4628      	mov	r0, r5
 8004858:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800485c:	f000 b8e4 	b.w	8004a28 <__malloc_unlock>
 8004860:	42a3      	cmp	r3, r4
 8004862:	d908      	bls.n	8004876 <_free_r+0x42>
 8004864:	6820      	ldr	r0, [r4, #0]
 8004866:	1821      	adds	r1, r4, r0
 8004868:	428b      	cmp	r3, r1
 800486a:	bf01      	itttt	eq
 800486c:	6819      	ldreq	r1, [r3, #0]
 800486e:	685b      	ldreq	r3, [r3, #4]
 8004870:	1809      	addeq	r1, r1, r0
 8004872:	6021      	streq	r1, [r4, #0]
 8004874:	e7ed      	b.n	8004852 <_free_r+0x1e>
 8004876:	461a      	mov	r2, r3
 8004878:	685b      	ldr	r3, [r3, #4]
 800487a:	b10b      	cbz	r3, 8004880 <_free_r+0x4c>
 800487c:	42a3      	cmp	r3, r4
 800487e:	d9fa      	bls.n	8004876 <_free_r+0x42>
 8004880:	6811      	ldr	r1, [r2, #0]
 8004882:	1850      	adds	r0, r2, r1
 8004884:	42a0      	cmp	r0, r4
 8004886:	d10b      	bne.n	80048a0 <_free_r+0x6c>
 8004888:	6820      	ldr	r0, [r4, #0]
 800488a:	4401      	add	r1, r0
 800488c:	1850      	adds	r0, r2, r1
 800488e:	4283      	cmp	r3, r0
 8004890:	6011      	str	r1, [r2, #0]
 8004892:	d1e0      	bne.n	8004856 <_free_r+0x22>
 8004894:	6818      	ldr	r0, [r3, #0]
 8004896:	685b      	ldr	r3, [r3, #4]
 8004898:	6053      	str	r3, [r2, #4]
 800489a:	4408      	add	r0, r1
 800489c:	6010      	str	r0, [r2, #0]
 800489e:	e7da      	b.n	8004856 <_free_r+0x22>
 80048a0:	d902      	bls.n	80048a8 <_free_r+0x74>
 80048a2:	230c      	movs	r3, #12
 80048a4:	602b      	str	r3, [r5, #0]
 80048a6:	e7d6      	b.n	8004856 <_free_r+0x22>
 80048a8:	6820      	ldr	r0, [r4, #0]
 80048aa:	1821      	adds	r1, r4, r0
 80048ac:	428b      	cmp	r3, r1
 80048ae:	bf04      	itt	eq
 80048b0:	6819      	ldreq	r1, [r3, #0]
 80048b2:	685b      	ldreq	r3, [r3, #4]
 80048b4:	6063      	str	r3, [r4, #4]
 80048b6:	bf04      	itt	eq
 80048b8:	1809      	addeq	r1, r1, r0
 80048ba:	6021      	streq	r1, [r4, #0]
 80048bc:	6054      	str	r4, [r2, #4]
 80048be:	e7ca      	b.n	8004856 <_free_r+0x22>
 80048c0:	bd38      	pop	{r3, r4, r5, pc}
 80048c2:	bf00      	nop
 80048c4:	200002c4 	.word	0x200002c4

080048c8 <malloc>:
 80048c8:	4b02      	ldr	r3, [pc, #8]	@ (80048d4 <malloc+0xc>)
 80048ca:	4601      	mov	r1, r0
 80048cc:	6818      	ldr	r0, [r3, #0]
 80048ce:	f000 b825 	b.w	800491c <_malloc_r>
 80048d2:	bf00      	nop
 80048d4:	2000001c 	.word	0x2000001c

080048d8 <sbrk_aligned>:
 80048d8:	b570      	push	{r4, r5, r6, lr}
 80048da:	4e0f      	ldr	r6, [pc, #60]	@ (8004918 <sbrk_aligned+0x40>)
 80048dc:	460c      	mov	r4, r1
 80048de:	6831      	ldr	r1, [r6, #0]
 80048e0:	4605      	mov	r5, r0
 80048e2:	b911      	cbnz	r1, 80048ea <sbrk_aligned+0x12>
 80048e4:	f000 fcb6 	bl	8005254 <_sbrk_r>
 80048e8:	6030      	str	r0, [r6, #0]
 80048ea:	4621      	mov	r1, r4
 80048ec:	4628      	mov	r0, r5
 80048ee:	f000 fcb1 	bl	8005254 <_sbrk_r>
 80048f2:	1c43      	adds	r3, r0, #1
 80048f4:	d103      	bne.n	80048fe <sbrk_aligned+0x26>
 80048f6:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80048fa:	4620      	mov	r0, r4
 80048fc:	bd70      	pop	{r4, r5, r6, pc}
 80048fe:	1cc4      	adds	r4, r0, #3
 8004900:	f024 0403 	bic.w	r4, r4, #3
 8004904:	42a0      	cmp	r0, r4
 8004906:	d0f8      	beq.n	80048fa <sbrk_aligned+0x22>
 8004908:	1a21      	subs	r1, r4, r0
 800490a:	4628      	mov	r0, r5
 800490c:	f000 fca2 	bl	8005254 <_sbrk_r>
 8004910:	3001      	adds	r0, #1
 8004912:	d1f2      	bne.n	80048fa <sbrk_aligned+0x22>
 8004914:	e7ef      	b.n	80048f6 <sbrk_aligned+0x1e>
 8004916:	bf00      	nop
 8004918:	200002c0 	.word	0x200002c0

0800491c <_malloc_r>:
 800491c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004920:	1ccd      	adds	r5, r1, #3
 8004922:	f025 0503 	bic.w	r5, r5, #3
 8004926:	3508      	adds	r5, #8
 8004928:	2d0c      	cmp	r5, #12
 800492a:	bf38      	it	cc
 800492c:	250c      	movcc	r5, #12
 800492e:	2d00      	cmp	r5, #0
 8004930:	4606      	mov	r6, r0
 8004932:	db01      	blt.n	8004938 <_malloc_r+0x1c>
 8004934:	42a9      	cmp	r1, r5
 8004936:	d904      	bls.n	8004942 <_malloc_r+0x26>
 8004938:	230c      	movs	r3, #12
 800493a:	6033      	str	r3, [r6, #0]
 800493c:	2000      	movs	r0, #0
 800493e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004942:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004a18 <_malloc_r+0xfc>
 8004946:	f000 f869 	bl	8004a1c <__malloc_lock>
 800494a:	f8d8 3000 	ldr.w	r3, [r8]
 800494e:	461c      	mov	r4, r3
 8004950:	bb44      	cbnz	r4, 80049a4 <_malloc_r+0x88>
 8004952:	4629      	mov	r1, r5
 8004954:	4630      	mov	r0, r6
 8004956:	f7ff ffbf 	bl	80048d8 <sbrk_aligned>
 800495a:	1c43      	adds	r3, r0, #1
 800495c:	4604      	mov	r4, r0
 800495e:	d158      	bne.n	8004a12 <_malloc_r+0xf6>
 8004960:	f8d8 4000 	ldr.w	r4, [r8]
 8004964:	4627      	mov	r7, r4
 8004966:	2f00      	cmp	r7, #0
 8004968:	d143      	bne.n	80049f2 <_malloc_r+0xd6>
 800496a:	2c00      	cmp	r4, #0
 800496c:	d04b      	beq.n	8004a06 <_malloc_r+0xea>
 800496e:	6823      	ldr	r3, [r4, #0]
 8004970:	4639      	mov	r1, r7
 8004972:	4630      	mov	r0, r6
 8004974:	eb04 0903 	add.w	r9, r4, r3
 8004978:	f000 fc6c 	bl	8005254 <_sbrk_r>
 800497c:	4581      	cmp	r9, r0
 800497e:	d142      	bne.n	8004a06 <_malloc_r+0xea>
 8004980:	6821      	ldr	r1, [r4, #0]
 8004982:	1a6d      	subs	r5, r5, r1
 8004984:	4629      	mov	r1, r5
 8004986:	4630      	mov	r0, r6
 8004988:	f7ff ffa6 	bl	80048d8 <sbrk_aligned>
 800498c:	3001      	adds	r0, #1
 800498e:	d03a      	beq.n	8004a06 <_malloc_r+0xea>
 8004990:	6823      	ldr	r3, [r4, #0]
 8004992:	442b      	add	r3, r5
 8004994:	6023      	str	r3, [r4, #0]
 8004996:	f8d8 3000 	ldr.w	r3, [r8]
 800499a:	685a      	ldr	r2, [r3, #4]
 800499c:	bb62      	cbnz	r2, 80049f8 <_malloc_r+0xdc>
 800499e:	f8c8 7000 	str.w	r7, [r8]
 80049a2:	e00f      	b.n	80049c4 <_malloc_r+0xa8>
 80049a4:	6822      	ldr	r2, [r4, #0]
 80049a6:	1b52      	subs	r2, r2, r5
 80049a8:	d420      	bmi.n	80049ec <_malloc_r+0xd0>
 80049aa:	2a0b      	cmp	r2, #11
 80049ac:	d917      	bls.n	80049de <_malloc_r+0xc2>
 80049ae:	1961      	adds	r1, r4, r5
 80049b0:	42a3      	cmp	r3, r4
 80049b2:	6025      	str	r5, [r4, #0]
 80049b4:	bf18      	it	ne
 80049b6:	6059      	strne	r1, [r3, #4]
 80049b8:	6863      	ldr	r3, [r4, #4]
 80049ba:	bf08      	it	eq
 80049bc:	f8c8 1000 	streq.w	r1, [r8]
 80049c0:	5162      	str	r2, [r4, r5]
 80049c2:	604b      	str	r3, [r1, #4]
 80049c4:	4630      	mov	r0, r6
 80049c6:	f000 f82f 	bl	8004a28 <__malloc_unlock>
 80049ca:	f104 000b 	add.w	r0, r4, #11
 80049ce:	1d23      	adds	r3, r4, #4
 80049d0:	f020 0007 	bic.w	r0, r0, #7
 80049d4:	1ac2      	subs	r2, r0, r3
 80049d6:	bf1c      	itt	ne
 80049d8:	1a1b      	subne	r3, r3, r0
 80049da:	50a3      	strne	r3, [r4, r2]
 80049dc:	e7af      	b.n	800493e <_malloc_r+0x22>
 80049de:	6862      	ldr	r2, [r4, #4]
 80049e0:	42a3      	cmp	r3, r4
 80049e2:	bf0c      	ite	eq
 80049e4:	f8c8 2000 	streq.w	r2, [r8]
 80049e8:	605a      	strne	r2, [r3, #4]
 80049ea:	e7eb      	b.n	80049c4 <_malloc_r+0xa8>
 80049ec:	4623      	mov	r3, r4
 80049ee:	6864      	ldr	r4, [r4, #4]
 80049f0:	e7ae      	b.n	8004950 <_malloc_r+0x34>
 80049f2:	463c      	mov	r4, r7
 80049f4:	687f      	ldr	r7, [r7, #4]
 80049f6:	e7b6      	b.n	8004966 <_malloc_r+0x4a>
 80049f8:	461a      	mov	r2, r3
 80049fa:	685b      	ldr	r3, [r3, #4]
 80049fc:	42a3      	cmp	r3, r4
 80049fe:	d1fb      	bne.n	80049f8 <_malloc_r+0xdc>
 8004a00:	2300      	movs	r3, #0
 8004a02:	6053      	str	r3, [r2, #4]
 8004a04:	e7de      	b.n	80049c4 <_malloc_r+0xa8>
 8004a06:	230c      	movs	r3, #12
 8004a08:	6033      	str	r3, [r6, #0]
 8004a0a:	4630      	mov	r0, r6
 8004a0c:	f000 f80c 	bl	8004a28 <__malloc_unlock>
 8004a10:	e794      	b.n	800493c <_malloc_r+0x20>
 8004a12:	6005      	str	r5, [r0, #0]
 8004a14:	e7d6      	b.n	80049c4 <_malloc_r+0xa8>
 8004a16:	bf00      	nop
 8004a18:	200002c4 	.word	0x200002c4

08004a1c <__malloc_lock>:
 8004a1c:	4801      	ldr	r0, [pc, #4]	@ (8004a24 <__malloc_lock+0x8>)
 8004a1e:	f7ff bee8 	b.w	80047f2 <__retarget_lock_acquire_recursive>
 8004a22:	bf00      	nop
 8004a24:	200002bc 	.word	0x200002bc

08004a28 <__malloc_unlock>:
 8004a28:	4801      	ldr	r0, [pc, #4]	@ (8004a30 <__malloc_unlock+0x8>)
 8004a2a:	f7ff bee3 	b.w	80047f4 <__retarget_lock_release_recursive>
 8004a2e:	bf00      	nop
 8004a30:	200002bc 	.word	0x200002bc

08004a34 <__sfputc_r>:
 8004a34:	6893      	ldr	r3, [r2, #8]
 8004a36:	3b01      	subs	r3, #1
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	b410      	push	{r4}
 8004a3c:	6093      	str	r3, [r2, #8]
 8004a3e:	da08      	bge.n	8004a52 <__sfputc_r+0x1e>
 8004a40:	6994      	ldr	r4, [r2, #24]
 8004a42:	42a3      	cmp	r3, r4
 8004a44:	db01      	blt.n	8004a4a <__sfputc_r+0x16>
 8004a46:	290a      	cmp	r1, #10
 8004a48:	d103      	bne.n	8004a52 <__sfputc_r+0x1e>
 8004a4a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004a4e:	f7ff bd66 	b.w	800451e <__swbuf_r>
 8004a52:	6813      	ldr	r3, [r2, #0]
 8004a54:	1c58      	adds	r0, r3, #1
 8004a56:	6010      	str	r0, [r2, #0]
 8004a58:	7019      	strb	r1, [r3, #0]
 8004a5a:	4608      	mov	r0, r1
 8004a5c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004a60:	4770      	bx	lr

08004a62 <__sfputs_r>:
 8004a62:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a64:	4606      	mov	r6, r0
 8004a66:	460f      	mov	r7, r1
 8004a68:	4614      	mov	r4, r2
 8004a6a:	18d5      	adds	r5, r2, r3
 8004a6c:	42ac      	cmp	r4, r5
 8004a6e:	d101      	bne.n	8004a74 <__sfputs_r+0x12>
 8004a70:	2000      	movs	r0, #0
 8004a72:	e007      	b.n	8004a84 <__sfputs_r+0x22>
 8004a74:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004a78:	463a      	mov	r2, r7
 8004a7a:	4630      	mov	r0, r6
 8004a7c:	f7ff ffda 	bl	8004a34 <__sfputc_r>
 8004a80:	1c43      	adds	r3, r0, #1
 8004a82:	d1f3      	bne.n	8004a6c <__sfputs_r+0xa>
 8004a84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004a88 <_vfiprintf_r>:
 8004a88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a8c:	460d      	mov	r5, r1
 8004a8e:	b09d      	sub	sp, #116	@ 0x74
 8004a90:	4614      	mov	r4, r2
 8004a92:	4698      	mov	r8, r3
 8004a94:	4606      	mov	r6, r0
 8004a96:	b118      	cbz	r0, 8004aa0 <_vfiprintf_r+0x18>
 8004a98:	6a03      	ldr	r3, [r0, #32]
 8004a9a:	b90b      	cbnz	r3, 8004aa0 <_vfiprintf_r+0x18>
 8004a9c:	f7ff fc56 	bl	800434c <__sinit>
 8004aa0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004aa2:	07d9      	lsls	r1, r3, #31
 8004aa4:	d405      	bmi.n	8004ab2 <_vfiprintf_r+0x2a>
 8004aa6:	89ab      	ldrh	r3, [r5, #12]
 8004aa8:	059a      	lsls	r2, r3, #22
 8004aaa:	d402      	bmi.n	8004ab2 <_vfiprintf_r+0x2a>
 8004aac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004aae:	f7ff fea0 	bl	80047f2 <__retarget_lock_acquire_recursive>
 8004ab2:	89ab      	ldrh	r3, [r5, #12]
 8004ab4:	071b      	lsls	r3, r3, #28
 8004ab6:	d501      	bpl.n	8004abc <_vfiprintf_r+0x34>
 8004ab8:	692b      	ldr	r3, [r5, #16]
 8004aba:	b99b      	cbnz	r3, 8004ae4 <_vfiprintf_r+0x5c>
 8004abc:	4629      	mov	r1, r5
 8004abe:	4630      	mov	r0, r6
 8004ac0:	f7ff fd6c 	bl	800459c <__swsetup_r>
 8004ac4:	b170      	cbz	r0, 8004ae4 <_vfiprintf_r+0x5c>
 8004ac6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004ac8:	07dc      	lsls	r4, r3, #31
 8004aca:	d504      	bpl.n	8004ad6 <_vfiprintf_r+0x4e>
 8004acc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004ad0:	b01d      	add	sp, #116	@ 0x74
 8004ad2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ad6:	89ab      	ldrh	r3, [r5, #12]
 8004ad8:	0598      	lsls	r0, r3, #22
 8004ada:	d4f7      	bmi.n	8004acc <_vfiprintf_r+0x44>
 8004adc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004ade:	f7ff fe89 	bl	80047f4 <__retarget_lock_release_recursive>
 8004ae2:	e7f3      	b.n	8004acc <_vfiprintf_r+0x44>
 8004ae4:	2300      	movs	r3, #0
 8004ae6:	9309      	str	r3, [sp, #36]	@ 0x24
 8004ae8:	2320      	movs	r3, #32
 8004aea:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004aee:	f8cd 800c 	str.w	r8, [sp, #12]
 8004af2:	2330      	movs	r3, #48	@ 0x30
 8004af4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8004ca4 <_vfiprintf_r+0x21c>
 8004af8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004afc:	f04f 0901 	mov.w	r9, #1
 8004b00:	4623      	mov	r3, r4
 8004b02:	469a      	mov	sl, r3
 8004b04:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004b08:	b10a      	cbz	r2, 8004b0e <_vfiprintf_r+0x86>
 8004b0a:	2a25      	cmp	r2, #37	@ 0x25
 8004b0c:	d1f9      	bne.n	8004b02 <_vfiprintf_r+0x7a>
 8004b0e:	ebba 0b04 	subs.w	fp, sl, r4
 8004b12:	d00b      	beq.n	8004b2c <_vfiprintf_r+0xa4>
 8004b14:	465b      	mov	r3, fp
 8004b16:	4622      	mov	r2, r4
 8004b18:	4629      	mov	r1, r5
 8004b1a:	4630      	mov	r0, r6
 8004b1c:	f7ff ffa1 	bl	8004a62 <__sfputs_r>
 8004b20:	3001      	adds	r0, #1
 8004b22:	f000 80a7 	beq.w	8004c74 <_vfiprintf_r+0x1ec>
 8004b26:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004b28:	445a      	add	r2, fp
 8004b2a:	9209      	str	r2, [sp, #36]	@ 0x24
 8004b2c:	f89a 3000 	ldrb.w	r3, [sl]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	f000 809f 	beq.w	8004c74 <_vfiprintf_r+0x1ec>
 8004b36:	2300      	movs	r3, #0
 8004b38:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004b3c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004b40:	f10a 0a01 	add.w	sl, sl, #1
 8004b44:	9304      	str	r3, [sp, #16]
 8004b46:	9307      	str	r3, [sp, #28]
 8004b48:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004b4c:	931a      	str	r3, [sp, #104]	@ 0x68
 8004b4e:	4654      	mov	r4, sl
 8004b50:	2205      	movs	r2, #5
 8004b52:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004b56:	4853      	ldr	r0, [pc, #332]	@ (8004ca4 <_vfiprintf_r+0x21c>)
 8004b58:	f7fb fb4a 	bl	80001f0 <memchr>
 8004b5c:	9a04      	ldr	r2, [sp, #16]
 8004b5e:	b9d8      	cbnz	r0, 8004b98 <_vfiprintf_r+0x110>
 8004b60:	06d1      	lsls	r1, r2, #27
 8004b62:	bf44      	itt	mi
 8004b64:	2320      	movmi	r3, #32
 8004b66:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004b6a:	0713      	lsls	r3, r2, #28
 8004b6c:	bf44      	itt	mi
 8004b6e:	232b      	movmi	r3, #43	@ 0x2b
 8004b70:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004b74:	f89a 3000 	ldrb.w	r3, [sl]
 8004b78:	2b2a      	cmp	r3, #42	@ 0x2a
 8004b7a:	d015      	beq.n	8004ba8 <_vfiprintf_r+0x120>
 8004b7c:	9a07      	ldr	r2, [sp, #28]
 8004b7e:	4654      	mov	r4, sl
 8004b80:	2000      	movs	r0, #0
 8004b82:	f04f 0c0a 	mov.w	ip, #10
 8004b86:	4621      	mov	r1, r4
 8004b88:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004b8c:	3b30      	subs	r3, #48	@ 0x30
 8004b8e:	2b09      	cmp	r3, #9
 8004b90:	d94b      	bls.n	8004c2a <_vfiprintf_r+0x1a2>
 8004b92:	b1b0      	cbz	r0, 8004bc2 <_vfiprintf_r+0x13a>
 8004b94:	9207      	str	r2, [sp, #28]
 8004b96:	e014      	b.n	8004bc2 <_vfiprintf_r+0x13a>
 8004b98:	eba0 0308 	sub.w	r3, r0, r8
 8004b9c:	fa09 f303 	lsl.w	r3, r9, r3
 8004ba0:	4313      	orrs	r3, r2
 8004ba2:	9304      	str	r3, [sp, #16]
 8004ba4:	46a2      	mov	sl, r4
 8004ba6:	e7d2      	b.n	8004b4e <_vfiprintf_r+0xc6>
 8004ba8:	9b03      	ldr	r3, [sp, #12]
 8004baa:	1d19      	adds	r1, r3, #4
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	9103      	str	r1, [sp, #12]
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	bfbb      	ittet	lt
 8004bb4:	425b      	neglt	r3, r3
 8004bb6:	f042 0202 	orrlt.w	r2, r2, #2
 8004bba:	9307      	strge	r3, [sp, #28]
 8004bbc:	9307      	strlt	r3, [sp, #28]
 8004bbe:	bfb8      	it	lt
 8004bc0:	9204      	strlt	r2, [sp, #16]
 8004bc2:	7823      	ldrb	r3, [r4, #0]
 8004bc4:	2b2e      	cmp	r3, #46	@ 0x2e
 8004bc6:	d10a      	bne.n	8004bde <_vfiprintf_r+0x156>
 8004bc8:	7863      	ldrb	r3, [r4, #1]
 8004bca:	2b2a      	cmp	r3, #42	@ 0x2a
 8004bcc:	d132      	bne.n	8004c34 <_vfiprintf_r+0x1ac>
 8004bce:	9b03      	ldr	r3, [sp, #12]
 8004bd0:	1d1a      	adds	r2, r3, #4
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	9203      	str	r2, [sp, #12]
 8004bd6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004bda:	3402      	adds	r4, #2
 8004bdc:	9305      	str	r3, [sp, #20]
 8004bde:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8004cb4 <_vfiprintf_r+0x22c>
 8004be2:	7821      	ldrb	r1, [r4, #0]
 8004be4:	2203      	movs	r2, #3
 8004be6:	4650      	mov	r0, sl
 8004be8:	f7fb fb02 	bl	80001f0 <memchr>
 8004bec:	b138      	cbz	r0, 8004bfe <_vfiprintf_r+0x176>
 8004bee:	9b04      	ldr	r3, [sp, #16]
 8004bf0:	eba0 000a 	sub.w	r0, r0, sl
 8004bf4:	2240      	movs	r2, #64	@ 0x40
 8004bf6:	4082      	lsls	r2, r0
 8004bf8:	4313      	orrs	r3, r2
 8004bfa:	3401      	adds	r4, #1
 8004bfc:	9304      	str	r3, [sp, #16]
 8004bfe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004c02:	4829      	ldr	r0, [pc, #164]	@ (8004ca8 <_vfiprintf_r+0x220>)
 8004c04:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004c08:	2206      	movs	r2, #6
 8004c0a:	f7fb faf1 	bl	80001f0 <memchr>
 8004c0e:	2800      	cmp	r0, #0
 8004c10:	d03f      	beq.n	8004c92 <_vfiprintf_r+0x20a>
 8004c12:	4b26      	ldr	r3, [pc, #152]	@ (8004cac <_vfiprintf_r+0x224>)
 8004c14:	bb1b      	cbnz	r3, 8004c5e <_vfiprintf_r+0x1d6>
 8004c16:	9b03      	ldr	r3, [sp, #12]
 8004c18:	3307      	adds	r3, #7
 8004c1a:	f023 0307 	bic.w	r3, r3, #7
 8004c1e:	3308      	adds	r3, #8
 8004c20:	9303      	str	r3, [sp, #12]
 8004c22:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004c24:	443b      	add	r3, r7
 8004c26:	9309      	str	r3, [sp, #36]	@ 0x24
 8004c28:	e76a      	b.n	8004b00 <_vfiprintf_r+0x78>
 8004c2a:	fb0c 3202 	mla	r2, ip, r2, r3
 8004c2e:	460c      	mov	r4, r1
 8004c30:	2001      	movs	r0, #1
 8004c32:	e7a8      	b.n	8004b86 <_vfiprintf_r+0xfe>
 8004c34:	2300      	movs	r3, #0
 8004c36:	3401      	adds	r4, #1
 8004c38:	9305      	str	r3, [sp, #20]
 8004c3a:	4619      	mov	r1, r3
 8004c3c:	f04f 0c0a 	mov.w	ip, #10
 8004c40:	4620      	mov	r0, r4
 8004c42:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004c46:	3a30      	subs	r2, #48	@ 0x30
 8004c48:	2a09      	cmp	r2, #9
 8004c4a:	d903      	bls.n	8004c54 <_vfiprintf_r+0x1cc>
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d0c6      	beq.n	8004bde <_vfiprintf_r+0x156>
 8004c50:	9105      	str	r1, [sp, #20]
 8004c52:	e7c4      	b.n	8004bde <_vfiprintf_r+0x156>
 8004c54:	fb0c 2101 	mla	r1, ip, r1, r2
 8004c58:	4604      	mov	r4, r0
 8004c5a:	2301      	movs	r3, #1
 8004c5c:	e7f0      	b.n	8004c40 <_vfiprintf_r+0x1b8>
 8004c5e:	ab03      	add	r3, sp, #12
 8004c60:	9300      	str	r3, [sp, #0]
 8004c62:	462a      	mov	r2, r5
 8004c64:	4b12      	ldr	r3, [pc, #72]	@ (8004cb0 <_vfiprintf_r+0x228>)
 8004c66:	a904      	add	r1, sp, #16
 8004c68:	4630      	mov	r0, r6
 8004c6a:	f3af 8000 	nop.w
 8004c6e:	4607      	mov	r7, r0
 8004c70:	1c78      	adds	r0, r7, #1
 8004c72:	d1d6      	bne.n	8004c22 <_vfiprintf_r+0x19a>
 8004c74:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004c76:	07d9      	lsls	r1, r3, #31
 8004c78:	d405      	bmi.n	8004c86 <_vfiprintf_r+0x1fe>
 8004c7a:	89ab      	ldrh	r3, [r5, #12]
 8004c7c:	059a      	lsls	r2, r3, #22
 8004c7e:	d402      	bmi.n	8004c86 <_vfiprintf_r+0x1fe>
 8004c80:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004c82:	f7ff fdb7 	bl	80047f4 <__retarget_lock_release_recursive>
 8004c86:	89ab      	ldrh	r3, [r5, #12]
 8004c88:	065b      	lsls	r3, r3, #25
 8004c8a:	f53f af1f 	bmi.w	8004acc <_vfiprintf_r+0x44>
 8004c8e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004c90:	e71e      	b.n	8004ad0 <_vfiprintf_r+0x48>
 8004c92:	ab03      	add	r3, sp, #12
 8004c94:	9300      	str	r3, [sp, #0]
 8004c96:	462a      	mov	r2, r5
 8004c98:	4b05      	ldr	r3, [pc, #20]	@ (8004cb0 <_vfiprintf_r+0x228>)
 8004c9a:	a904      	add	r1, sp, #16
 8004c9c:	4630      	mov	r0, r6
 8004c9e:	f000 f879 	bl	8004d94 <_printf_i>
 8004ca2:	e7e4      	b.n	8004c6e <_vfiprintf_r+0x1e6>
 8004ca4:	08005461 	.word	0x08005461
 8004ca8:	0800546b 	.word	0x0800546b
 8004cac:	00000000 	.word	0x00000000
 8004cb0:	08004a63 	.word	0x08004a63
 8004cb4:	08005467 	.word	0x08005467

08004cb8 <_printf_common>:
 8004cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004cbc:	4616      	mov	r6, r2
 8004cbe:	4698      	mov	r8, r3
 8004cc0:	688a      	ldr	r2, [r1, #8]
 8004cc2:	690b      	ldr	r3, [r1, #16]
 8004cc4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004cc8:	4293      	cmp	r3, r2
 8004cca:	bfb8      	it	lt
 8004ccc:	4613      	movlt	r3, r2
 8004cce:	6033      	str	r3, [r6, #0]
 8004cd0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004cd4:	4607      	mov	r7, r0
 8004cd6:	460c      	mov	r4, r1
 8004cd8:	b10a      	cbz	r2, 8004cde <_printf_common+0x26>
 8004cda:	3301      	adds	r3, #1
 8004cdc:	6033      	str	r3, [r6, #0]
 8004cde:	6823      	ldr	r3, [r4, #0]
 8004ce0:	0699      	lsls	r1, r3, #26
 8004ce2:	bf42      	ittt	mi
 8004ce4:	6833      	ldrmi	r3, [r6, #0]
 8004ce6:	3302      	addmi	r3, #2
 8004ce8:	6033      	strmi	r3, [r6, #0]
 8004cea:	6825      	ldr	r5, [r4, #0]
 8004cec:	f015 0506 	ands.w	r5, r5, #6
 8004cf0:	d106      	bne.n	8004d00 <_printf_common+0x48>
 8004cf2:	f104 0a19 	add.w	sl, r4, #25
 8004cf6:	68e3      	ldr	r3, [r4, #12]
 8004cf8:	6832      	ldr	r2, [r6, #0]
 8004cfa:	1a9b      	subs	r3, r3, r2
 8004cfc:	42ab      	cmp	r3, r5
 8004cfe:	dc26      	bgt.n	8004d4e <_printf_common+0x96>
 8004d00:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004d04:	6822      	ldr	r2, [r4, #0]
 8004d06:	3b00      	subs	r3, #0
 8004d08:	bf18      	it	ne
 8004d0a:	2301      	movne	r3, #1
 8004d0c:	0692      	lsls	r2, r2, #26
 8004d0e:	d42b      	bmi.n	8004d68 <_printf_common+0xb0>
 8004d10:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004d14:	4641      	mov	r1, r8
 8004d16:	4638      	mov	r0, r7
 8004d18:	47c8      	blx	r9
 8004d1a:	3001      	adds	r0, #1
 8004d1c:	d01e      	beq.n	8004d5c <_printf_common+0xa4>
 8004d1e:	6823      	ldr	r3, [r4, #0]
 8004d20:	6922      	ldr	r2, [r4, #16]
 8004d22:	f003 0306 	and.w	r3, r3, #6
 8004d26:	2b04      	cmp	r3, #4
 8004d28:	bf02      	ittt	eq
 8004d2a:	68e5      	ldreq	r5, [r4, #12]
 8004d2c:	6833      	ldreq	r3, [r6, #0]
 8004d2e:	1aed      	subeq	r5, r5, r3
 8004d30:	68a3      	ldr	r3, [r4, #8]
 8004d32:	bf0c      	ite	eq
 8004d34:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004d38:	2500      	movne	r5, #0
 8004d3a:	4293      	cmp	r3, r2
 8004d3c:	bfc4      	itt	gt
 8004d3e:	1a9b      	subgt	r3, r3, r2
 8004d40:	18ed      	addgt	r5, r5, r3
 8004d42:	2600      	movs	r6, #0
 8004d44:	341a      	adds	r4, #26
 8004d46:	42b5      	cmp	r5, r6
 8004d48:	d11a      	bne.n	8004d80 <_printf_common+0xc8>
 8004d4a:	2000      	movs	r0, #0
 8004d4c:	e008      	b.n	8004d60 <_printf_common+0xa8>
 8004d4e:	2301      	movs	r3, #1
 8004d50:	4652      	mov	r2, sl
 8004d52:	4641      	mov	r1, r8
 8004d54:	4638      	mov	r0, r7
 8004d56:	47c8      	blx	r9
 8004d58:	3001      	adds	r0, #1
 8004d5a:	d103      	bne.n	8004d64 <_printf_common+0xac>
 8004d5c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004d60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d64:	3501      	adds	r5, #1
 8004d66:	e7c6      	b.n	8004cf6 <_printf_common+0x3e>
 8004d68:	18e1      	adds	r1, r4, r3
 8004d6a:	1c5a      	adds	r2, r3, #1
 8004d6c:	2030      	movs	r0, #48	@ 0x30
 8004d6e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004d72:	4422      	add	r2, r4
 8004d74:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004d78:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004d7c:	3302      	adds	r3, #2
 8004d7e:	e7c7      	b.n	8004d10 <_printf_common+0x58>
 8004d80:	2301      	movs	r3, #1
 8004d82:	4622      	mov	r2, r4
 8004d84:	4641      	mov	r1, r8
 8004d86:	4638      	mov	r0, r7
 8004d88:	47c8      	blx	r9
 8004d8a:	3001      	adds	r0, #1
 8004d8c:	d0e6      	beq.n	8004d5c <_printf_common+0xa4>
 8004d8e:	3601      	adds	r6, #1
 8004d90:	e7d9      	b.n	8004d46 <_printf_common+0x8e>
	...

08004d94 <_printf_i>:
 8004d94:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004d98:	7e0f      	ldrb	r7, [r1, #24]
 8004d9a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004d9c:	2f78      	cmp	r7, #120	@ 0x78
 8004d9e:	4691      	mov	r9, r2
 8004da0:	4680      	mov	r8, r0
 8004da2:	460c      	mov	r4, r1
 8004da4:	469a      	mov	sl, r3
 8004da6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004daa:	d807      	bhi.n	8004dbc <_printf_i+0x28>
 8004dac:	2f62      	cmp	r7, #98	@ 0x62
 8004dae:	d80a      	bhi.n	8004dc6 <_printf_i+0x32>
 8004db0:	2f00      	cmp	r7, #0
 8004db2:	f000 80d1 	beq.w	8004f58 <_printf_i+0x1c4>
 8004db6:	2f58      	cmp	r7, #88	@ 0x58
 8004db8:	f000 80b8 	beq.w	8004f2c <_printf_i+0x198>
 8004dbc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004dc0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004dc4:	e03a      	b.n	8004e3c <_printf_i+0xa8>
 8004dc6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004dca:	2b15      	cmp	r3, #21
 8004dcc:	d8f6      	bhi.n	8004dbc <_printf_i+0x28>
 8004dce:	a101      	add	r1, pc, #4	@ (adr r1, 8004dd4 <_printf_i+0x40>)
 8004dd0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004dd4:	08004e2d 	.word	0x08004e2d
 8004dd8:	08004e41 	.word	0x08004e41
 8004ddc:	08004dbd 	.word	0x08004dbd
 8004de0:	08004dbd 	.word	0x08004dbd
 8004de4:	08004dbd 	.word	0x08004dbd
 8004de8:	08004dbd 	.word	0x08004dbd
 8004dec:	08004e41 	.word	0x08004e41
 8004df0:	08004dbd 	.word	0x08004dbd
 8004df4:	08004dbd 	.word	0x08004dbd
 8004df8:	08004dbd 	.word	0x08004dbd
 8004dfc:	08004dbd 	.word	0x08004dbd
 8004e00:	08004f3f 	.word	0x08004f3f
 8004e04:	08004e6b 	.word	0x08004e6b
 8004e08:	08004ef9 	.word	0x08004ef9
 8004e0c:	08004dbd 	.word	0x08004dbd
 8004e10:	08004dbd 	.word	0x08004dbd
 8004e14:	08004f61 	.word	0x08004f61
 8004e18:	08004dbd 	.word	0x08004dbd
 8004e1c:	08004e6b 	.word	0x08004e6b
 8004e20:	08004dbd 	.word	0x08004dbd
 8004e24:	08004dbd 	.word	0x08004dbd
 8004e28:	08004f01 	.word	0x08004f01
 8004e2c:	6833      	ldr	r3, [r6, #0]
 8004e2e:	1d1a      	adds	r2, r3, #4
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	6032      	str	r2, [r6, #0]
 8004e34:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004e38:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004e3c:	2301      	movs	r3, #1
 8004e3e:	e09c      	b.n	8004f7a <_printf_i+0x1e6>
 8004e40:	6833      	ldr	r3, [r6, #0]
 8004e42:	6820      	ldr	r0, [r4, #0]
 8004e44:	1d19      	adds	r1, r3, #4
 8004e46:	6031      	str	r1, [r6, #0]
 8004e48:	0606      	lsls	r6, r0, #24
 8004e4a:	d501      	bpl.n	8004e50 <_printf_i+0xbc>
 8004e4c:	681d      	ldr	r5, [r3, #0]
 8004e4e:	e003      	b.n	8004e58 <_printf_i+0xc4>
 8004e50:	0645      	lsls	r5, r0, #25
 8004e52:	d5fb      	bpl.n	8004e4c <_printf_i+0xb8>
 8004e54:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004e58:	2d00      	cmp	r5, #0
 8004e5a:	da03      	bge.n	8004e64 <_printf_i+0xd0>
 8004e5c:	232d      	movs	r3, #45	@ 0x2d
 8004e5e:	426d      	negs	r5, r5
 8004e60:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004e64:	4858      	ldr	r0, [pc, #352]	@ (8004fc8 <_printf_i+0x234>)
 8004e66:	230a      	movs	r3, #10
 8004e68:	e011      	b.n	8004e8e <_printf_i+0xfa>
 8004e6a:	6821      	ldr	r1, [r4, #0]
 8004e6c:	6833      	ldr	r3, [r6, #0]
 8004e6e:	0608      	lsls	r0, r1, #24
 8004e70:	f853 5b04 	ldr.w	r5, [r3], #4
 8004e74:	d402      	bmi.n	8004e7c <_printf_i+0xe8>
 8004e76:	0649      	lsls	r1, r1, #25
 8004e78:	bf48      	it	mi
 8004e7a:	b2ad      	uxthmi	r5, r5
 8004e7c:	2f6f      	cmp	r7, #111	@ 0x6f
 8004e7e:	4852      	ldr	r0, [pc, #328]	@ (8004fc8 <_printf_i+0x234>)
 8004e80:	6033      	str	r3, [r6, #0]
 8004e82:	bf14      	ite	ne
 8004e84:	230a      	movne	r3, #10
 8004e86:	2308      	moveq	r3, #8
 8004e88:	2100      	movs	r1, #0
 8004e8a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004e8e:	6866      	ldr	r6, [r4, #4]
 8004e90:	60a6      	str	r6, [r4, #8]
 8004e92:	2e00      	cmp	r6, #0
 8004e94:	db05      	blt.n	8004ea2 <_printf_i+0x10e>
 8004e96:	6821      	ldr	r1, [r4, #0]
 8004e98:	432e      	orrs	r6, r5
 8004e9a:	f021 0104 	bic.w	r1, r1, #4
 8004e9e:	6021      	str	r1, [r4, #0]
 8004ea0:	d04b      	beq.n	8004f3a <_printf_i+0x1a6>
 8004ea2:	4616      	mov	r6, r2
 8004ea4:	fbb5 f1f3 	udiv	r1, r5, r3
 8004ea8:	fb03 5711 	mls	r7, r3, r1, r5
 8004eac:	5dc7      	ldrb	r7, [r0, r7]
 8004eae:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004eb2:	462f      	mov	r7, r5
 8004eb4:	42bb      	cmp	r3, r7
 8004eb6:	460d      	mov	r5, r1
 8004eb8:	d9f4      	bls.n	8004ea4 <_printf_i+0x110>
 8004eba:	2b08      	cmp	r3, #8
 8004ebc:	d10b      	bne.n	8004ed6 <_printf_i+0x142>
 8004ebe:	6823      	ldr	r3, [r4, #0]
 8004ec0:	07df      	lsls	r7, r3, #31
 8004ec2:	d508      	bpl.n	8004ed6 <_printf_i+0x142>
 8004ec4:	6923      	ldr	r3, [r4, #16]
 8004ec6:	6861      	ldr	r1, [r4, #4]
 8004ec8:	4299      	cmp	r1, r3
 8004eca:	bfde      	ittt	le
 8004ecc:	2330      	movle	r3, #48	@ 0x30
 8004ece:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004ed2:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8004ed6:	1b92      	subs	r2, r2, r6
 8004ed8:	6122      	str	r2, [r4, #16]
 8004eda:	f8cd a000 	str.w	sl, [sp]
 8004ede:	464b      	mov	r3, r9
 8004ee0:	aa03      	add	r2, sp, #12
 8004ee2:	4621      	mov	r1, r4
 8004ee4:	4640      	mov	r0, r8
 8004ee6:	f7ff fee7 	bl	8004cb8 <_printf_common>
 8004eea:	3001      	adds	r0, #1
 8004eec:	d14a      	bne.n	8004f84 <_printf_i+0x1f0>
 8004eee:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004ef2:	b004      	add	sp, #16
 8004ef4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ef8:	6823      	ldr	r3, [r4, #0]
 8004efa:	f043 0320 	orr.w	r3, r3, #32
 8004efe:	6023      	str	r3, [r4, #0]
 8004f00:	4832      	ldr	r0, [pc, #200]	@ (8004fcc <_printf_i+0x238>)
 8004f02:	2778      	movs	r7, #120	@ 0x78
 8004f04:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004f08:	6823      	ldr	r3, [r4, #0]
 8004f0a:	6831      	ldr	r1, [r6, #0]
 8004f0c:	061f      	lsls	r7, r3, #24
 8004f0e:	f851 5b04 	ldr.w	r5, [r1], #4
 8004f12:	d402      	bmi.n	8004f1a <_printf_i+0x186>
 8004f14:	065f      	lsls	r7, r3, #25
 8004f16:	bf48      	it	mi
 8004f18:	b2ad      	uxthmi	r5, r5
 8004f1a:	6031      	str	r1, [r6, #0]
 8004f1c:	07d9      	lsls	r1, r3, #31
 8004f1e:	bf44      	itt	mi
 8004f20:	f043 0320 	orrmi.w	r3, r3, #32
 8004f24:	6023      	strmi	r3, [r4, #0]
 8004f26:	b11d      	cbz	r5, 8004f30 <_printf_i+0x19c>
 8004f28:	2310      	movs	r3, #16
 8004f2a:	e7ad      	b.n	8004e88 <_printf_i+0xf4>
 8004f2c:	4826      	ldr	r0, [pc, #152]	@ (8004fc8 <_printf_i+0x234>)
 8004f2e:	e7e9      	b.n	8004f04 <_printf_i+0x170>
 8004f30:	6823      	ldr	r3, [r4, #0]
 8004f32:	f023 0320 	bic.w	r3, r3, #32
 8004f36:	6023      	str	r3, [r4, #0]
 8004f38:	e7f6      	b.n	8004f28 <_printf_i+0x194>
 8004f3a:	4616      	mov	r6, r2
 8004f3c:	e7bd      	b.n	8004eba <_printf_i+0x126>
 8004f3e:	6833      	ldr	r3, [r6, #0]
 8004f40:	6825      	ldr	r5, [r4, #0]
 8004f42:	6961      	ldr	r1, [r4, #20]
 8004f44:	1d18      	adds	r0, r3, #4
 8004f46:	6030      	str	r0, [r6, #0]
 8004f48:	062e      	lsls	r6, r5, #24
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	d501      	bpl.n	8004f52 <_printf_i+0x1be>
 8004f4e:	6019      	str	r1, [r3, #0]
 8004f50:	e002      	b.n	8004f58 <_printf_i+0x1c4>
 8004f52:	0668      	lsls	r0, r5, #25
 8004f54:	d5fb      	bpl.n	8004f4e <_printf_i+0x1ba>
 8004f56:	8019      	strh	r1, [r3, #0]
 8004f58:	2300      	movs	r3, #0
 8004f5a:	6123      	str	r3, [r4, #16]
 8004f5c:	4616      	mov	r6, r2
 8004f5e:	e7bc      	b.n	8004eda <_printf_i+0x146>
 8004f60:	6833      	ldr	r3, [r6, #0]
 8004f62:	1d1a      	adds	r2, r3, #4
 8004f64:	6032      	str	r2, [r6, #0]
 8004f66:	681e      	ldr	r6, [r3, #0]
 8004f68:	6862      	ldr	r2, [r4, #4]
 8004f6a:	2100      	movs	r1, #0
 8004f6c:	4630      	mov	r0, r6
 8004f6e:	f7fb f93f 	bl	80001f0 <memchr>
 8004f72:	b108      	cbz	r0, 8004f78 <_printf_i+0x1e4>
 8004f74:	1b80      	subs	r0, r0, r6
 8004f76:	6060      	str	r0, [r4, #4]
 8004f78:	6863      	ldr	r3, [r4, #4]
 8004f7a:	6123      	str	r3, [r4, #16]
 8004f7c:	2300      	movs	r3, #0
 8004f7e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004f82:	e7aa      	b.n	8004eda <_printf_i+0x146>
 8004f84:	6923      	ldr	r3, [r4, #16]
 8004f86:	4632      	mov	r2, r6
 8004f88:	4649      	mov	r1, r9
 8004f8a:	4640      	mov	r0, r8
 8004f8c:	47d0      	blx	sl
 8004f8e:	3001      	adds	r0, #1
 8004f90:	d0ad      	beq.n	8004eee <_printf_i+0x15a>
 8004f92:	6823      	ldr	r3, [r4, #0]
 8004f94:	079b      	lsls	r3, r3, #30
 8004f96:	d413      	bmi.n	8004fc0 <_printf_i+0x22c>
 8004f98:	68e0      	ldr	r0, [r4, #12]
 8004f9a:	9b03      	ldr	r3, [sp, #12]
 8004f9c:	4298      	cmp	r0, r3
 8004f9e:	bfb8      	it	lt
 8004fa0:	4618      	movlt	r0, r3
 8004fa2:	e7a6      	b.n	8004ef2 <_printf_i+0x15e>
 8004fa4:	2301      	movs	r3, #1
 8004fa6:	4632      	mov	r2, r6
 8004fa8:	4649      	mov	r1, r9
 8004faa:	4640      	mov	r0, r8
 8004fac:	47d0      	blx	sl
 8004fae:	3001      	adds	r0, #1
 8004fb0:	d09d      	beq.n	8004eee <_printf_i+0x15a>
 8004fb2:	3501      	adds	r5, #1
 8004fb4:	68e3      	ldr	r3, [r4, #12]
 8004fb6:	9903      	ldr	r1, [sp, #12]
 8004fb8:	1a5b      	subs	r3, r3, r1
 8004fba:	42ab      	cmp	r3, r5
 8004fbc:	dcf2      	bgt.n	8004fa4 <_printf_i+0x210>
 8004fbe:	e7eb      	b.n	8004f98 <_printf_i+0x204>
 8004fc0:	2500      	movs	r5, #0
 8004fc2:	f104 0619 	add.w	r6, r4, #25
 8004fc6:	e7f5      	b.n	8004fb4 <_printf_i+0x220>
 8004fc8:	08005472 	.word	0x08005472
 8004fcc:	08005483 	.word	0x08005483

08004fd0 <__sflush_r>:
 8004fd0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004fd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004fd8:	0716      	lsls	r6, r2, #28
 8004fda:	4605      	mov	r5, r0
 8004fdc:	460c      	mov	r4, r1
 8004fde:	d454      	bmi.n	800508a <__sflush_r+0xba>
 8004fe0:	684b      	ldr	r3, [r1, #4]
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	dc02      	bgt.n	8004fec <__sflush_r+0x1c>
 8004fe6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	dd48      	ble.n	800507e <__sflush_r+0xae>
 8004fec:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004fee:	2e00      	cmp	r6, #0
 8004ff0:	d045      	beq.n	800507e <__sflush_r+0xae>
 8004ff2:	2300      	movs	r3, #0
 8004ff4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8004ff8:	682f      	ldr	r7, [r5, #0]
 8004ffa:	6a21      	ldr	r1, [r4, #32]
 8004ffc:	602b      	str	r3, [r5, #0]
 8004ffe:	d030      	beq.n	8005062 <__sflush_r+0x92>
 8005000:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005002:	89a3      	ldrh	r3, [r4, #12]
 8005004:	0759      	lsls	r1, r3, #29
 8005006:	d505      	bpl.n	8005014 <__sflush_r+0x44>
 8005008:	6863      	ldr	r3, [r4, #4]
 800500a:	1ad2      	subs	r2, r2, r3
 800500c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800500e:	b10b      	cbz	r3, 8005014 <__sflush_r+0x44>
 8005010:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005012:	1ad2      	subs	r2, r2, r3
 8005014:	2300      	movs	r3, #0
 8005016:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005018:	6a21      	ldr	r1, [r4, #32]
 800501a:	4628      	mov	r0, r5
 800501c:	47b0      	blx	r6
 800501e:	1c43      	adds	r3, r0, #1
 8005020:	89a3      	ldrh	r3, [r4, #12]
 8005022:	d106      	bne.n	8005032 <__sflush_r+0x62>
 8005024:	6829      	ldr	r1, [r5, #0]
 8005026:	291d      	cmp	r1, #29
 8005028:	d82b      	bhi.n	8005082 <__sflush_r+0xb2>
 800502a:	4a2a      	ldr	r2, [pc, #168]	@ (80050d4 <__sflush_r+0x104>)
 800502c:	40ca      	lsrs	r2, r1
 800502e:	07d6      	lsls	r6, r2, #31
 8005030:	d527      	bpl.n	8005082 <__sflush_r+0xb2>
 8005032:	2200      	movs	r2, #0
 8005034:	6062      	str	r2, [r4, #4]
 8005036:	04d9      	lsls	r1, r3, #19
 8005038:	6922      	ldr	r2, [r4, #16]
 800503a:	6022      	str	r2, [r4, #0]
 800503c:	d504      	bpl.n	8005048 <__sflush_r+0x78>
 800503e:	1c42      	adds	r2, r0, #1
 8005040:	d101      	bne.n	8005046 <__sflush_r+0x76>
 8005042:	682b      	ldr	r3, [r5, #0]
 8005044:	b903      	cbnz	r3, 8005048 <__sflush_r+0x78>
 8005046:	6560      	str	r0, [r4, #84]	@ 0x54
 8005048:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800504a:	602f      	str	r7, [r5, #0]
 800504c:	b1b9      	cbz	r1, 800507e <__sflush_r+0xae>
 800504e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005052:	4299      	cmp	r1, r3
 8005054:	d002      	beq.n	800505c <__sflush_r+0x8c>
 8005056:	4628      	mov	r0, r5
 8005058:	f7ff fbec 	bl	8004834 <_free_r>
 800505c:	2300      	movs	r3, #0
 800505e:	6363      	str	r3, [r4, #52]	@ 0x34
 8005060:	e00d      	b.n	800507e <__sflush_r+0xae>
 8005062:	2301      	movs	r3, #1
 8005064:	4628      	mov	r0, r5
 8005066:	47b0      	blx	r6
 8005068:	4602      	mov	r2, r0
 800506a:	1c50      	adds	r0, r2, #1
 800506c:	d1c9      	bne.n	8005002 <__sflush_r+0x32>
 800506e:	682b      	ldr	r3, [r5, #0]
 8005070:	2b00      	cmp	r3, #0
 8005072:	d0c6      	beq.n	8005002 <__sflush_r+0x32>
 8005074:	2b1d      	cmp	r3, #29
 8005076:	d001      	beq.n	800507c <__sflush_r+0xac>
 8005078:	2b16      	cmp	r3, #22
 800507a:	d11e      	bne.n	80050ba <__sflush_r+0xea>
 800507c:	602f      	str	r7, [r5, #0]
 800507e:	2000      	movs	r0, #0
 8005080:	e022      	b.n	80050c8 <__sflush_r+0xf8>
 8005082:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005086:	b21b      	sxth	r3, r3
 8005088:	e01b      	b.n	80050c2 <__sflush_r+0xf2>
 800508a:	690f      	ldr	r7, [r1, #16]
 800508c:	2f00      	cmp	r7, #0
 800508e:	d0f6      	beq.n	800507e <__sflush_r+0xae>
 8005090:	0793      	lsls	r3, r2, #30
 8005092:	680e      	ldr	r6, [r1, #0]
 8005094:	bf08      	it	eq
 8005096:	694b      	ldreq	r3, [r1, #20]
 8005098:	600f      	str	r7, [r1, #0]
 800509a:	bf18      	it	ne
 800509c:	2300      	movne	r3, #0
 800509e:	eba6 0807 	sub.w	r8, r6, r7
 80050a2:	608b      	str	r3, [r1, #8]
 80050a4:	f1b8 0f00 	cmp.w	r8, #0
 80050a8:	dde9      	ble.n	800507e <__sflush_r+0xae>
 80050aa:	6a21      	ldr	r1, [r4, #32]
 80050ac:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80050ae:	4643      	mov	r3, r8
 80050b0:	463a      	mov	r2, r7
 80050b2:	4628      	mov	r0, r5
 80050b4:	47b0      	blx	r6
 80050b6:	2800      	cmp	r0, #0
 80050b8:	dc08      	bgt.n	80050cc <__sflush_r+0xfc>
 80050ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80050be:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80050c2:	81a3      	strh	r3, [r4, #12]
 80050c4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80050c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80050cc:	4407      	add	r7, r0
 80050ce:	eba8 0800 	sub.w	r8, r8, r0
 80050d2:	e7e7      	b.n	80050a4 <__sflush_r+0xd4>
 80050d4:	20400001 	.word	0x20400001

080050d8 <_fflush_r>:
 80050d8:	b538      	push	{r3, r4, r5, lr}
 80050da:	690b      	ldr	r3, [r1, #16]
 80050dc:	4605      	mov	r5, r0
 80050de:	460c      	mov	r4, r1
 80050e0:	b913      	cbnz	r3, 80050e8 <_fflush_r+0x10>
 80050e2:	2500      	movs	r5, #0
 80050e4:	4628      	mov	r0, r5
 80050e6:	bd38      	pop	{r3, r4, r5, pc}
 80050e8:	b118      	cbz	r0, 80050f2 <_fflush_r+0x1a>
 80050ea:	6a03      	ldr	r3, [r0, #32]
 80050ec:	b90b      	cbnz	r3, 80050f2 <_fflush_r+0x1a>
 80050ee:	f7ff f92d 	bl	800434c <__sinit>
 80050f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d0f3      	beq.n	80050e2 <_fflush_r+0xa>
 80050fa:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80050fc:	07d0      	lsls	r0, r2, #31
 80050fe:	d404      	bmi.n	800510a <_fflush_r+0x32>
 8005100:	0599      	lsls	r1, r3, #22
 8005102:	d402      	bmi.n	800510a <_fflush_r+0x32>
 8005104:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005106:	f7ff fb74 	bl	80047f2 <__retarget_lock_acquire_recursive>
 800510a:	4628      	mov	r0, r5
 800510c:	4621      	mov	r1, r4
 800510e:	f7ff ff5f 	bl	8004fd0 <__sflush_r>
 8005112:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005114:	07da      	lsls	r2, r3, #31
 8005116:	4605      	mov	r5, r0
 8005118:	d4e4      	bmi.n	80050e4 <_fflush_r+0xc>
 800511a:	89a3      	ldrh	r3, [r4, #12]
 800511c:	059b      	lsls	r3, r3, #22
 800511e:	d4e1      	bmi.n	80050e4 <_fflush_r+0xc>
 8005120:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005122:	f7ff fb67 	bl	80047f4 <__retarget_lock_release_recursive>
 8005126:	e7dd      	b.n	80050e4 <_fflush_r+0xc>

08005128 <fiprintf>:
 8005128:	b40e      	push	{r1, r2, r3}
 800512a:	b503      	push	{r0, r1, lr}
 800512c:	4601      	mov	r1, r0
 800512e:	ab03      	add	r3, sp, #12
 8005130:	4805      	ldr	r0, [pc, #20]	@ (8005148 <fiprintf+0x20>)
 8005132:	f853 2b04 	ldr.w	r2, [r3], #4
 8005136:	6800      	ldr	r0, [r0, #0]
 8005138:	9301      	str	r3, [sp, #4]
 800513a:	f7ff fca5 	bl	8004a88 <_vfiprintf_r>
 800513e:	b002      	add	sp, #8
 8005140:	f85d eb04 	ldr.w	lr, [sp], #4
 8005144:	b003      	add	sp, #12
 8005146:	4770      	bx	lr
 8005148:	2000001c 	.word	0x2000001c

0800514c <__swhatbuf_r>:
 800514c:	b570      	push	{r4, r5, r6, lr}
 800514e:	460c      	mov	r4, r1
 8005150:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005154:	2900      	cmp	r1, #0
 8005156:	b096      	sub	sp, #88	@ 0x58
 8005158:	4615      	mov	r5, r2
 800515a:	461e      	mov	r6, r3
 800515c:	da0d      	bge.n	800517a <__swhatbuf_r+0x2e>
 800515e:	89a3      	ldrh	r3, [r4, #12]
 8005160:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005164:	f04f 0100 	mov.w	r1, #0
 8005168:	bf14      	ite	ne
 800516a:	2340      	movne	r3, #64	@ 0x40
 800516c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8005170:	2000      	movs	r0, #0
 8005172:	6031      	str	r1, [r6, #0]
 8005174:	602b      	str	r3, [r5, #0]
 8005176:	b016      	add	sp, #88	@ 0x58
 8005178:	bd70      	pop	{r4, r5, r6, pc}
 800517a:	466a      	mov	r2, sp
 800517c:	f000 f848 	bl	8005210 <_fstat_r>
 8005180:	2800      	cmp	r0, #0
 8005182:	dbec      	blt.n	800515e <__swhatbuf_r+0x12>
 8005184:	9901      	ldr	r1, [sp, #4]
 8005186:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800518a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800518e:	4259      	negs	r1, r3
 8005190:	4159      	adcs	r1, r3
 8005192:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005196:	e7eb      	b.n	8005170 <__swhatbuf_r+0x24>

08005198 <__smakebuf_r>:
 8005198:	898b      	ldrh	r3, [r1, #12]
 800519a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800519c:	079d      	lsls	r5, r3, #30
 800519e:	4606      	mov	r6, r0
 80051a0:	460c      	mov	r4, r1
 80051a2:	d507      	bpl.n	80051b4 <__smakebuf_r+0x1c>
 80051a4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80051a8:	6023      	str	r3, [r4, #0]
 80051aa:	6123      	str	r3, [r4, #16]
 80051ac:	2301      	movs	r3, #1
 80051ae:	6163      	str	r3, [r4, #20]
 80051b0:	b003      	add	sp, #12
 80051b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80051b4:	ab01      	add	r3, sp, #4
 80051b6:	466a      	mov	r2, sp
 80051b8:	f7ff ffc8 	bl	800514c <__swhatbuf_r>
 80051bc:	9f00      	ldr	r7, [sp, #0]
 80051be:	4605      	mov	r5, r0
 80051c0:	4639      	mov	r1, r7
 80051c2:	4630      	mov	r0, r6
 80051c4:	f7ff fbaa 	bl	800491c <_malloc_r>
 80051c8:	b948      	cbnz	r0, 80051de <__smakebuf_r+0x46>
 80051ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80051ce:	059a      	lsls	r2, r3, #22
 80051d0:	d4ee      	bmi.n	80051b0 <__smakebuf_r+0x18>
 80051d2:	f023 0303 	bic.w	r3, r3, #3
 80051d6:	f043 0302 	orr.w	r3, r3, #2
 80051da:	81a3      	strh	r3, [r4, #12]
 80051dc:	e7e2      	b.n	80051a4 <__smakebuf_r+0xc>
 80051de:	89a3      	ldrh	r3, [r4, #12]
 80051e0:	6020      	str	r0, [r4, #0]
 80051e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80051e6:	81a3      	strh	r3, [r4, #12]
 80051e8:	9b01      	ldr	r3, [sp, #4]
 80051ea:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80051ee:	b15b      	cbz	r3, 8005208 <__smakebuf_r+0x70>
 80051f0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80051f4:	4630      	mov	r0, r6
 80051f6:	f000 f81d 	bl	8005234 <_isatty_r>
 80051fa:	b128      	cbz	r0, 8005208 <__smakebuf_r+0x70>
 80051fc:	89a3      	ldrh	r3, [r4, #12]
 80051fe:	f023 0303 	bic.w	r3, r3, #3
 8005202:	f043 0301 	orr.w	r3, r3, #1
 8005206:	81a3      	strh	r3, [r4, #12]
 8005208:	89a3      	ldrh	r3, [r4, #12]
 800520a:	431d      	orrs	r5, r3
 800520c:	81a5      	strh	r5, [r4, #12]
 800520e:	e7cf      	b.n	80051b0 <__smakebuf_r+0x18>

08005210 <_fstat_r>:
 8005210:	b538      	push	{r3, r4, r5, lr}
 8005212:	4d07      	ldr	r5, [pc, #28]	@ (8005230 <_fstat_r+0x20>)
 8005214:	2300      	movs	r3, #0
 8005216:	4604      	mov	r4, r0
 8005218:	4608      	mov	r0, r1
 800521a:	4611      	mov	r1, r2
 800521c:	602b      	str	r3, [r5, #0]
 800521e:	f7fc f817 	bl	8001250 <_fstat>
 8005222:	1c43      	adds	r3, r0, #1
 8005224:	d102      	bne.n	800522c <_fstat_r+0x1c>
 8005226:	682b      	ldr	r3, [r5, #0]
 8005228:	b103      	cbz	r3, 800522c <_fstat_r+0x1c>
 800522a:	6023      	str	r3, [r4, #0]
 800522c:	bd38      	pop	{r3, r4, r5, pc}
 800522e:	bf00      	nop
 8005230:	200002b8 	.word	0x200002b8

08005234 <_isatty_r>:
 8005234:	b538      	push	{r3, r4, r5, lr}
 8005236:	4d06      	ldr	r5, [pc, #24]	@ (8005250 <_isatty_r+0x1c>)
 8005238:	2300      	movs	r3, #0
 800523a:	4604      	mov	r4, r0
 800523c:	4608      	mov	r0, r1
 800523e:	602b      	str	r3, [r5, #0]
 8005240:	f7fc f816 	bl	8001270 <_isatty>
 8005244:	1c43      	adds	r3, r0, #1
 8005246:	d102      	bne.n	800524e <_isatty_r+0x1a>
 8005248:	682b      	ldr	r3, [r5, #0]
 800524a:	b103      	cbz	r3, 800524e <_isatty_r+0x1a>
 800524c:	6023      	str	r3, [r4, #0]
 800524e:	bd38      	pop	{r3, r4, r5, pc}
 8005250:	200002b8 	.word	0x200002b8

08005254 <_sbrk_r>:
 8005254:	b538      	push	{r3, r4, r5, lr}
 8005256:	4d06      	ldr	r5, [pc, #24]	@ (8005270 <_sbrk_r+0x1c>)
 8005258:	2300      	movs	r3, #0
 800525a:	4604      	mov	r4, r0
 800525c:	4608      	mov	r0, r1
 800525e:	602b      	str	r3, [r5, #0]
 8005260:	f7fc f81e 	bl	80012a0 <_sbrk>
 8005264:	1c43      	adds	r3, r0, #1
 8005266:	d102      	bne.n	800526e <_sbrk_r+0x1a>
 8005268:	682b      	ldr	r3, [r5, #0]
 800526a:	b103      	cbz	r3, 800526e <_sbrk_r+0x1a>
 800526c:	6023      	str	r3, [r4, #0]
 800526e:	bd38      	pop	{r3, r4, r5, pc}
 8005270:	200002b8 	.word	0x200002b8

08005274 <abort>:
 8005274:	b508      	push	{r3, lr}
 8005276:	2006      	movs	r0, #6
 8005278:	f000 f82c 	bl	80052d4 <raise>
 800527c:	2001      	movs	r0, #1
 800527e:	f7fb ff97 	bl	80011b0 <_exit>

08005282 <_raise_r>:
 8005282:	291f      	cmp	r1, #31
 8005284:	b538      	push	{r3, r4, r5, lr}
 8005286:	4605      	mov	r5, r0
 8005288:	460c      	mov	r4, r1
 800528a:	d904      	bls.n	8005296 <_raise_r+0x14>
 800528c:	2316      	movs	r3, #22
 800528e:	6003      	str	r3, [r0, #0]
 8005290:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005294:	bd38      	pop	{r3, r4, r5, pc}
 8005296:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8005298:	b112      	cbz	r2, 80052a0 <_raise_r+0x1e>
 800529a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800529e:	b94b      	cbnz	r3, 80052b4 <_raise_r+0x32>
 80052a0:	4628      	mov	r0, r5
 80052a2:	f000 f831 	bl	8005308 <_getpid_r>
 80052a6:	4622      	mov	r2, r4
 80052a8:	4601      	mov	r1, r0
 80052aa:	4628      	mov	r0, r5
 80052ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80052b0:	f000 b818 	b.w	80052e4 <_kill_r>
 80052b4:	2b01      	cmp	r3, #1
 80052b6:	d00a      	beq.n	80052ce <_raise_r+0x4c>
 80052b8:	1c59      	adds	r1, r3, #1
 80052ba:	d103      	bne.n	80052c4 <_raise_r+0x42>
 80052bc:	2316      	movs	r3, #22
 80052be:	6003      	str	r3, [r0, #0]
 80052c0:	2001      	movs	r0, #1
 80052c2:	e7e7      	b.n	8005294 <_raise_r+0x12>
 80052c4:	2100      	movs	r1, #0
 80052c6:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80052ca:	4620      	mov	r0, r4
 80052cc:	4798      	blx	r3
 80052ce:	2000      	movs	r0, #0
 80052d0:	e7e0      	b.n	8005294 <_raise_r+0x12>
	...

080052d4 <raise>:
 80052d4:	4b02      	ldr	r3, [pc, #8]	@ (80052e0 <raise+0xc>)
 80052d6:	4601      	mov	r1, r0
 80052d8:	6818      	ldr	r0, [r3, #0]
 80052da:	f7ff bfd2 	b.w	8005282 <_raise_r>
 80052de:	bf00      	nop
 80052e0:	2000001c 	.word	0x2000001c

080052e4 <_kill_r>:
 80052e4:	b538      	push	{r3, r4, r5, lr}
 80052e6:	4d07      	ldr	r5, [pc, #28]	@ (8005304 <_kill_r+0x20>)
 80052e8:	2300      	movs	r3, #0
 80052ea:	4604      	mov	r4, r0
 80052ec:	4608      	mov	r0, r1
 80052ee:	4611      	mov	r1, r2
 80052f0:	602b      	str	r3, [r5, #0]
 80052f2:	f7fb ff4d 	bl	8001190 <_kill>
 80052f6:	1c43      	adds	r3, r0, #1
 80052f8:	d102      	bne.n	8005300 <_kill_r+0x1c>
 80052fa:	682b      	ldr	r3, [r5, #0]
 80052fc:	b103      	cbz	r3, 8005300 <_kill_r+0x1c>
 80052fe:	6023      	str	r3, [r4, #0]
 8005300:	bd38      	pop	{r3, r4, r5, pc}
 8005302:	bf00      	nop
 8005304:	200002b8 	.word	0x200002b8

08005308 <_getpid_r>:
 8005308:	f7fb bf3a 	b.w	8001180 <_getpid>

0800530c <_init>:
 800530c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800530e:	bf00      	nop
 8005310:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005312:	bc08      	pop	{r3}
 8005314:	469e      	mov	lr, r3
 8005316:	4770      	bx	lr

08005318 <_fini>:
 8005318:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800531a:	bf00      	nop
 800531c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800531e:	bc08      	pop	{r3}
 8005320:	469e      	mov	lr, r3
 8005322:	4770      	bx	lr
