
pan_tilt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000521c  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000180  080053bc  080053bc  000063bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800553c  0800553c  00007068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800553c  0800553c  0000653c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005544  08005544  00007068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005544  08005544  00006544  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005548  08005548  00006548  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  0800554c  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000274  20000068  080055b4  00007068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002dc  080055b4  000072dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d7e3  00000000  00000000  00007098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001eea  00000000  00000000  0001487b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d48  00000000  00000000  00016768  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a5f  00000000  00000000  000174b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001733b  00000000  00000000  00017f0f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e909  00000000  00000000  0002f24a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000904bf  00000000  00000000  0003db53  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ce012  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004210  00000000  00000000  000ce058  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000053  00000000  00000000  000d2268  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000068 	.word	0x20000068
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080053a4 	.word	0x080053a4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000006c 	.word	0x2000006c
 80001dc:	080053a4 	.word	0x080053a4

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b988 	b.w	80005b8 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	468e      	mov	lr, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	4688      	mov	r8, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d962      	bls.n	800039c <__udivmoddi4+0xdc>
 80002d6:	fab2 f682 	clz	r6, r2
 80002da:	b14e      	cbz	r6, 80002f0 <__udivmoddi4+0x30>
 80002dc:	f1c6 0320 	rsb	r3, r6, #32
 80002e0:	fa01 f806 	lsl.w	r8, r1, r6
 80002e4:	fa20 f303 	lsr.w	r3, r0, r3
 80002e8:	40b7      	lsls	r7, r6
 80002ea:	ea43 0808 	orr.w	r8, r3, r8
 80002ee:	40b4      	lsls	r4, r6
 80002f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f4:	fa1f fc87 	uxth.w	ip, r7
 80002f8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002fc:	0c23      	lsrs	r3, r4, #16
 80002fe:	fb0e 8811 	mls	r8, lr, r1, r8
 8000302:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000306:	fb01 f20c 	mul.w	r2, r1, ip
 800030a:	429a      	cmp	r2, r3
 800030c:	d909      	bls.n	8000322 <__udivmoddi4+0x62>
 800030e:	18fb      	adds	r3, r7, r3
 8000310:	f101 30ff 	add.w	r0, r1, #4294967295
 8000314:	f080 80ea 	bcs.w	80004ec <__udivmoddi4+0x22c>
 8000318:	429a      	cmp	r2, r3
 800031a:	f240 80e7 	bls.w	80004ec <__udivmoddi4+0x22c>
 800031e:	3902      	subs	r1, #2
 8000320:	443b      	add	r3, r7
 8000322:	1a9a      	subs	r2, r3, r2
 8000324:	b2a3      	uxth	r3, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000332:	fb00 fc0c 	mul.w	ip, r0, ip
 8000336:	459c      	cmp	ip, r3
 8000338:	d909      	bls.n	800034e <__udivmoddi4+0x8e>
 800033a:	18fb      	adds	r3, r7, r3
 800033c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000340:	f080 80d6 	bcs.w	80004f0 <__udivmoddi4+0x230>
 8000344:	459c      	cmp	ip, r3
 8000346:	f240 80d3 	bls.w	80004f0 <__udivmoddi4+0x230>
 800034a:	443b      	add	r3, r7
 800034c:	3802      	subs	r0, #2
 800034e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000352:	eba3 030c 	sub.w	r3, r3, ip
 8000356:	2100      	movs	r1, #0
 8000358:	b11d      	cbz	r5, 8000362 <__udivmoddi4+0xa2>
 800035a:	40f3      	lsrs	r3, r6
 800035c:	2200      	movs	r2, #0
 800035e:	e9c5 3200 	strd	r3, r2, [r5]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d905      	bls.n	8000376 <__udivmoddi4+0xb6>
 800036a:	b10d      	cbz	r5, 8000370 <__udivmoddi4+0xb0>
 800036c:	e9c5 0100 	strd	r0, r1, [r5]
 8000370:	2100      	movs	r1, #0
 8000372:	4608      	mov	r0, r1
 8000374:	e7f5      	b.n	8000362 <__udivmoddi4+0xa2>
 8000376:	fab3 f183 	clz	r1, r3
 800037a:	2900      	cmp	r1, #0
 800037c:	d146      	bne.n	800040c <__udivmoddi4+0x14c>
 800037e:	4573      	cmp	r3, lr
 8000380:	d302      	bcc.n	8000388 <__udivmoddi4+0xc8>
 8000382:	4282      	cmp	r2, r0
 8000384:	f200 8105 	bhi.w	8000592 <__udivmoddi4+0x2d2>
 8000388:	1a84      	subs	r4, r0, r2
 800038a:	eb6e 0203 	sbc.w	r2, lr, r3
 800038e:	2001      	movs	r0, #1
 8000390:	4690      	mov	r8, r2
 8000392:	2d00      	cmp	r5, #0
 8000394:	d0e5      	beq.n	8000362 <__udivmoddi4+0xa2>
 8000396:	e9c5 4800 	strd	r4, r8, [r5]
 800039a:	e7e2      	b.n	8000362 <__udivmoddi4+0xa2>
 800039c:	2a00      	cmp	r2, #0
 800039e:	f000 8090 	beq.w	80004c2 <__udivmoddi4+0x202>
 80003a2:	fab2 f682 	clz	r6, r2
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	f040 80a4 	bne.w	80004f4 <__udivmoddi4+0x234>
 80003ac:	1a8a      	subs	r2, r1, r2
 80003ae:	0c03      	lsrs	r3, r0, #16
 80003b0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003b4:	b280      	uxth	r0, r0
 80003b6:	b2bc      	uxth	r4, r7
 80003b8:	2101      	movs	r1, #1
 80003ba:	fbb2 fcfe 	udiv	ip, r2, lr
 80003be:	fb0e 221c 	mls	r2, lr, ip, r2
 80003c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003c6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ca:	429a      	cmp	r2, r3
 80003cc:	d907      	bls.n	80003de <__udivmoddi4+0x11e>
 80003ce:	18fb      	adds	r3, r7, r3
 80003d0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003d4:	d202      	bcs.n	80003dc <__udivmoddi4+0x11c>
 80003d6:	429a      	cmp	r2, r3
 80003d8:	f200 80e0 	bhi.w	800059c <__udivmoddi4+0x2dc>
 80003dc:	46c4      	mov	ip, r8
 80003de:	1a9b      	subs	r3, r3, r2
 80003e0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003e4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003e8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003ec:	fb02 f404 	mul.w	r4, r2, r4
 80003f0:	429c      	cmp	r4, r3
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x144>
 80003f4:	18fb      	adds	r3, r7, r3
 80003f6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x142>
 80003fc:	429c      	cmp	r4, r3
 80003fe:	f200 80ca 	bhi.w	8000596 <__udivmoddi4+0x2d6>
 8000402:	4602      	mov	r2, r0
 8000404:	1b1b      	subs	r3, r3, r4
 8000406:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800040a:	e7a5      	b.n	8000358 <__udivmoddi4+0x98>
 800040c:	f1c1 0620 	rsb	r6, r1, #32
 8000410:	408b      	lsls	r3, r1
 8000412:	fa22 f706 	lsr.w	r7, r2, r6
 8000416:	431f      	orrs	r7, r3
 8000418:	fa0e f401 	lsl.w	r4, lr, r1
 800041c:	fa20 f306 	lsr.w	r3, r0, r6
 8000420:	fa2e fe06 	lsr.w	lr, lr, r6
 8000424:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000428:	4323      	orrs	r3, r4
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	fa1f fc87 	uxth.w	ip, r7
 8000432:	fbbe f0f9 	udiv	r0, lr, r9
 8000436:	0c1c      	lsrs	r4, r3, #16
 8000438:	fb09 ee10 	mls	lr, r9, r0, lr
 800043c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000440:	fb00 fe0c 	mul.w	lr, r0, ip
 8000444:	45a6      	cmp	lr, r4
 8000446:	fa02 f201 	lsl.w	r2, r2, r1
 800044a:	d909      	bls.n	8000460 <__udivmoddi4+0x1a0>
 800044c:	193c      	adds	r4, r7, r4
 800044e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000452:	f080 809c 	bcs.w	800058e <__udivmoddi4+0x2ce>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f240 8099 	bls.w	800058e <__udivmoddi4+0x2ce>
 800045c:	3802      	subs	r0, #2
 800045e:	443c      	add	r4, r7
 8000460:	eba4 040e 	sub.w	r4, r4, lr
 8000464:	fa1f fe83 	uxth.w	lr, r3
 8000468:	fbb4 f3f9 	udiv	r3, r4, r9
 800046c:	fb09 4413 	mls	r4, r9, r3, r4
 8000470:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000474:	fb03 fc0c 	mul.w	ip, r3, ip
 8000478:	45a4      	cmp	ip, r4
 800047a:	d908      	bls.n	800048e <__udivmoddi4+0x1ce>
 800047c:	193c      	adds	r4, r7, r4
 800047e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000482:	f080 8082 	bcs.w	800058a <__udivmoddi4+0x2ca>
 8000486:	45a4      	cmp	ip, r4
 8000488:	d97f      	bls.n	800058a <__udivmoddi4+0x2ca>
 800048a:	3b02      	subs	r3, #2
 800048c:	443c      	add	r4, r7
 800048e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000492:	eba4 040c 	sub.w	r4, r4, ip
 8000496:	fba0 ec02 	umull	lr, ip, r0, r2
 800049a:	4564      	cmp	r4, ip
 800049c:	4673      	mov	r3, lr
 800049e:	46e1      	mov	r9, ip
 80004a0:	d362      	bcc.n	8000568 <__udivmoddi4+0x2a8>
 80004a2:	d05f      	beq.n	8000564 <__udivmoddi4+0x2a4>
 80004a4:	b15d      	cbz	r5, 80004be <__udivmoddi4+0x1fe>
 80004a6:	ebb8 0203 	subs.w	r2, r8, r3
 80004aa:	eb64 0409 	sbc.w	r4, r4, r9
 80004ae:	fa04 f606 	lsl.w	r6, r4, r6
 80004b2:	fa22 f301 	lsr.w	r3, r2, r1
 80004b6:	431e      	orrs	r6, r3
 80004b8:	40cc      	lsrs	r4, r1
 80004ba:	e9c5 6400 	strd	r6, r4, [r5]
 80004be:	2100      	movs	r1, #0
 80004c0:	e74f      	b.n	8000362 <__udivmoddi4+0xa2>
 80004c2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004c6:	0c01      	lsrs	r1, r0, #16
 80004c8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004cc:	b280      	uxth	r0, r0
 80004ce:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004d2:	463b      	mov	r3, r7
 80004d4:	4638      	mov	r0, r7
 80004d6:	463c      	mov	r4, r7
 80004d8:	46b8      	mov	r8, r7
 80004da:	46be      	mov	lr, r7
 80004dc:	2620      	movs	r6, #32
 80004de:	fbb1 f1f7 	udiv	r1, r1, r7
 80004e2:	eba2 0208 	sub.w	r2, r2, r8
 80004e6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004ea:	e766      	b.n	80003ba <__udivmoddi4+0xfa>
 80004ec:	4601      	mov	r1, r0
 80004ee:	e718      	b.n	8000322 <__udivmoddi4+0x62>
 80004f0:	4610      	mov	r0, r2
 80004f2:	e72c      	b.n	800034e <__udivmoddi4+0x8e>
 80004f4:	f1c6 0220 	rsb	r2, r6, #32
 80004f8:	fa2e f302 	lsr.w	r3, lr, r2
 80004fc:	40b7      	lsls	r7, r6
 80004fe:	40b1      	lsls	r1, r6
 8000500:	fa20 f202 	lsr.w	r2, r0, r2
 8000504:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000508:	430a      	orrs	r2, r1
 800050a:	fbb3 f8fe 	udiv	r8, r3, lr
 800050e:	b2bc      	uxth	r4, r7
 8000510:	fb0e 3318 	mls	r3, lr, r8, r3
 8000514:	0c11      	lsrs	r1, r2, #16
 8000516:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800051a:	fb08 f904 	mul.w	r9, r8, r4
 800051e:	40b0      	lsls	r0, r6
 8000520:	4589      	cmp	r9, r1
 8000522:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000526:	b280      	uxth	r0, r0
 8000528:	d93e      	bls.n	80005a8 <__udivmoddi4+0x2e8>
 800052a:	1879      	adds	r1, r7, r1
 800052c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000530:	d201      	bcs.n	8000536 <__udivmoddi4+0x276>
 8000532:	4589      	cmp	r9, r1
 8000534:	d81f      	bhi.n	8000576 <__udivmoddi4+0x2b6>
 8000536:	eba1 0109 	sub.w	r1, r1, r9
 800053a:	fbb1 f9fe 	udiv	r9, r1, lr
 800053e:	fb09 f804 	mul.w	r8, r9, r4
 8000542:	fb0e 1119 	mls	r1, lr, r9, r1
 8000546:	b292      	uxth	r2, r2
 8000548:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800054c:	4542      	cmp	r2, r8
 800054e:	d229      	bcs.n	80005a4 <__udivmoddi4+0x2e4>
 8000550:	18ba      	adds	r2, r7, r2
 8000552:	f109 31ff 	add.w	r1, r9, #4294967295
 8000556:	d2c4      	bcs.n	80004e2 <__udivmoddi4+0x222>
 8000558:	4542      	cmp	r2, r8
 800055a:	d2c2      	bcs.n	80004e2 <__udivmoddi4+0x222>
 800055c:	f1a9 0102 	sub.w	r1, r9, #2
 8000560:	443a      	add	r2, r7
 8000562:	e7be      	b.n	80004e2 <__udivmoddi4+0x222>
 8000564:	45f0      	cmp	r8, lr
 8000566:	d29d      	bcs.n	80004a4 <__udivmoddi4+0x1e4>
 8000568:	ebbe 0302 	subs.w	r3, lr, r2
 800056c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000570:	3801      	subs	r0, #1
 8000572:	46e1      	mov	r9, ip
 8000574:	e796      	b.n	80004a4 <__udivmoddi4+0x1e4>
 8000576:	eba7 0909 	sub.w	r9, r7, r9
 800057a:	4449      	add	r1, r9
 800057c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000580:	fbb1 f9fe 	udiv	r9, r1, lr
 8000584:	fb09 f804 	mul.w	r8, r9, r4
 8000588:	e7db      	b.n	8000542 <__udivmoddi4+0x282>
 800058a:	4673      	mov	r3, lr
 800058c:	e77f      	b.n	800048e <__udivmoddi4+0x1ce>
 800058e:	4650      	mov	r0, sl
 8000590:	e766      	b.n	8000460 <__udivmoddi4+0x1a0>
 8000592:	4608      	mov	r0, r1
 8000594:	e6fd      	b.n	8000392 <__udivmoddi4+0xd2>
 8000596:	443b      	add	r3, r7
 8000598:	3a02      	subs	r2, #2
 800059a:	e733      	b.n	8000404 <__udivmoddi4+0x144>
 800059c:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a0:	443b      	add	r3, r7
 80005a2:	e71c      	b.n	80003de <__udivmoddi4+0x11e>
 80005a4:	4649      	mov	r1, r9
 80005a6:	e79c      	b.n	80004e2 <__udivmoddi4+0x222>
 80005a8:	eba1 0109 	sub.w	r1, r1, r9
 80005ac:	46c4      	mov	ip, r8
 80005ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b2:	fb09 f804 	mul.w	r8, r9, r4
 80005b6:	e7c4      	b.n	8000542 <__udivmoddi4+0x282>

080005b8 <__aeabi_idiv0>:
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop

080005bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005c0:	f000 ff2c 	bl	800141c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005c4:	f000 f836 	bl	8000634 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005c8:	f000 f976 	bl	80008b8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005cc:	f000 f94a 	bl	8000864 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 80005d0:	f000 f89a 	bl	8000708 <MX_TIM2_Init>
  MX_TIM3_Init();
 80005d4:	f000 f8f0 	bl	80007b8 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim3);
 80005d8:	480f      	ldr	r0, [pc, #60]	@ (8000618 <main+0x5c>)
 80005da:	f001 ff6b 	bl	80024b4 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80005de:	2100      	movs	r1, #0
 80005e0:	480e      	ldr	r0, [pc, #56]	@ (800061c <main+0x60>)
 80005e2:	f002 f867 	bl	80026b4 <HAL_TIM_PWM_Start>
  set_servo_degree(current_servo_degree);
 80005e6:	4b0e      	ldr	r3, [pc, #56]	@ (8000620 <main+0x64>)
 80005e8:	781b      	ldrb	r3, [r3, #0]
 80005ea:	4618      	mov	r0, r3
 80005ec:	f000 fa14 	bl	8000a18 <set_servo_degree>
  HAL_UART_Receive_IT(&huart2, &rx_ch, 1);
 80005f0:	2201      	movs	r2, #1
 80005f2:	490c      	ldr	r1, [pc, #48]	@ (8000624 <main+0x68>)
 80005f4:	480c      	ldr	r0, [pc, #48]	@ (8000628 <main+0x6c>)
 80005f6:	f002 fed8 	bl	80033aa <HAL_UART_Receive_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  process_step_motor();
 80005fa:	f000 fa7d 	bl	8000af8 <process_step_motor>
	if (rx_flag) {
 80005fe:	4b0b      	ldr	r3, [pc, #44]	@ (800062c <main+0x70>)
 8000600:	781b      	ldrb	r3, [r3, #0]
 8000602:	b2db      	uxtb	r3, r3
 8000604:	2b00      	cmp	r3, #0
 8000606:	d0f8      	beq.n	80005fa <main+0x3e>
		parsing_command(cmd_buf);    // 수신 명령 처리
 8000608:	4809      	ldr	r0, [pc, #36]	@ (8000630 <main+0x74>)
 800060a:	f000 fb35 	bl	8000c78 <parsing_command>
		rx_flag = 0;
 800060e:	4b07      	ldr	r3, [pc, #28]	@ (800062c <main+0x70>)
 8000610:	2200      	movs	r2, #0
 8000612:	701a      	strb	r2, [r3, #0]
	  process_step_motor();
 8000614:	e7f1      	b.n	80005fa <main+0x3e>
 8000616:	bf00      	nop
 8000618:	200000cc 	.word	0x200000cc
 800061c:	20000084 	.word	0x20000084
 8000620:	2000016f 	.word	0x2000016f
 8000624:	2000016c 	.word	0x2000016c
 8000628:	20000114 	.word	0x20000114
 800062c:	2000016e 	.word	0x2000016e
 8000630:	20000164 	.word	0x20000164

08000634 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b094      	sub	sp, #80	@ 0x50
 8000638:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800063a:	f107 0320 	add.w	r3, r7, #32
 800063e:	2230      	movs	r2, #48	@ 0x30
 8000640:	2100      	movs	r1, #0
 8000642:	4618      	mov	r0, r3
 8000644:	f004 f84c 	bl	80046e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000648:	f107 030c 	add.w	r3, r7, #12
 800064c:	2200      	movs	r2, #0
 800064e:	601a      	str	r2, [r3, #0]
 8000650:	605a      	str	r2, [r3, #4]
 8000652:	609a      	str	r2, [r3, #8]
 8000654:	60da      	str	r2, [r3, #12]
 8000656:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000658:	2300      	movs	r3, #0
 800065a:	60bb      	str	r3, [r7, #8]
 800065c:	4b28      	ldr	r3, [pc, #160]	@ (8000700 <SystemClock_Config+0xcc>)
 800065e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000660:	4a27      	ldr	r2, [pc, #156]	@ (8000700 <SystemClock_Config+0xcc>)
 8000662:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000666:	6413      	str	r3, [r2, #64]	@ 0x40
 8000668:	4b25      	ldr	r3, [pc, #148]	@ (8000700 <SystemClock_Config+0xcc>)
 800066a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800066c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000670:	60bb      	str	r3, [r7, #8]
 8000672:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000674:	2300      	movs	r3, #0
 8000676:	607b      	str	r3, [r7, #4]
 8000678:	4b22      	ldr	r3, [pc, #136]	@ (8000704 <SystemClock_Config+0xd0>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	4a21      	ldr	r2, [pc, #132]	@ (8000704 <SystemClock_Config+0xd0>)
 800067e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000682:	6013      	str	r3, [r2, #0]
 8000684:	4b1f      	ldr	r3, [pc, #124]	@ (8000704 <SystemClock_Config+0xd0>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800068c:	607b      	str	r3, [r7, #4]
 800068e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000690:	2302      	movs	r3, #2
 8000692:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000694:	2301      	movs	r3, #1
 8000696:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000698:	2310      	movs	r3, #16
 800069a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800069c:	2302      	movs	r3, #2
 800069e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006a0:	2300      	movs	r3, #0
 80006a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80006a4:	2310      	movs	r3, #16
 80006a6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80006a8:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80006ac:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80006ae:	2304      	movs	r3, #4
 80006b0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006b2:	2304      	movs	r3, #4
 80006b4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006b6:	f107 0320 	add.w	r3, r7, #32
 80006ba:	4618      	mov	r0, r3
 80006bc:	f001 fa62 	bl	8001b84 <HAL_RCC_OscConfig>
 80006c0:	4603      	mov	r3, r0
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d001      	beq.n	80006ca <SystemClock_Config+0x96>
  {
    Error_Handler();
 80006c6:	f000 fc55 	bl	8000f74 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006ca:	230f      	movs	r3, #15
 80006cc:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006ce:	2302      	movs	r3, #2
 80006d0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006d2:	2300      	movs	r3, #0
 80006d4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006d6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006da:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006dc:	2300      	movs	r3, #0
 80006de:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006e0:	f107 030c 	add.w	r3, r7, #12
 80006e4:	2102      	movs	r1, #2
 80006e6:	4618      	mov	r0, r3
 80006e8:	f001 fcc4 	bl	8002074 <HAL_RCC_ClockConfig>
 80006ec:	4603      	mov	r3, r0
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d001      	beq.n	80006f6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80006f2:	f000 fc3f 	bl	8000f74 <Error_Handler>
  }
}
 80006f6:	bf00      	nop
 80006f8:	3750      	adds	r7, #80	@ 0x50
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bd80      	pop	{r7, pc}
 80006fe:	bf00      	nop
 8000700:	40023800 	.word	0x40023800
 8000704:	40007000 	.word	0x40007000

08000708 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b08a      	sub	sp, #40	@ 0x28
 800070c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800070e:	f107 0320 	add.w	r3, r7, #32
 8000712:	2200      	movs	r2, #0
 8000714:	601a      	str	r2, [r3, #0]
 8000716:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000718:	1d3b      	adds	r3, r7, #4
 800071a:	2200      	movs	r2, #0
 800071c:	601a      	str	r2, [r3, #0]
 800071e:	605a      	str	r2, [r3, #4]
 8000720:	609a      	str	r2, [r3, #8]
 8000722:	60da      	str	r2, [r3, #12]
 8000724:	611a      	str	r2, [r3, #16]
 8000726:	615a      	str	r2, [r3, #20]
 8000728:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800072a:	4b22      	ldr	r3, [pc, #136]	@ (80007b4 <MX_TIM2_Init+0xac>)
 800072c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000730:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 84-1;
 8000732:	4b20      	ldr	r3, [pc, #128]	@ (80007b4 <MX_TIM2_Init+0xac>)
 8000734:	2253      	movs	r2, #83	@ 0x53
 8000736:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000738:	4b1e      	ldr	r3, [pc, #120]	@ (80007b4 <MX_TIM2_Init+0xac>)
 800073a:	2200      	movs	r2, #0
 800073c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 20000-1;
 800073e:	4b1d      	ldr	r3, [pc, #116]	@ (80007b4 <MX_TIM2_Init+0xac>)
 8000740:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8000744:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000746:	4b1b      	ldr	r3, [pc, #108]	@ (80007b4 <MX_TIM2_Init+0xac>)
 8000748:	2200      	movs	r2, #0
 800074a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800074c:	4b19      	ldr	r3, [pc, #100]	@ (80007b4 <MX_TIM2_Init+0xac>)
 800074e:	2200      	movs	r2, #0
 8000750:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000752:	4818      	ldr	r0, [pc, #96]	@ (80007b4 <MX_TIM2_Init+0xac>)
 8000754:	f001 ff5f 	bl	8002616 <HAL_TIM_PWM_Init>
 8000758:	4603      	mov	r3, r0
 800075a:	2b00      	cmp	r3, #0
 800075c:	d001      	beq.n	8000762 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 800075e:	f000 fc09 	bl	8000f74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000762:	2300      	movs	r3, #0
 8000764:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000766:	2300      	movs	r3, #0
 8000768:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800076a:	f107 0320 	add.w	r3, r7, #32
 800076e:	4619      	mov	r1, r3
 8000770:	4810      	ldr	r0, [pc, #64]	@ (80007b4 <MX_TIM2_Init+0xac>)
 8000772:	f002 fcbd 	bl	80030f0 <HAL_TIMEx_MasterConfigSynchronization>
 8000776:	4603      	mov	r3, r0
 8000778:	2b00      	cmp	r3, #0
 800077a:	d001      	beq.n	8000780 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 800077c:	f000 fbfa 	bl	8000f74 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000780:	2360      	movs	r3, #96	@ 0x60
 8000782:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000784:	2300      	movs	r3, #0
 8000786:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000788:	2300      	movs	r3, #0
 800078a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800078c:	2300      	movs	r3, #0
 800078e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000790:	1d3b      	adds	r3, r7, #4
 8000792:	2200      	movs	r2, #0
 8000794:	4619      	mov	r1, r3
 8000796:	4807      	ldr	r0, [pc, #28]	@ (80007b4 <MX_TIM2_Init+0xac>)
 8000798:	f002 f988 	bl	8002aac <HAL_TIM_PWM_ConfigChannel>
 800079c:	4603      	mov	r3, r0
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d001      	beq.n	80007a6 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 80007a2:	f000 fbe7 	bl	8000f74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80007a6:	4803      	ldr	r0, [pc, #12]	@ (80007b4 <MX_TIM2_Init+0xac>)
 80007a8:	f000 fc60 	bl	800106c <HAL_TIM_MspPostInit>

}
 80007ac:	bf00      	nop
 80007ae:	3728      	adds	r7, #40	@ 0x28
 80007b0:	46bd      	mov	sp, r7
 80007b2:	bd80      	pop	{r7, pc}
 80007b4:	20000084 	.word	0x20000084

080007b8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b08a      	sub	sp, #40	@ 0x28
 80007bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007be:	f107 0320 	add.w	r3, r7, #32
 80007c2:	2200      	movs	r2, #0
 80007c4:	601a      	str	r2, [r3, #0]
 80007c6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80007c8:	1d3b      	adds	r3, r7, #4
 80007ca:	2200      	movs	r2, #0
 80007cc:	601a      	str	r2, [r3, #0]
 80007ce:	605a      	str	r2, [r3, #4]
 80007d0:	609a      	str	r2, [r3, #8]
 80007d2:	60da      	str	r2, [r3, #12]
 80007d4:	611a      	str	r2, [r3, #16]
 80007d6:	615a      	str	r2, [r3, #20]
 80007d8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80007da:	4b20      	ldr	r3, [pc, #128]	@ (800085c <MX_TIM3_Init+0xa4>)
 80007dc:	4a20      	ldr	r2, [pc, #128]	@ (8000860 <MX_TIM3_Init+0xa8>)
 80007de:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 84-1;
 80007e0:	4b1e      	ldr	r3, [pc, #120]	@ (800085c <MX_TIM3_Init+0xa4>)
 80007e2:	2253      	movs	r2, #83	@ 0x53
 80007e4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007e6:	4b1d      	ldr	r3, [pc, #116]	@ (800085c <MX_TIM3_Init+0xa4>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 80007ec:	4b1b      	ldr	r3, [pc, #108]	@ (800085c <MX_TIM3_Init+0xa4>)
 80007ee:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80007f2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007f4:	4b19      	ldr	r3, [pc, #100]	@ (800085c <MX_TIM3_Init+0xa4>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007fa:	4b18      	ldr	r3, [pc, #96]	@ (800085c <MX_TIM3_Init+0xa4>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 8000800:	4816      	ldr	r0, [pc, #88]	@ (800085c <MX_TIM3_Init+0xa4>)
 8000802:	f001 feb9 	bl	8002578 <HAL_TIM_OC_Init>
 8000806:	4603      	mov	r3, r0
 8000808:	2b00      	cmp	r3, #0
 800080a:	d001      	beq.n	8000810 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 800080c:	f000 fbb2 	bl	8000f74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000810:	2300      	movs	r3, #0
 8000812:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000814:	2300      	movs	r3, #0
 8000816:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000818:	f107 0320 	add.w	r3, r7, #32
 800081c:	4619      	mov	r1, r3
 800081e:	480f      	ldr	r0, [pc, #60]	@ (800085c <MX_TIM3_Init+0xa4>)
 8000820:	f002 fc66 	bl	80030f0 <HAL_TIMEx_MasterConfigSynchronization>
 8000824:	4603      	mov	r3, r0
 8000826:	2b00      	cmp	r3, #0
 8000828:	d001      	beq.n	800082e <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 800082a:	f000 fba3 	bl	8000f74 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 800082e:	2300      	movs	r3, #0
 8000830:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000832:	2300      	movs	r3, #0
 8000834:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000836:	2300      	movs	r3, #0
 8000838:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800083a:	2300      	movs	r3, #0
 800083c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800083e:	1d3b      	adds	r3, r7, #4
 8000840:	2200      	movs	r2, #0
 8000842:	4619      	mov	r1, r3
 8000844:	4805      	ldr	r0, [pc, #20]	@ (800085c <MX_TIM3_Init+0xa4>)
 8000846:	f002 f8d5 	bl	80029f4 <HAL_TIM_OC_ConfigChannel>
 800084a:	4603      	mov	r3, r0
 800084c:	2b00      	cmp	r3, #0
 800084e:	d001      	beq.n	8000854 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8000850:	f000 fb90 	bl	8000f74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000854:	bf00      	nop
 8000856:	3728      	adds	r7, #40	@ 0x28
 8000858:	46bd      	mov	sp, r7
 800085a:	bd80      	pop	{r7, pc}
 800085c:	200000cc 	.word	0x200000cc
 8000860:	40000400 	.word	0x40000400

08000864 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000868:	4b11      	ldr	r3, [pc, #68]	@ (80008b0 <MX_USART2_UART_Init+0x4c>)
 800086a:	4a12      	ldr	r2, [pc, #72]	@ (80008b4 <MX_USART2_UART_Init+0x50>)
 800086c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800086e:	4b10      	ldr	r3, [pc, #64]	@ (80008b0 <MX_USART2_UART_Init+0x4c>)
 8000870:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000874:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000876:	4b0e      	ldr	r3, [pc, #56]	@ (80008b0 <MX_USART2_UART_Init+0x4c>)
 8000878:	2200      	movs	r2, #0
 800087a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800087c:	4b0c      	ldr	r3, [pc, #48]	@ (80008b0 <MX_USART2_UART_Init+0x4c>)
 800087e:	2200      	movs	r2, #0
 8000880:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000882:	4b0b      	ldr	r3, [pc, #44]	@ (80008b0 <MX_USART2_UART_Init+0x4c>)
 8000884:	2200      	movs	r2, #0
 8000886:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000888:	4b09      	ldr	r3, [pc, #36]	@ (80008b0 <MX_USART2_UART_Init+0x4c>)
 800088a:	220c      	movs	r2, #12
 800088c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800088e:	4b08      	ldr	r3, [pc, #32]	@ (80008b0 <MX_USART2_UART_Init+0x4c>)
 8000890:	2200      	movs	r2, #0
 8000892:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000894:	4b06      	ldr	r3, [pc, #24]	@ (80008b0 <MX_USART2_UART_Init+0x4c>)
 8000896:	2200      	movs	r2, #0
 8000898:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800089a:	4805      	ldr	r0, [pc, #20]	@ (80008b0 <MX_USART2_UART_Init+0x4c>)
 800089c:	f002 fcaa 	bl	80031f4 <HAL_UART_Init>
 80008a0:	4603      	mov	r3, r0
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d001      	beq.n	80008aa <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80008a6:	f000 fb65 	bl	8000f74 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008aa:	bf00      	nop
 80008ac:	bd80      	pop	{r7, pc}
 80008ae:	bf00      	nop
 80008b0:	20000114 	.word	0x20000114
 80008b4:	40004400 	.word	0x40004400

080008b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b08a      	sub	sp, #40	@ 0x28
 80008bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008be:	f107 0314 	add.w	r3, r7, #20
 80008c2:	2200      	movs	r2, #0
 80008c4:	601a      	str	r2, [r3, #0]
 80008c6:	605a      	str	r2, [r3, #4]
 80008c8:	609a      	str	r2, [r3, #8]
 80008ca:	60da      	str	r2, [r3, #12]
 80008cc:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008ce:	2300      	movs	r3, #0
 80008d0:	613b      	str	r3, [r7, #16]
 80008d2:	4b38      	ldr	r3, [pc, #224]	@ (80009b4 <MX_GPIO_Init+0xfc>)
 80008d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008d6:	4a37      	ldr	r2, [pc, #220]	@ (80009b4 <MX_GPIO_Init+0xfc>)
 80008d8:	f043 0304 	orr.w	r3, r3, #4
 80008dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80008de:	4b35      	ldr	r3, [pc, #212]	@ (80009b4 <MX_GPIO_Init+0xfc>)
 80008e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008e2:	f003 0304 	and.w	r3, r3, #4
 80008e6:	613b      	str	r3, [r7, #16]
 80008e8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008ea:	2300      	movs	r3, #0
 80008ec:	60fb      	str	r3, [r7, #12]
 80008ee:	4b31      	ldr	r3, [pc, #196]	@ (80009b4 <MX_GPIO_Init+0xfc>)
 80008f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008f2:	4a30      	ldr	r2, [pc, #192]	@ (80009b4 <MX_GPIO_Init+0xfc>)
 80008f4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80008f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80008fa:	4b2e      	ldr	r3, [pc, #184]	@ (80009b4 <MX_GPIO_Init+0xfc>)
 80008fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000902:	60fb      	str	r3, [r7, #12]
 8000904:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000906:	2300      	movs	r3, #0
 8000908:	60bb      	str	r3, [r7, #8]
 800090a:	4b2a      	ldr	r3, [pc, #168]	@ (80009b4 <MX_GPIO_Init+0xfc>)
 800090c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800090e:	4a29      	ldr	r2, [pc, #164]	@ (80009b4 <MX_GPIO_Init+0xfc>)
 8000910:	f043 0301 	orr.w	r3, r3, #1
 8000914:	6313      	str	r3, [r2, #48]	@ 0x30
 8000916:	4b27      	ldr	r3, [pc, #156]	@ (80009b4 <MX_GPIO_Init+0xfc>)
 8000918:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800091a:	f003 0301 	and.w	r3, r3, #1
 800091e:	60bb      	str	r3, [r7, #8]
 8000920:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000922:	2300      	movs	r3, #0
 8000924:	607b      	str	r3, [r7, #4]
 8000926:	4b23      	ldr	r3, [pc, #140]	@ (80009b4 <MX_GPIO_Init+0xfc>)
 8000928:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800092a:	4a22      	ldr	r2, [pc, #136]	@ (80009b4 <MX_GPIO_Init+0xfc>)
 800092c:	f043 0302 	orr.w	r3, r3, #2
 8000930:	6313      	str	r3, [r2, #48]	@ 0x30
 8000932:	4b20      	ldr	r3, [pc, #128]	@ (80009b4 <MX_GPIO_Init+0xfc>)
 8000934:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000936:	f003 0302 	and.w	r3, r3, #2
 800093a:	607b      	str	r3, [r7, #4]
 800093c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800093e:	2200      	movs	r2, #0
 8000940:	2120      	movs	r1, #32
 8000942:	481d      	ldr	r0, [pc, #116]	@ (80009b8 <MX_GPIO_Init+0x100>)
 8000944:	f001 f904 	bl	8001b50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, IN1_Pin|IN2_Pin|IN3_Pin|IN4_Pin, GPIO_PIN_RESET);
 8000948:	2200      	movs	r2, #0
 800094a:	f44f 6170 	mov.w	r1, #3840	@ 0xf00
 800094e:	481b      	ldr	r0, [pc, #108]	@ (80009bc <MX_GPIO_Init+0x104>)
 8000950:	f001 f8fe 	bl	8001b50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000954:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000958:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800095a:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800095e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000960:	2300      	movs	r3, #0
 8000962:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000964:	f107 0314 	add.w	r3, r7, #20
 8000968:	4619      	mov	r1, r3
 800096a:	4814      	ldr	r0, [pc, #80]	@ (80009bc <MX_GPIO_Init+0x104>)
 800096c:	f000 ff6c 	bl	8001848 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000970:	2320      	movs	r3, #32
 8000972:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000974:	2301      	movs	r3, #1
 8000976:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000978:	2300      	movs	r3, #0
 800097a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800097c:	2300      	movs	r3, #0
 800097e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000980:	f107 0314 	add.w	r3, r7, #20
 8000984:	4619      	mov	r1, r3
 8000986:	480c      	ldr	r0, [pc, #48]	@ (80009b8 <MX_GPIO_Init+0x100>)
 8000988:	f000 ff5e 	bl	8001848 <HAL_GPIO_Init>

  /*Configure GPIO pins : IN1_Pin IN2_Pin IN3_Pin IN4_Pin */
  GPIO_InitStruct.Pin = IN1_Pin|IN2_Pin|IN3_Pin|IN4_Pin;
 800098c:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8000990:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000992:	2301      	movs	r3, #1
 8000994:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000996:	2300      	movs	r3, #0
 8000998:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800099a:	2300      	movs	r3, #0
 800099c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800099e:	f107 0314 	add.w	r3, r7, #20
 80009a2:	4619      	mov	r1, r3
 80009a4:	4805      	ldr	r0, [pc, #20]	@ (80009bc <MX_GPIO_Init+0x104>)
 80009a6:	f000 ff4f 	bl	8001848 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80009aa:	bf00      	nop
 80009ac:	3728      	adds	r7, #40	@ 0x28
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	bf00      	nop
 80009b4:	40023800 	.word	0x40023800
 80009b8:	40020000 	.word	0x40020000
 80009bc:	40020800 	.word	0x40020800

080009c0 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80009c0:	b480      	push	{r7}
 80009c2:	b083      	sub	sp, #12
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM3) {
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	4a0e      	ldr	r2, [pc, #56]	@ (8000a08 <HAL_TIM_PeriodElapsedCallback+0x48>)
 80009ce:	4293      	cmp	r3, r2
 80009d0:	d114      	bne.n	80009fc <HAL_TIM_PeriodElapsedCallback+0x3c>
        tick_1ms++; // 10ms 단위
 80009d2:	4b0e      	ldr	r3, [pc, #56]	@ (8000a0c <HAL_TIM_PeriodElapsedCallback+0x4c>)
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	3301      	adds	r3, #1
 80009d8:	4a0c      	ldr	r2, [pc, #48]	@ (8000a0c <HAL_TIM_PeriodElapsedCallback+0x4c>)
 80009da:	6013      	str	r3, [r2, #0]
        if (tick_1ms % 1000 == 0) { // 1초(=100*10ms)마다
 80009dc:	4b0b      	ldr	r3, [pc, #44]	@ (8000a0c <HAL_TIM_PeriodElapsedCallback+0x4c>)
 80009de:	681a      	ldr	r2, [r3, #0]
 80009e0:	4b0b      	ldr	r3, [pc, #44]	@ (8000a10 <HAL_TIM_PeriodElapsedCallback+0x50>)
 80009e2:	fba3 1302 	umull	r1, r3, r3, r2
 80009e6:	099b      	lsrs	r3, r3, #6
 80009e8:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80009ec:	fb01 f303 	mul.w	r3, r1, r3
 80009f0:	1ad3      	subs	r3, r2, r3
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d102      	bne.n	80009fc <HAL_TIM_PeriodElapsedCallback+0x3c>
            sec_flag = 1;
 80009f6:	4b07      	ldr	r3, [pc, #28]	@ (8000a14 <HAL_TIM_PeriodElapsedCallback+0x54>)
 80009f8:	2201      	movs	r2, #1
 80009fa:	701a      	strb	r2, [r3, #0]
        }
    }
}
 80009fc:	bf00      	nop
 80009fe:	370c      	adds	r7, #12
 8000a00:	46bd      	mov	sp, r7
 8000a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a06:	4770      	bx	lr
 8000a08:	40000400 	.word	0x40000400
 8000a0c:	2000015c 	.word	0x2000015c
 8000a10:	10624dd3 	.word	0x10624dd3
 8000a14:	20000160 	.word	0x20000160

08000a18 <set_servo_degree>:

void set_servo_degree(int degree)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	b085      	sub	sp, #20
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
    if (degree < 0) degree = 0;
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	da01      	bge.n	8000a2a <set_servo_degree+0x12>
 8000a26:	2300      	movs	r3, #0
 8000a28:	607b      	str	r3, [r7, #4]
    if (degree > 180) degree = 180;
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	2bb4      	cmp	r3, #180	@ 0xb4
 8000a2e:	dd01      	ble.n	8000a34 <set_servo_degree+0x1c>
 8000a30:	23b4      	movs	r3, #180	@ 0xb4
 8000a32:	607b      	str	r3, [r7, #4]
    uint16_t pulse = 500 + ((uint16_t)degree * 2000) / 180;
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	b29b      	uxth	r3, r3
 8000a38:	461a      	mov	r2, r3
 8000a3a:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000a3e:	fb02 f303 	mul.w	r3, r2, r3
 8000a42:	4a0c      	ldr	r2, [pc, #48]	@ (8000a74 <set_servo_degree+0x5c>)
 8000a44:	fb82 1203 	smull	r1, r2, r2, r3
 8000a48:	441a      	add	r2, r3
 8000a4a:	11d2      	asrs	r2, r2, #7
 8000a4c:	17db      	asrs	r3, r3, #31
 8000a4e:	1ad3      	subs	r3, r2, r3
 8000a50:	b29b      	uxth	r3, r3
 8000a52:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 8000a56:	81fb      	strh	r3, [r7, #14]
    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, pulse);
 8000a58:	4b07      	ldr	r3, [pc, #28]	@ (8000a78 <set_servo_degree+0x60>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	89fa      	ldrh	r2, [r7, #14]
 8000a5e:	635a      	str	r2, [r3, #52]	@ 0x34
    current_servo_degree = degree;
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	b2da      	uxtb	r2, r3
 8000a64:	4b05      	ldr	r3, [pc, #20]	@ (8000a7c <set_servo_degree+0x64>)
 8000a66:	701a      	strb	r2, [r3, #0]
}
 8000a68:	bf00      	nop
 8000a6a:	3714      	adds	r7, #20
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a72:	4770      	bx	lr
 8000a74:	b60b60b7 	.word	0xb60b60b7
 8000a78:	20000084 	.word	0x20000084
 8000a7c:	2000016f 	.word	0x2000016f

08000a80 <set_step_degree>:

void set_step_degree(int deg, int dir)
{
 8000a80:	b480      	push	{r7}
 8000a82:	b085      	sub	sp, #20
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
 8000a88:	6039      	str	r1, [r7, #0]
    int steps = (int)(deg * STEP_PER_DEG + 0.5f);
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	ee07 3a90 	vmov	s15, r3
 8000a90:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000a94:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 8000adc <set_step_degree+0x5c>
 8000a98:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000a9c:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8000aa0:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000aa4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000aa8:	ee17 3a90 	vmov	r3, s15
 8000aac:	60fb      	str	r3, [r7, #12]
    step_target = steps;
 8000aae:	4a0c      	ldr	r2, [pc, #48]	@ (8000ae0 <set_step_degree+0x60>)
 8000ab0:	68fb      	ldr	r3, [r7, #12]
 8000ab2:	6013      	str	r3, [r2, #0]
    step_dir = dir;
 8000ab4:	4a0b      	ldr	r2, [pc, #44]	@ (8000ae4 <set_step_degree+0x64>)
 8000ab6:	683b      	ldr	r3, [r7, #0]
 8000ab8:	6013      	str	r3, [r2, #0]
    step_remain = steps;
 8000aba:	4a0b      	ldr	r2, [pc, #44]	@ (8000ae8 <set_step_degree+0x68>)
 8000abc:	68fb      	ldr	r3, [r7, #12]
 8000abe:	6013      	str	r3, [r2, #0]
    step_last_tick = tick_1ms;
 8000ac0:	4b0a      	ldr	r3, [pc, #40]	@ (8000aec <set_step_degree+0x6c>)
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	4a0a      	ldr	r2, [pc, #40]	@ (8000af0 <set_step_degree+0x70>)
 8000ac6:	6013      	str	r3, [r2, #0]
    step_busy = 1;
 8000ac8:	4b0a      	ldr	r3, [pc, #40]	@ (8000af4 <set_step_degree+0x74>)
 8000aca:	2201      	movs	r2, #1
 8000acc:	701a      	strb	r2, [r3, #0]
}
 8000ace:	bf00      	nop
 8000ad0:	3714      	adds	r7, #20
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad8:	4770      	bx	lr
 8000ada:	bf00      	nop
 8000adc:	40b60b61 	.word	0x40b60b61
 8000ae0:	20000174 	.word	0x20000174
 8000ae4:	20000178 	.word	0x20000178
 8000ae8:	2000017c 	.word	0x2000017c
 8000aec:	2000015c 	.word	0x2000015c
 8000af0:	20000180 	.word	0x20000180
 8000af4:	20000184 	.word	0x20000184

08000af8 <process_step_motor>:

// (deg: 각도, dir: 0=좌, 1=우)
void process_step_motor(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	af00      	add	r7, sp, #0
    if (!step_busy || step_remain <= 0) return;
 8000afc:	4b37      	ldr	r3, [pc, #220]	@ (8000bdc <process_step_motor+0xe4>)
 8000afe:	781b      	ldrb	r3, [r3, #0]
 8000b00:	b2db      	uxtb	r3, r3
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d067      	beq.n	8000bd6 <process_step_motor+0xde>
 8000b06:	4b36      	ldr	r3, [pc, #216]	@ (8000be0 <process_step_motor+0xe8>)
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	dd63      	ble.n	8000bd6 <process_step_motor+0xde>
    if ((tick_1ms - step_last_tick) >= 3) { // 30ms 마다
 8000b0e:	4b35      	ldr	r3, [pc, #212]	@ (8000be4 <process_step_motor+0xec>)
 8000b10:	681a      	ldr	r2, [r3, #0]
 8000b12:	4b35      	ldr	r3, [pc, #212]	@ (8000be8 <process_step_motor+0xf0>)
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	1ad3      	subs	r3, r2, r3
 8000b18:	2b02      	cmp	r3, #2
 8000b1a:	d95d      	bls.n	8000bd8 <process_step_motor+0xe0>
        if (step_dir) step_index = (step_index + 1) % 4;
 8000b1c:	4b33      	ldr	r3, [pc, #204]	@ (8000bec <process_step_motor+0xf4>)
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d00c      	beq.n	8000b3e <process_step_motor+0x46>
 8000b24:	4b32      	ldr	r3, [pc, #200]	@ (8000bf0 <process_step_motor+0xf8>)
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	3301      	adds	r3, #1
 8000b2a:	425a      	negs	r2, r3
 8000b2c:	f003 0303 	and.w	r3, r3, #3
 8000b30:	f002 0203 	and.w	r2, r2, #3
 8000b34:	bf58      	it	pl
 8000b36:	4253      	negpl	r3, r2
 8000b38:	4a2d      	ldr	r2, [pc, #180]	@ (8000bf0 <process_step_motor+0xf8>)
 8000b3a:	6013      	str	r3, [r2, #0]
 8000b3c:	e00b      	b.n	8000b56 <process_step_motor+0x5e>
        else          step_index = (step_index + 3) % 4;
 8000b3e:	4b2c      	ldr	r3, [pc, #176]	@ (8000bf0 <process_step_motor+0xf8>)
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	3303      	adds	r3, #3
 8000b44:	425a      	negs	r2, r3
 8000b46:	f003 0303 	and.w	r3, r3, #3
 8000b4a:	f002 0203 	and.w	r2, r2, #3
 8000b4e:	bf58      	it	pl
 8000b50:	4253      	negpl	r3, r2
 8000b52:	4a27      	ldr	r2, [pc, #156]	@ (8000bf0 <process_step_motor+0xf8>)
 8000b54:	6013      	str	r3, [r2, #0]

        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, step_seq[step_index][0]);
 8000b56:	4b26      	ldr	r3, [pc, #152]	@ (8000bf0 <process_step_motor+0xf8>)
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	4a26      	ldr	r2, [pc, #152]	@ (8000bf4 <process_step_motor+0xfc>)
 8000b5c:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 8000b60:	461a      	mov	r2, r3
 8000b62:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000b66:	4824      	ldr	r0, [pc, #144]	@ (8000bf8 <process_step_motor+0x100>)
 8000b68:	f000 fff2 	bl	8001b50 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, step_seq[step_index][1]);
 8000b6c:	4b20      	ldr	r3, [pc, #128]	@ (8000bf0 <process_step_motor+0xf8>)
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	4a20      	ldr	r2, [pc, #128]	@ (8000bf4 <process_step_motor+0xfc>)
 8000b72:	009b      	lsls	r3, r3, #2
 8000b74:	4413      	add	r3, r2
 8000b76:	785b      	ldrb	r3, [r3, #1]
 8000b78:	461a      	mov	r2, r3
 8000b7a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000b7e:	481e      	ldr	r0, [pc, #120]	@ (8000bf8 <process_step_motor+0x100>)
 8000b80:	f000 ffe6 	bl	8001b50 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, step_seq[step_index][2]);
 8000b84:	4b1a      	ldr	r3, [pc, #104]	@ (8000bf0 <process_step_motor+0xf8>)
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	4a1a      	ldr	r2, [pc, #104]	@ (8000bf4 <process_step_motor+0xfc>)
 8000b8a:	009b      	lsls	r3, r3, #2
 8000b8c:	4413      	add	r3, r2
 8000b8e:	789b      	ldrb	r3, [r3, #2]
 8000b90:	461a      	mov	r2, r3
 8000b92:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000b96:	4818      	ldr	r0, [pc, #96]	@ (8000bf8 <process_step_motor+0x100>)
 8000b98:	f000 ffda 	bl	8001b50 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, step_seq[step_index][3]);
 8000b9c:	4b14      	ldr	r3, [pc, #80]	@ (8000bf0 <process_step_motor+0xf8>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	4a14      	ldr	r2, [pc, #80]	@ (8000bf4 <process_step_motor+0xfc>)
 8000ba2:	009b      	lsls	r3, r3, #2
 8000ba4:	4413      	add	r3, r2
 8000ba6:	78db      	ldrb	r3, [r3, #3]
 8000ba8:	461a      	mov	r2, r3
 8000baa:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000bae:	4812      	ldr	r0, [pc, #72]	@ (8000bf8 <process_step_motor+0x100>)
 8000bb0:	f000 ffce 	bl	8001b50 <HAL_GPIO_WritePin>

        step_remain--;
 8000bb4:	4b0a      	ldr	r3, [pc, #40]	@ (8000be0 <process_step_motor+0xe8>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	3b01      	subs	r3, #1
 8000bba:	4a09      	ldr	r2, [pc, #36]	@ (8000be0 <process_step_motor+0xe8>)
 8000bbc:	6013      	str	r3, [r2, #0]
        step_last_tick = tick_1ms;
 8000bbe:	4b09      	ldr	r3, [pc, #36]	@ (8000be4 <process_step_motor+0xec>)
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	4a09      	ldr	r2, [pc, #36]	@ (8000be8 <process_step_motor+0xf0>)
 8000bc4:	6013      	str	r3, [r2, #0]
        if (step_remain <= 0) {
 8000bc6:	4b06      	ldr	r3, [pc, #24]	@ (8000be0 <process_step_motor+0xe8>)
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	dc04      	bgt.n	8000bd8 <process_step_motor+0xe0>
            step_busy = 0;
 8000bce:	4b03      	ldr	r3, [pc, #12]	@ (8000bdc <process_step_motor+0xe4>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	701a      	strb	r2, [r3, #0]
 8000bd4:	e000      	b.n	8000bd8 <process_step_motor+0xe0>
    if (!step_busy || step_remain <= 0) return;
 8000bd6:	bf00      	nop
        }
    }
}
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	20000184 	.word	0x20000184
 8000be0:	2000017c 	.word	0x2000017c
 8000be4:	2000015c 	.word	0x2000015c
 8000be8:	20000180 	.word	0x20000180
 8000bec:	20000178 	.word	0x20000178
 8000bf0:	20000170 	.word	0x20000170
 8000bf4:	08005434 	.word	0x08005434
 8000bf8:	40020800 	.word	0x40020800

08000bfc <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b082      	sub	sp, #8
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART2) {
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	4a15      	ldr	r2, [pc, #84]	@ (8000c60 <HAL_UART_RxCpltCallback+0x64>)
 8000c0a:	4293      	cmp	r3, r2
 8000c0c:	d124      	bne.n	8000c58 <HAL_UART_RxCpltCallback+0x5c>
        if (rx_ch == '\n' || cmd_index >= CMD_BUF_LEN - 1) {
 8000c0e:	4b15      	ldr	r3, [pc, #84]	@ (8000c64 <HAL_UART_RxCpltCallback+0x68>)
 8000c10:	781b      	ldrb	r3, [r3, #0]
 8000c12:	2b0a      	cmp	r3, #10
 8000c14:	d003      	beq.n	8000c1e <HAL_UART_RxCpltCallback+0x22>
 8000c16:	4b14      	ldr	r3, [pc, #80]	@ (8000c68 <HAL_UART_RxCpltCallback+0x6c>)
 8000c18:	781b      	ldrb	r3, [r3, #0]
 8000c1a:	2b06      	cmp	r3, #6
 8000c1c:	d90c      	bls.n	8000c38 <HAL_UART_RxCpltCallback+0x3c>
            cmd_buf[cmd_index] = 0;
 8000c1e:	4b12      	ldr	r3, [pc, #72]	@ (8000c68 <HAL_UART_RxCpltCallback+0x6c>)
 8000c20:	781b      	ldrb	r3, [r3, #0]
 8000c22:	461a      	mov	r2, r3
 8000c24:	4b11      	ldr	r3, [pc, #68]	@ (8000c6c <HAL_UART_RxCpltCallback+0x70>)
 8000c26:	2100      	movs	r1, #0
 8000c28:	5499      	strb	r1, [r3, r2]
            rx_flag = 1;              // 플래그만 세팅
 8000c2a:	4b11      	ldr	r3, [pc, #68]	@ (8000c70 <HAL_UART_RxCpltCallback+0x74>)
 8000c2c:	2201      	movs	r2, #1
 8000c2e:	701a      	strb	r2, [r3, #0]
            cmd_index = 0;
 8000c30:	4b0d      	ldr	r3, [pc, #52]	@ (8000c68 <HAL_UART_RxCpltCallback+0x6c>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	701a      	strb	r2, [r3, #0]
 8000c36:	e00a      	b.n	8000c4e <HAL_UART_RxCpltCallback+0x52>
        } else {
            cmd_buf[cmd_index++] = rx_ch;
 8000c38:	4b0b      	ldr	r3, [pc, #44]	@ (8000c68 <HAL_UART_RxCpltCallback+0x6c>)
 8000c3a:	781b      	ldrb	r3, [r3, #0]
 8000c3c:	1c5a      	adds	r2, r3, #1
 8000c3e:	b2d1      	uxtb	r1, r2
 8000c40:	4a09      	ldr	r2, [pc, #36]	@ (8000c68 <HAL_UART_RxCpltCallback+0x6c>)
 8000c42:	7011      	strb	r1, [r2, #0]
 8000c44:	461a      	mov	r2, r3
 8000c46:	4b07      	ldr	r3, [pc, #28]	@ (8000c64 <HAL_UART_RxCpltCallback+0x68>)
 8000c48:	7819      	ldrb	r1, [r3, #0]
 8000c4a:	4b08      	ldr	r3, [pc, #32]	@ (8000c6c <HAL_UART_RxCpltCallback+0x70>)
 8000c4c:	5499      	strb	r1, [r3, r2]
        }
        HAL_UART_Receive_IT(&huart2, &rx_ch, 1); // 재수신
 8000c4e:	2201      	movs	r2, #1
 8000c50:	4904      	ldr	r1, [pc, #16]	@ (8000c64 <HAL_UART_RxCpltCallback+0x68>)
 8000c52:	4808      	ldr	r0, [pc, #32]	@ (8000c74 <HAL_UART_RxCpltCallback+0x78>)
 8000c54:	f002 fba9 	bl	80033aa <HAL_UART_Receive_IT>
    }
}
 8000c58:	bf00      	nop
 8000c5a:	3708      	adds	r7, #8
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	bd80      	pop	{r7, pc}
 8000c60:	40004400 	.word	0x40004400
 8000c64:	2000016c 	.word	0x2000016c
 8000c68:	2000016d 	.word	0x2000016d
 8000c6c:	20000164 	.word	0x20000164
 8000c70:	2000016e 	.word	0x2000016e
 8000c74:	20000114 	.word	0x20000114

08000c78 <parsing_command>:

void parsing_command(char *recvBuf)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b08a      	sub	sp, #40	@ 0x28
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
    int i = 0;
 8000c80:	2300      	movs	r3, #0
 8000c82:	627b      	str	r3, [r7, #36]	@ 0x24
    char *pToken;
    char *pArray[2] = { 0 };
 8000c84:	f107 030c 	add.w	r3, r7, #12
 8000c88:	2200      	movs	r2, #0
 8000c8a:	601a      	str	r2, [r3, #0]
 8000c8c:	605a      	str	r2, [r3, #4]

    if (recvBuf[strlen(recvBuf) - 1] == '\n')
 8000c8e:	6878      	ldr	r0, [r7, #4]
 8000c90:	f7ff faa6 	bl	80001e0 <strlen>
 8000c94:	4603      	mov	r3, r0
 8000c96:	3b01      	subs	r3, #1
 8000c98:	687a      	ldr	r2, [r7, #4]
 8000c9a:	4413      	add	r3, r2
 8000c9c:	781b      	ldrb	r3, [r3, #0]
 8000c9e:	2b0a      	cmp	r3, #10
 8000ca0:	d108      	bne.n	8000cb4 <parsing_command+0x3c>
        recvBuf[strlen(recvBuf) - 1] = '\0';
 8000ca2:	6878      	ldr	r0, [r7, #4]
 8000ca4:	f7ff fa9c 	bl	80001e0 <strlen>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	3b01      	subs	r3, #1
 8000cac:	687a      	ldr	r2, [r7, #4]
 8000cae:	4413      	add	r3, r2
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	701a      	strb	r2, [r3, #0]

    pToken = strtok(recvBuf, "@");
 8000cb4:	4934      	ldr	r1, [pc, #208]	@ (8000d88 <parsing_command+0x110>)
 8000cb6:	6878      	ldr	r0, [r7, #4]
 8000cb8:	f003 fd1a 	bl	80046f0 <strtok>
 8000cbc:	6238      	str	r0, [r7, #32]
    while (pToken != NULL) {
 8000cbe:	e011      	b.n	8000ce4 <parsing_command+0x6c>
        pArray[i] = pToken;
 8000cc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000cc2:	009b      	lsls	r3, r3, #2
 8000cc4:	3328      	adds	r3, #40	@ 0x28
 8000cc6:	443b      	add	r3, r7
 8000cc8:	6a3a      	ldr	r2, [r7, #32]
 8000cca:	f843 2c1c 	str.w	r2, [r3, #-28]
        if (++i >= 2) break;
 8000cce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000cd0:	3301      	adds	r3, #1
 8000cd2:	627b      	str	r3, [r7, #36]	@ 0x24
 8000cd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000cd6:	2b01      	cmp	r3, #1
 8000cd8:	dc08      	bgt.n	8000cec <parsing_command+0x74>
        pToken = strtok(NULL, "@");
 8000cda:	492b      	ldr	r1, [pc, #172]	@ (8000d88 <parsing_command+0x110>)
 8000cdc:	2000      	movs	r0, #0
 8000cde:	f003 fd07 	bl	80046f0 <strtok>
 8000ce2:	6238      	str	r0, [r7, #32]
    while (pToken != NULL) {
 8000ce4:	6a3b      	ldr	r3, [r7, #32]
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d1ea      	bne.n	8000cc0 <parsing_command+0x48>
 8000cea:	e000      	b.n	8000cee <parsing_command+0x76>
        if (++i >= 2) break;
 8000cec:	bf00      	nop
    }

    if (i < 2) {
 8000cee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000cf0:	2b01      	cmp	r3, #1
 8000cf2:	dc04      	bgt.n	8000cfe <parsing_command+0x86>
        printf("Parsing error: too few tokens (%d)\r\n", i);
 8000cf4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8000cf6:	4825      	ldr	r0, [pc, #148]	@ (8000d8c <parsing_command+0x114>)
 8000cf8:	f003 fbaa 	bl	8004450 <iprintf>
        return;
 8000cfc:	e040      	b.n	8000d80 <parsing_command+0x108>
    }
    if (pArray[0] == NULL || pArray[1] == NULL) {
 8000cfe:	68fb      	ldr	r3, [r7, #12]
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d002      	beq.n	8000d0a <parsing_command+0x92>
 8000d04:	693b      	ldr	r3, [r7, #16]
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d103      	bne.n	8000d12 <parsing_command+0x9a>
        printf("Parsing error: NULL token(s)\r\n");
 8000d0a:	4821      	ldr	r0, [pc, #132]	@ (8000d90 <parsing_command+0x118>)
 8000d0c:	f003 fc08 	bl	8004520 <puts>
        return;
 8000d10:	e036      	b.n	8000d80 <parsing_command+0x108>
    }

    char area = pArray[0][0];
 8000d12:	68fb      	ldr	r3, [r7, #12]
 8000d14:	781b      	ldrb	r3, [r3, #0]
 8000d16:	76fb      	strb	r3, [r7, #27]
    int level = 1;
 8000d18:	2301      	movs	r3, #1
 8000d1a:	617b      	str	r3, [r7, #20]

    if (strlen(pArray[1]) == 1 && pArray[1][0] >= '1' && pArray[1][0] <= '3') {
 8000d1c:	693b      	ldr	r3, [r7, #16]
 8000d1e:	4618      	mov	r0, r3
 8000d20:	f7ff fa5e 	bl	80001e0 <strlen>
 8000d24:	4603      	mov	r3, r0
 8000d26:	2b01      	cmp	r3, #1
 8000d28:	d111      	bne.n	8000d4e <parsing_command+0xd6>
 8000d2a:	693b      	ldr	r3, [r7, #16]
 8000d2c:	781b      	ldrb	r3, [r3, #0]
 8000d2e:	2b30      	cmp	r3, #48	@ 0x30
 8000d30:	d90d      	bls.n	8000d4e <parsing_command+0xd6>
 8000d32:	693b      	ldr	r3, [r7, #16]
 8000d34:	781b      	ldrb	r3, [r3, #0]
 8000d36:	2b33      	cmp	r3, #51	@ 0x33
 8000d38:	d809      	bhi.n	8000d4e <parsing_command+0xd6>
        level = pArray[1][0] - '0';
 8000d3a:	693b      	ldr	r3, [r7, #16]
 8000d3c:	781b      	ldrb	r3, [r3, #0]
 8000d3e:	3b30      	subs	r3, #48	@ 0x30
 8000d40:	617b      	str	r3, [r7, #20]
    } else {
        printf("Parsing error: level token invalid (%s)\r\n", pArray[1]);
        return;
    }

    int move_deg = 0;
 8000d42:	2300      	movs	r3, #0
 8000d44:	61fb      	str	r3, [r7, #28]
    if (level == 1) move_deg = LEVEL_1_DEGREE;
 8000d46:	697b      	ldr	r3, [r7, #20]
 8000d48:	2b01      	cmp	r3, #1
 8000d4a:	d006      	beq.n	8000d5a <parsing_command+0xe2>
 8000d4c:	e008      	b.n	8000d60 <parsing_command+0xe8>
        printf("Parsing error: level token invalid (%s)\r\n", pArray[1]);
 8000d4e:	693b      	ldr	r3, [r7, #16]
 8000d50:	4619      	mov	r1, r3
 8000d52:	4810      	ldr	r0, [pc, #64]	@ (8000d94 <parsing_command+0x11c>)
 8000d54:	f003 fb7c 	bl	8004450 <iprintf>
        return;
 8000d58:	e012      	b.n	8000d80 <parsing_command+0x108>
    if (level == 1) move_deg = LEVEL_1_DEGREE;
 8000d5a:	231e      	movs	r3, #30
 8000d5c:	61fb      	str	r3, [r7, #28]
 8000d5e:	e00a      	b.n	8000d76 <parsing_command+0xfe>
    else if (level == 2) move_deg = LEVEL_2_DEGREE;
 8000d60:	697b      	ldr	r3, [r7, #20]
 8000d62:	2b02      	cmp	r3, #2
 8000d64:	d102      	bne.n	8000d6c <parsing_command+0xf4>
 8000d66:	2314      	movs	r3, #20
 8000d68:	61fb      	str	r3, [r7, #28]
 8000d6a:	e004      	b.n	8000d76 <parsing_command+0xfe>
    else if (level == 3) move_deg = LEVEL_3_DEGREE;
 8000d6c:	697b      	ldr	r3, [r7, #20]
 8000d6e:	2b03      	cmp	r3, #3
 8000d70:	d101      	bne.n	8000d76 <parsing_command+0xfe>
 8000d72:	230a      	movs	r3, #10
 8000d74:	61fb      	str	r3, [r7, #28]

    control_pantilt(area, move_deg);
 8000d76:	7efb      	ldrb	r3, [r7, #27]
 8000d78:	69f9      	ldr	r1, [r7, #28]
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	f000 f80c 	bl	8000d98 <control_pantilt>
}
 8000d80:	3728      	adds	r7, #40	@ 0x28
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	bf00      	nop
 8000d88:	080053bc 	.word	0x080053bc
 8000d8c:	080053c0 	.word	0x080053c0
 8000d90:	080053e8 	.word	0x080053e8
 8000d94:	08005408 	.word	0x08005408

08000d98 <control_pantilt>:

void control_pantilt(char area, int move_deg)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b082      	sub	sp, #8
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	4603      	mov	r3, r0
 8000da0:	6039      	str	r1, [r7, #0]
 8000da2:	71fb      	strb	r3, [r7, #7]
    switch(area) {
 8000da4:	79fb      	ldrb	r3, [r7, #7]
 8000da6:	3b41      	subs	r3, #65	@ 0x41
 8000da8:	2b19      	cmp	r3, #25
 8000daa:	f200 80c9 	bhi.w	8000f40 <control_pantilt+0x1a8>
 8000dae:	a201      	add	r2, pc, #4	@ (adr r2, 8000db4 <control_pantilt+0x1c>)
 8000db0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000db4:	08000ea5 	.word	0x08000ea5
 8000db8:	08000f41 	.word	0x08000f41
 8000dbc:	08000f11 	.word	0x08000f11
 8000dc0:	08000eaf 	.word	0x08000eaf
 8000dc4:	08000e75 	.word	0x08000e75
 8000dc8:	08000f41 	.word	0x08000f41
 8000dcc:	08000f41 	.word	0x08000f41
 8000dd0:	08000f41 	.word	0x08000f41
 8000dd4:	08000f41 	.word	0x08000f41
 8000dd8:	08000f41 	.word	0x08000f41
 8000ddc:	08000f41 	.word	0x08000f41
 8000de0:	08000f41 	.word	0x08000f41
 8000de4:	08000f41 	.word	0x08000f41
 8000de8:	08000f41 	.word	0x08000f41
 8000dec:	08000f41 	.word	0x08000f41
 8000df0:	08000f41 	.word	0x08000f41
 8000df4:	08000e1d 	.word	0x08000e1d
 8000df8:	08000f41 	.word	0x08000f41
 8000dfc:	08000f41 	.word	0x08000f41
 8000e00:	08000f41 	.word	0x08000f41
 8000e04:	08000f41 	.word	0x08000f41
 8000e08:	08000f41 	.word	0x08000f41
 8000e0c:	08000e4d 	.word	0x08000e4d
 8000e10:	08000ee9 	.word	0x08000ee9
 8000e14:	08000f41 	.word	0x08000f41
 8000e18:	08000eb9 	.word	0x08000eb9
        case 'Q': // 좌상
            if (current_servo_degree + move_deg <= 180)
 8000e1c:	4b4b      	ldr	r3, [pc, #300]	@ (8000f4c <control_pantilt+0x1b4>)
 8000e1e:	781b      	ldrb	r3, [r3, #0]
 8000e20:	461a      	mov	r2, r3
 8000e22:	683b      	ldr	r3, [r7, #0]
 8000e24:	4413      	add	r3, r2
 8000e26:	2bb4      	cmp	r3, #180	@ 0xb4
 8000e28:	dc08      	bgt.n	8000e3c <control_pantilt+0xa4>
                set_servo_degree(current_servo_degree + move_deg);
 8000e2a:	4b48      	ldr	r3, [pc, #288]	@ (8000f4c <control_pantilt+0x1b4>)
 8000e2c:	781b      	ldrb	r3, [r3, #0]
 8000e2e:	461a      	mov	r2, r3
 8000e30:	683b      	ldr	r3, [r7, #0]
 8000e32:	4413      	add	r3, r2
 8000e34:	4618      	mov	r0, r3
 8000e36:	f7ff fdef 	bl	8000a18 <set_servo_degree>
 8000e3a:	e002      	b.n	8000e42 <control_pantilt+0xaa>
            else
                set_servo_degree(180);
 8000e3c:	20b4      	movs	r0, #180	@ 0xb4
 8000e3e:	f7ff fdeb 	bl	8000a18 <set_servo_degree>
            set_step_degree(move_deg, 0); // 좌
 8000e42:	2100      	movs	r1, #0
 8000e44:	6838      	ldr	r0, [r7, #0]
 8000e46:	f7ff fe1b 	bl	8000a80 <set_step_degree>
            break;
 8000e4a:	e07a      	b.n	8000f42 <control_pantilt+0x1aa>
        case 'W': // 상
            if (current_servo_degree + move_deg <= 180)
 8000e4c:	4b3f      	ldr	r3, [pc, #252]	@ (8000f4c <control_pantilt+0x1b4>)
 8000e4e:	781b      	ldrb	r3, [r3, #0]
 8000e50:	461a      	mov	r2, r3
 8000e52:	683b      	ldr	r3, [r7, #0]
 8000e54:	4413      	add	r3, r2
 8000e56:	2bb4      	cmp	r3, #180	@ 0xb4
 8000e58:	dc08      	bgt.n	8000e6c <control_pantilt+0xd4>
                set_servo_degree(current_servo_degree + move_deg);
 8000e5a:	4b3c      	ldr	r3, [pc, #240]	@ (8000f4c <control_pantilt+0x1b4>)
 8000e5c:	781b      	ldrb	r3, [r3, #0]
 8000e5e:	461a      	mov	r2, r3
 8000e60:	683b      	ldr	r3, [r7, #0]
 8000e62:	4413      	add	r3, r2
 8000e64:	4618      	mov	r0, r3
 8000e66:	f7ff fdd7 	bl	8000a18 <set_servo_degree>
            else
                set_servo_degree(180);
            break;
 8000e6a:	e06a      	b.n	8000f42 <control_pantilt+0x1aa>
                set_servo_degree(180);
 8000e6c:	20b4      	movs	r0, #180	@ 0xb4
 8000e6e:	f7ff fdd3 	bl	8000a18 <set_servo_degree>
            break;
 8000e72:	e066      	b.n	8000f42 <control_pantilt+0x1aa>
        case 'E': // 우상
            if (current_servo_degree + move_deg <= 180)
 8000e74:	4b35      	ldr	r3, [pc, #212]	@ (8000f4c <control_pantilt+0x1b4>)
 8000e76:	781b      	ldrb	r3, [r3, #0]
 8000e78:	461a      	mov	r2, r3
 8000e7a:	683b      	ldr	r3, [r7, #0]
 8000e7c:	4413      	add	r3, r2
 8000e7e:	2bb4      	cmp	r3, #180	@ 0xb4
 8000e80:	dc08      	bgt.n	8000e94 <control_pantilt+0xfc>
                set_servo_degree(current_servo_degree + move_deg);
 8000e82:	4b32      	ldr	r3, [pc, #200]	@ (8000f4c <control_pantilt+0x1b4>)
 8000e84:	781b      	ldrb	r3, [r3, #0]
 8000e86:	461a      	mov	r2, r3
 8000e88:	683b      	ldr	r3, [r7, #0]
 8000e8a:	4413      	add	r3, r2
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	f7ff fdc3 	bl	8000a18 <set_servo_degree>
 8000e92:	e002      	b.n	8000e9a <control_pantilt+0x102>
            else
                set_servo_degree(180);
 8000e94:	20b4      	movs	r0, #180	@ 0xb4
 8000e96:	f7ff fdbf 	bl	8000a18 <set_servo_degree>
            set_step_degree(move_deg, 1); // 우
 8000e9a:	2101      	movs	r1, #1
 8000e9c:	6838      	ldr	r0, [r7, #0]
 8000e9e:	f7ff fdef 	bl	8000a80 <set_step_degree>
            break;
 8000ea2:	e04e      	b.n	8000f42 <control_pantilt+0x1aa>
        case 'A': // 좌
        	set_step_degree(move_deg, 0); // 좌
 8000ea4:	2100      	movs	r1, #0
 8000ea6:	6838      	ldr	r0, [r7, #0]
 8000ea8:	f7ff fdea 	bl	8000a80 <set_step_degree>
            break;
 8000eac:	e049      	b.n	8000f42 <control_pantilt+0x1aa>
        case 'S': // 중앙(정지)
            break;
        case 'D': // 우
        	set_step_degree(move_deg, 1); // 우
 8000eae:	2101      	movs	r1, #1
 8000eb0:	6838      	ldr	r0, [r7, #0]
 8000eb2:	f7ff fde5 	bl	8000a80 <set_step_degree>
            break;
 8000eb6:	e044      	b.n	8000f42 <control_pantilt+0x1aa>
        case 'Z': // 좌하
            if (current_servo_degree - move_deg >= 0)
 8000eb8:	4b24      	ldr	r3, [pc, #144]	@ (8000f4c <control_pantilt+0x1b4>)
 8000eba:	781b      	ldrb	r3, [r3, #0]
 8000ebc:	461a      	mov	r2, r3
 8000ebe:	683b      	ldr	r3, [r7, #0]
 8000ec0:	1ad3      	subs	r3, r2, r3
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	db08      	blt.n	8000ed8 <control_pantilt+0x140>
                set_servo_degree(current_servo_degree - move_deg);
 8000ec6:	4b21      	ldr	r3, [pc, #132]	@ (8000f4c <control_pantilt+0x1b4>)
 8000ec8:	781b      	ldrb	r3, [r3, #0]
 8000eca:	461a      	mov	r2, r3
 8000ecc:	683b      	ldr	r3, [r7, #0]
 8000ece:	1ad3      	subs	r3, r2, r3
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	f7ff fda1 	bl	8000a18 <set_servo_degree>
 8000ed6:	e002      	b.n	8000ede <control_pantilt+0x146>
            else
                set_servo_degree(0);
 8000ed8:	2000      	movs	r0, #0
 8000eda:	f7ff fd9d 	bl	8000a18 <set_servo_degree>
            set_step_degree(move_deg, 0); // 좌
 8000ede:	2100      	movs	r1, #0
 8000ee0:	6838      	ldr	r0, [r7, #0]
 8000ee2:	f7ff fdcd 	bl	8000a80 <set_step_degree>
            break;
 8000ee6:	e02c      	b.n	8000f42 <control_pantilt+0x1aa>
        case 'X': // 하
            if (current_servo_degree - move_deg >= 0)
 8000ee8:	4b18      	ldr	r3, [pc, #96]	@ (8000f4c <control_pantilt+0x1b4>)
 8000eea:	781b      	ldrb	r3, [r3, #0]
 8000eec:	461a      	mov	r2, r3
 8000eee:	683b      	ldr	r3, [r7, #0]
 8000ef0:	1ad3      	subs	r3, r2, r3
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	db08      	blt.n	8000f08 <control_pantilt+0x170>
                set_servo_degree(current_servo_degree - move_deg);
 8000ef6:	4b15      	ldr	r3, [pc, #84]	@ (8000f4c <control_pantilt+0x1b4>)
 8000ef8:	781b      	ldrb	r3, [r3, #0]
 8000efa:	461a      	mov	r2, r3
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	1ad3      	subs	r3, r2, r3
 8000f00:	4618      	mov	r0, r3
 8000f02:	f7ff fd89 	bl	8000a18 <set_servo_degree>
            else
                set_servo_degree(0);
            break;
 8000f06:	e01c      	b.n	8000f42 <control_pantilt+0x1aa>
                set_servo_degree(0);
 8000f08:	2000      	movs	r0, #0
 8000f0a:	f7ff fd85 	bl	8000a18 <set_servo_degree>
            break;
 8000f0e:	e018      	b.n	8000f42 <control_pantilt+0x1aa>
        case 'C': // 우하
            if (current_servo_degree - move_deg >= 0)
 8000f10:	4b0e      	ldr	r3, [pc, #56]	@ (8000f4c <control_pantilt+0x1b4>)
 8000f12:	781b      	ldrb	r3, [r3, #0]
 8000f14:	461a      	mov	r2, r3
 8000f16:	683b      	ldr	r3, [r7, #0]
 8000f18:	1ad3      	subs	r3, r2, r3
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	db08      	blt.n	8000f30 <control_pantilt+0x198>
                set_servo_degree(current_servo_degree - move_deg);
 8000f1e:	4b0b      	ldr	r3, [pc, #44]	@ (8000f4c <control_pantilt+0x1b4>)
 8000f20:	781b      	ldrb	r3, [r3, #0]
 8000f22:	461a      	mov	r2, r3
 8000f24:	683b      	ldr	r3, [r7, #0]
 8000f26:	1ad3      	subs	r3, r2, r3
 8000f28:	4618      	mov	r0, r3
 8000f2a:	f7ff fd75 	bl	8000a18 <set_servo_degree>
 8000f2e:	e002      	b.n	8000f36 <control_pantilt+0x19e>
            else
                set_servo_degree(0);
 8000f30:	2000      	movs	r0, #0
 8000f32:	f7ff fd71 	bl	8000a18 <set_servo_degree>
            set_step_degree(move_deg, 1); // 우
 8000f36:	2101      	movs	r1, #1
 8000f38:	6838      	ldr	r0, [r7, #0]
 8000f3a:	f7ff fda1 	bl	8000a80 <set_step_degree>
            break;
 8000f3e:	e000      	b.n	8000f42 <control_pantilt+0x1aa>
        default:
            break;
 8000f40:	bf00      	nop
    }
}
 8000f42:	bf00      	nop
 8000f44:	3708      	adds	r7, #8
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	2000016f 	.word	0x2000016f

08000f50 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b082      	sub	sp, #8
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART6 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8000f58:	1d39      	adds	r1, r7, #4
 8000f5a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000f5e:	2201      	movs	r2, #1
 8000f60:	4803      	ldr	r0, [pc, #12]	@ (8000f70 <__io_putchar+0x20>)
 8000f62:	f002 f997 	bl	8003294 <HAL_UART_Transmit>

  return ch;
 8000f66:	687b      	ldr	r3, [r7, #4]
}
 8000f68:	4618      	mov	r0, r3
 8000f6a:	3708      	adds	r7, #8
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bd80      	pop	{r7, pc}
 8000f70:	20000114 	.word	0x20000114

08000f74 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f78:	b672      	cpsid	i
}
 8000f7a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f7c:	bf00      	nop
 8000f7e:	e7fd      	b.n	8000f7c <Error_Handler+0x8>

08000f80 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b082      	sub	sp, #8
 8000f84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f86:	2300      	movs	r3, #0
 8000f88:	607b      	str	r3, [r7, #4]
 8000f8a:	4b10      	ldr	r3, [pc, #64]	@ (8000fcc <HAL_MspInit+0x4c>)
 8000f8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f8e:	4a0f      	ldr	r2, [pc, #60]	@ (8000fcc <HAL_MspInit+0x4c>)
 8000f90:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f94:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f96:	4b0d      	ldr	r3, [pc, #52]	@ (8000fcc <HAL_MspInit+0x4c>)
 8000f98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f9a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f9e:	607b      	str	r3, [r7, #4]
 8000fa0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	603b      	str	r3, [r7, #0]
 8000fa6:	4b09      	ldr	r3, [pc, #36]	@ (8000fcc <HAL_MspInit+0x4c>)
 8000fa8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000faa:	4a08      	ldr	r2, [pc, #32]	@ (8000fcc <HAL_MspInit+0x4c>)
 8000fac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000fb0:	6413      	str	r3, [r2, #64]	@ 0x40
 8000fb2:	4b06      	ldr	r3, [pc, #24]	@ (8000fcc <HAL_MspInit+0x4c>)
 8000fb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fb6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000fba:	603b      	str	r3, [r7, #0]
 8000fbc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000fbe:	2007      	movs	r0, #7
 8000fc0:	f000 fb6e 	bl	80016a0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fc4:	bf00      	nop
 8000fc6:	3708      	adds	r7, #8
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bd80      	pop	{r7, pc}
 8000fcc:	40023800 	.word	0x40023800

08000fd0 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b084      	sub	sp, #16
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000fe0:	d115      	bne.n	800100e <HAL_TIM_PWM_MspInit+0x3e>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	60fb      	str	r3, [r7, #12]
 8000fe6:	4b0c      	ldr	r3, [pc, #48]	@ (8001018 <HAL_TIM_PWM_MspInit+0x48>)
 8000fe8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fea:	4a0b      	ldr	r2, [pc, #44]	@ (8001018 <HAL_TIM_PWM_MspInit+0x48>)
 8000fec:	f043 0301 	orr.w	r3, r3, #1
 8000ff0:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ff2:	4b09      	ldr	r3, [pc, #36]	@ (8001018 <HAL_TIM_PWM_MspInit+0x48>)
 8000ff4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ff6:	f003 0301 	and.w	r3, r3, #1
 8000ffa:	60fb      	str	r3, [r7, #12]
 8000ffc:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000ffe:	2200      	movs	r2, #0
 8001000:	2100      	movs	r1, #0
 8001002:	201c      	movs	r0, #28
 8001004:	f000 fb57 	bl	80016b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001008:	201c      	movs	r0, #28
 800100a:	f000 fb70 	bl	80016ee <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 800100e:	bf00      	nop
 8001010:	3710      	adds	r7, #16
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	40023800 	.word	0x40023800

0800101c <HAL_TIM_OC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_oc: TIM_OC handle pointer
  * @retval None
  */
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b084      	sub	sp, #16
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
  if(htim_oc->Instance==TIM3)
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	4a0e      	ldr	r2, [pc, #56]	@ (8001064 <HAL_TIM_OC_MspInit+0x48>)
 800102a:	4293      	cmp	r3, r2
 800102c:	d115      	bne.n	800105a <HAL_TIM_OC_MspInit+0x3e>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800102e:	2300      	movs	r3, #0
 8001030:	60fb      	str	r3, [r7, #12]
 8001032:	4b0d      	ldr	r3, [pc, #52]	@ (8001068 <HAL_TIM_OC_MspInit+0x4c>)
 8001034:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001036:	4a0c      	ldr	r2, [pc, #48]	@ (8001068 <HAL_TIM_OC_MspInit+0x4c>)
 8001038:	f043 0302 	orr.w	r3, r3, #2
 800103c:	6413      	str	r3, [r2, #64]	@ 0x40
 800103e:	4b0a      	ldr	r3, [pc, #40]	@ (8001068 <HAL_TIM_OC_MspInit+0x4c>)
 8001040:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001042:	f003 0302 	and.w	r3, r3, #2
 8001046:	60fb      	str	r3, [r7, #12]
 8001048:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800104a:	2200      	movs	r2, #0
 800104c:	2100      	movs	r1, #0
 800104e:	201d      	movs	r0, #29
 8001050:	f000 fb31 	bl	80016b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001054:	201d      	movs	r0, #29
 8001056:	f000 fb4a 	bl	80016ee <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM3_MspInit 1 */

  }

}
 800105a:	bf00      	nop
 800105c:	3710      	adds	r7, #16
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	40000400 	.word	0x40000400
 8001068:	40023800 	.word	0x40023800

0800106c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b088      	sub	sp, #32
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001074:	f107 030c 	add.w	r3, r7, #12
 8001078:	2200      	movs	r2, #0
 800107a:	601a      	str	r2, [r3, #0]
 800107c:	605a      	str	r2, [r3, #4]
 800107e:	609a      	str	r2, [r3, #8]
 8001080:	60da      	str	r2, [r3, #12]
 8001082:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800108c:	d11d      	bne.n	80010ca <HAL_TIM_MspPostInit+0x5e>
  {
    /* USER CODE BEGIN TIM2_MspPostInit 0 */

    /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800108e:	2300      	movs	r3, #0
 8001090:	60bb      	str	r3, [r7, #8]
 8001092:	4b10      	ldr	r3, [pc, #64]	@ (80010d4 <HAL_TIM_MspPostInit+0x68>)
 8001094:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001096:	4a0f      	ldr	r2, [pc, #60]	@ (80010d4 <HAL_TIM_MspPostInit+0x68>)
 8001098:	f043 0301 	orr.w	r3, r3, #1
 800109c:	6313      	str	r3, [r2, #48]	@ 0x30
 800109e:	4b0d      	ldr	r3, [pc, #52]	@ (80010d4 <HAL_TIM_MspPostInit+0x68>)
 80010a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010a2:	f003 0301 	and.w	r3, r3, #1
 80010a6:	60bb      	str	r3, [r7, #8]
 80010a8:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80010aa:	2301      	movs	r3, #1
 80010ac:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ae:	2302      	movs	r3, #2
 80010b0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b2:	2300      	movs	r3, #0
 80010b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010b6:	2300      	movs	r3, #0
 80010b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80010ba:	2301      	movs	r3, #1
 80010bc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010be:	f107 030c 	add.w	r3, r7, #12
 80010c2:	4619      	mov	r1, r3
 80010c4:	4804      	ldr	r0, [pc, #16]	@ (80010d8 <HAL_TIM_MspPostInit+0x6c>)
 80010c6:	f000 fbbf 	bl	8001848 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM2_MspPostInit 1 */

    /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80010ca:	bf00      	nop
 80010cc:	3720      	adds	r7, #32
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	40023800 	.word	0x40023800
 80010d8:	40020000 	.word	0x40020000

080010dc <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b08a      	sub	sp, #40	@ 0x28
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010e4:	f107 0314 	add.w	r3, r7, #20
 80010e8:	2200      	movs	r2, #0
 80010ea:	601a      	str	r2, [r3, #0]
 80010ec:	605a      	str	r2, [r3, #4]
 80010ee:	609a      	str	r2, [r3, #8]
 80010f0:	60da      	str	r2, [r3, #12]
 80010f2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	4a1d      	ldr	r2, [pc, #116]	@ (8001170 <HAL_UART_MspInit+0x94>)
 80010fa:	4293      	cmp	r3, r2
 80010fc:	d133      	bne.n	8001166 <HAL_UART_MspInit+0x8a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80010fe:	2300      	movs	r3, #0
 8001100:	613b      	str	r3, [r7, #16]
 8001102:	4b1c      	ldr	r3, [pc, #112]	@ (8001174 <HAL_UART_MspInit+0x98>)
 8001104:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001106:	4a1b      	ldr	r2, [pc, #108]	@ (8001174 <HAL_UART_MspInit+0x98>)
 8001108:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800110c:	6413      	str	r3, [r2, #64]	@ 0x40
 800110e:	4b19      	ldr	r3, [pc, #100]	@ (8001174 <HAL_UART_MspInit+0x98>)
 8001110:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001112:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001116:	613b      	str	r3, [r7, #16]
 8001118:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800111a:	2300      	movs	r3, #0
 800111c:	60fb      	str	r3, [r7, #12]
 800111e:	4b15      	ldr	r3, [pc, #84]	@ (8001174 <HAL_UART_MspInit+0x98>)
 8001120:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001122:	4a14      	ldr	r2, [pc, #80]	@ (8001174 <HAL_UART_MspInit+0x98>)
 8001124:	f043 0301 	orr.w	r3, r3, #1
 8001128:	6313      	str	r3, [r2, #48]	@ 0x30
 800112a:	4b12      	ldr	r3, [pc, #72]	@ (8001174 <HAL_UART_MspInit+0x98>)
 800112c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800112e:	f003 0301 	and.w	r3, r3, #1
 8001132:	60fb      	str	r3, [r7, #12]
 8001134:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001136:	230c      	movs	r3, #12
 8001138:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800113a:	2302      	movs	r3, #2
 800113c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800113e:	2300      	movs	r3, #0
 8001140:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001142:	2303      	movs	r3, #3
 8001144:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001146:	2307      	movs	r3, #7
 8001148:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800114a:	f107 0314 	add.w	r3, r7, #20
 800114e:	4619      	mov	r1, r3
 8001150:	4809      	ldr	r0, [pc, #36]	@ (8001178 <HAL_UART_MspInit+0x9c>)
 8001152:	f000 fb79 	bl	8001848 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001156:	2200      	movs	r2, #0
 8001158:	2100      	movs	r1, #0
 800115a:	2026      	movs	r0, #38	@ 0x26
 800115c:	f000 faab 	bl	80016b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001160:	2026      	movs	r0, #38	@ 0x26
 8001162:	f000 fac4 	bl	80016ee <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8001166:	bf00      	nop
 8001168:	3728      	adds	r7, #40	@ 0x28
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}
 800116e:	bf00      	nop
 8001170:	40004400 	.word	0x40004400
 8001174:	40023800 	.word	0x40023800
 8001178:	40020000 	.word	0x40020000

0800117c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800117c:	b480      	push	{r7}
 800117e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001180:	bf00      	nop
 8001182:	e7fd      	b.n	8001180 <NMI_Handler+0x4>

08001184 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001184:	b480      	push	{r7}
 8001186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001188:	bf00      	nop
 800118a:	e7fd      	b.n	8001188 <HardFault_Handler+0x4>

0800118c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800118c:	b480      	push	{r7}
 800118e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001190:	bf00      	nop
 8001192:	e7fd      	b.n	8001190 <MemManage_Handler+0x4>

08001194 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001194:	b480      	push	{r7}
 8001196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001198:	bf00      	nop
 800119a:	e7fd      	b.n	8001198 <BusFault_Handler+0x4>

0800119c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800119c:	b480      	push	{r7}
 800119e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011a0:	bf00      	nop
 80011a2:	e7fd      	b.n	80011a0 <UsageFault_Handler+0x4>

080011a4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011a4:	b480      	push	{r7}
 80011a6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011a8:	bf00      	nop
 80011aa:	46bd      	mov	sp, r7
 80011ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b0:	4770      	bx	lr

080011b2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011b2:	b480      	push	{r7}
 80011b4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011b6:	bf00      	nop
 80011b8:	46bd      	mov	sp, r7
 80011ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011be:	4770      	bx	lr

080011c0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011c0:	b480      	push	{r7}
 80011c2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011c4:	bf00      	nop
 80011c6:	46bd      	mov	sp, r7
 80011c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011cc:	4770      	bx	lr

080011ce <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011ce:	b580      	push	{r7, lr}
 80011d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011d2:	f000 f975 	bl	80014c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011d6:	bf00      	nop
 80011d8:	bd80      	pop	{r7, pc}
	...

080011dc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80011e0:	4802      	ldr	r0, [pc, #8]	@ (80011ec <TIM2_IRQHandler+0x10>)
 80011e2:	f001 fb17 	bl	8002814 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80011e6:	bf00      	nop
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	20000084 	.word	0x20000084

080011f0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80011f4:	4802      	ldr	r0, [pc, #8]	@ (8001200 <TIM3_IRQHandler+0x10>)
 80011f6:	f001 fb0d 	bl	8002814 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80011fa:	bf00      	nop
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	200000cc 	.word	0x200000cc

08001204 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001208:	4802      	ldr	r0, [pc, #8]	@ (8001214 <USART2_IRQHandler+0x10>)
 800120a:	f002 f8f3 	bl	80033f4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800120e:	bf00      	nop
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	20000114 	.word	0x20000114

08001218 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001218:	b480      	push	{r7}
 800121a:	af00      	add	r7, sp, #0
  return 1;
 800121c:	2301      	movs	r3, #1
}
 800121e:	4618      	mov	r0, r3
 8001220:	46bd      	mov	sp, r7
 8001222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001226:	4770      	bx	lr

08001228 <_kill>:

int _kill(int pid, int sig)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b082      	sub	sp, #8
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
 8001230:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001232:	f003 faff 	bl	8004834 <__errno>
 8001236:	4603      	mov	r3, r0
 8001238:	2216      	movs	r2, #22
 800123a:	601a      	str	r2, [r3, #0]
  return -1;
 800123c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001240:	4618      	mov	r0, r3
 8001242:	3708      	adds	r7, #8
 8001244:	46bd      	mov	sp, r7
 8001246:	bd80      	pop	{r7, pc}

08001248 <_exit>:

void _exit (int status)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b082      	sub	sp, #8
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001250:	f04f 31ff 	mov.w	r1, #4294967295
 8001254:	6878      	ldr	r0, [r7, #4]
 8001256:	f7ff ffe7 	bl	8001228 <_kill>
  while (1) {}    /* Make sure we hang here */
 800125a:	bf00      	nop
 800125c:	e7fd      	b.n	800125a <_exit+0x12>

0800125e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800125e:	b580      	push	{r7, lr}
 8001260:	b086      	sub	sp, #24
 8001262:	af00      	add	r7, sp, #0
 8001264:	60f8      	str	r0, [r7, #12]
 8001266:	60b9      	str	r1, [r7, #8]
 8001268:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800126a:	2300      	movs	r3, #0
 800126c:	617b      	str	r3, [r7, #20]
 800126e:	e00a      	b.n	8001286 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001270:	f3af 8000 	nop.w
 8001274:	4601      	mov	r1, r0
 8001276:	68bb      	ldr	r3, [r7, #8]
 8001278:	1c5a      	adds	r2, r3, #1
 800127a:	60ba      	str	r2, [r7, #8]
 800127c:	b2ca      	uxtb	r2, r1
 800127e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001280:	697b      	ldr	r3, [r7, #20]
 8001282:	3301      	adds	r3, #1
 8001284:	617b      	str	r3, [r7, #20]
 8001286:	697a      	ldr	r2, [r7, #20]
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	429a      	cmp	r2, r3
 800128c:	dbf0      	blt.n	8001270 <_read+0x12>
  }

  return len;
 800128e:	687b      	ldr	r3, [r7, #4]
}
 8001290:	4618      	mov	r0, r3
 8001292:	3718      	adds	r7, #24
 8001294:	46bd      	mov	sp, r7
 8001296:	bd80      	pop	{r7, pc}

08001298 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b086      	sub	sp, #24
 800129c:	af00      	add	r7, sp, #0
 800129e:	60f8      	str	r0, [r7, #12]
 80012a0:	60b9      	str	r1, [r7, #8]
 80012a2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012a4:	2300      	movs	r3, #0
 80012a6:	617b      	str	r3, [r7, #20]
 80012a8:	e009      	b.n	80012be <_write+0x26>
  {
    __io_putchar(*ptr++);
 80012aa:	68bb      	ldr	r3, [r7, #8]
 80012ac:	1c5a      	adds	r2, r3, #1
 80012ae:	60ba      	str	r2, [r7, #8]
 80012b0:	781b      	ldrb	r3, [r3, #0]
 80012b2:	4618      	mov	r0, r3
 80012b4:	f7ff fe4c 	bl	8000f50 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012b8:	697b      	ldr	r3, [r7, #20]
 80012ba:	3301      	adds	r3, #1
 80012bc:	617b      	str	r3, [r7, #20]
 80012be:	697a      	ldr	r2, [r7, #20]
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	429a      	cmp	r2, r3
 80012c4:	dbf1      	blt.n	80012aa <_write+0x12>
  }
  return len;
 80012c6:	687b      	ldr	r3, [r7, #4]
}
 80012c8:	4618      	mov	r0, r3
 80012ca:	3718      	adds	r7, #24
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd80      	pop	{r7, pc}

080012d0 <_close>:

int _close(int file)
{
 80012d0:	b480      	push	{r7}
 80012d2:	b083      	sub	sp, #12
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80012d8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80012dc:	4618      	mov	r0, r3
 80012de:	370c      	adds	r7, #12
 80012e0:	46bd      	mov	sp, r7
 80012e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e6:	4770      	bx	lr

080012e8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80012e8:	b480      	push	{r7}
 80012ea:	b083      	sub	sp, #12
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
 80012f0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80012f8:	605a      	str	r2, [r3, #4]
  return 0;
 80012fa:	2300      	movs	r3, #0
}
 80012fc:	4618      	mov	r0, r3
 80012fe:	370c      	adds	r7, #12
 8001300:	46bd      	mov	sp, r7
 8001302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001306:	4770      	bx	lr

08001308 <_isatty>:

int _isatty(int file)
{
 8001308:	b480      	push	{r7}
 800130a:	b083      	sub	sp, #12
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001310:	2301      	movs	r3, #1
}
 8001312:	4618      	mov	r0, r3
 8001314:	370c      	adds	r7, #12
 8001316:	46bd      	mov	sp, r7
 8001318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131c:	4770      	bx	lr

0800131e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800131e:	b480      	push	{r7}
 8001320:	b085      	sub	sp, #20
 8001322:	af00      	add	r7, sp, #0
 8001324:	60f8      	str	r0, [r7, #12]
 8001326:	60b9      	str	r1, [r7, #8]
 8001328:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800132a:	2300      	movs	r3, #0
}
 800132c:	4618      	mov	r0, r3
 800132e:	3714      	adds	r7, #20
 8001330:	46bd      	mov	sp, r7
 8001332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001336:	4770      	bx	lr

08001338 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b086      	sub	sp, #24
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001340:	4a14      	ldr	r2, [pc, #80]	@ (8001394 <_sbrk+0x5c>)
 8001342:	4b15      	ldr	r3, [pc, #84]	@ (8001398 <_sbrk+0x60>)
 8001344:	1ad3      	subs	r3, r2, r3
 8001346:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001348:	697b      	ldr	r3, [r7, #20]
 800134a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800134c:	4b13      	ldr	r3, [pc, #76]	@ (800139c <_sbrk+0x64>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	2b00      	cmp	r3, #0
 8001352:	d102      	bne.n	800135a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001354:	4b11      	ldr	r3, [pc, #68]	@ (800139c <_sbrk+0x64>)
 8001356:	4a12      	ldr	r2, [pc, #72]	@ (80013a0 <_sbrk+0x68>)
 8001358:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800135a:	4b10      	ldr	r3, [pc, #64]	@ (800139c <_sbrk+0x64>)
 800135c:	681a      	ldr	r2, [r3, #0]
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	4413      	add	r3, r2
 8001362:	693a      	ldr	r2, [r7, #16]
 8001364:	429a      	cmp	r2, r3
 8001366:	d207      	bcs.n	8001378 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001368:	f003 fa64 	bl	8004834 <__errno>
 800136c:	4603      	mov	r3, r0
 800136e:	220c      	movs	r2, #12
 8001370:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001372:	f04f 33ff 	mov.w	r3, #4294967295
 8001376:	e009      	b.n	800138c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001378:	4b08      	ldr	r3, [pc, #32]	@ (800139c <_sbrk+0x64>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800137e:	4b07      	ldr	r3, [pc, #28]	@ (800139c <_sbrk+0x64>)
 8001380:	681a      	ldr	r2, [r3, #0]
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	4413      	add	r3, r2
 8001386:	4a05      	ldr	r2, [pc, #20]	@ (800139c <_sbrk+0x64>)
 8001388:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800138a:	68fb      	ldr	r3, [r7, #12]
}
 800138c:	4618      	mov	r0, r3
 800138e:	3718      	adds	r7, #24
 8001390:	46bd      	mov	sp, r7
 8001392:	bd80      	pop	{r7, pc}
 8001394:	20020000 	.word	0x20020000
 8001398:	00000400 	.word	0x00000400
 800139c:	20000188 	.word	0x20000188
 80013a0:	200002e0 	.word	0x200002e0

080013a4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80013a4:	b480      	push	{r7}
 80013a6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80013a8:	4b06      	ldr	r3, [pc, #24]	@ (80013c4 <SystemInit+0x20>)
 80013aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80013ae:	4a05      	ldr	r2, [pc, #20]	@ (80013c4 <SystemInit+0x20>)
 80013b0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80013b4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013b8:	bf00      	nop
 80013ba:	46bd      	mov	sp, r7
 80013bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c0:	4770      	bx	lr
 80013c2:	bf00      	nop
 80013c4:	e000ed00 	.word	0xe000ed00

080013c8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80013c8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001400 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80013cc:	f7ff ffea 	bl	80013a4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80013d0:	480c      	ldr	r0, [pc, #48]	@ (8001404 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80013d2:	490d      	ldr	r1, [pc, #52]	@ (8001408 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80013d4:	4a0d      	ldr	r2, [pc, #52]	@ (800140c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80013d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013d8:	e002      	b.n	80013e0 <LoopCopyDataInit>

080013da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013de:	3304      	adds	r3, #4

080013e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013e4:	d3f9      	bcc.n	80013da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013e6:	4a0a      	ldr	r2, [pc, #40]	@ (8001410 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80013e8:	4c0a      	ldr	r4, [pc, #40]	@ (8001414 <LoopFillZerobss+0x22>)
  movs r3, #0
 80013ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013ec:	e001      	b.n	80013f2 <LoopFillZerobss>

080013ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013f0:	3204      	adds	r2, #4

080013f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013f4:	d3fb      	bcc.n	80013ee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80013f6:	f003 fa23 	bl	8004840 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80013fa:	f7ff f8df 	bl	80005bc <main>
  bx  lr    
 80013fe:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001400:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001404:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001408:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 800140c:	0800554c 	.word	0x0800554c
  ldr r2, =_sbss
 8001410:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001414:	200002dc 	.word	0x200002dc

08001418 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001418:	e7fe      	b.n	8001418 <ADC_IRQHandler>
	...

0800141c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001420:	4b0e      	ldr	r3, [pc, #56]	@ (800145c <HAL_Init+0x40>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	4a0d      	ldr	r2, [pc, #52]	@ (800145c <HAL_Init+0x40>)
 8001426:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800142a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800142c:	4b0b      	ldr	r3, [pc, #44]	@ (800145c <HAL_Init+0x40>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	4a0a      	ldr	r2, [pc, #40]	@ (800145c <HAL_Init+0x40>)
 8001432:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001436:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001438:	4b08      	ldr	r3, [pc, #32]	@ (800145c <HAL_Init+0x40>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	4a07      	ldr	r2, [pc, #28]	@ (800145c <HAL_Init+0x40>)
 800143e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001442:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001444:	2003      	movs	r0, #3
 8001446:	f000 f92b 	bl	80016a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800144a:	2000      	movs	r0, #0
 800144c:	f000 f808 	bl	8001460 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001450:	f7ff fd96 	bl	8000f80 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001454:	2300      	movs	r3, #0
}
 8001456:	4618      	mov	r0, r3
 8001458:	bd80      	pop	{r7, pc}
 800145a:	bf00      	nop
 800145c:	40023c00 	.word	0x40023c00

08001460 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b082      	sub	sp, #8
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001468:	4b12      	ldr	r3, [pc, #72]	@ (80014b4 <HAL_InitTick+0x54>)
 800146a:	681a      	ldr	r2, [r3, #0]
 800146c:	4b12      	ldr	r3, [pc, #72]	@ (80014b8 <HAL_InitTick+0x58>)
 800146e:	781b      	ldrb	r3, [r3, #0]
 8001470:	4619      	mov	r1, r3
 8001472:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001476:	fbb3 f3f1 	udiv	r3, r3, r1
 800147a:	fbb2 f3f3 	udiv	r3, r2, r3
 800147e:	4618      	mov	r0, r3
 8001480:	f000 f943 	bl	800170a <HAL_SYSTICK_Config>
 8001484:	4603      	mov	r3, r0
 8001486:	2b00      	cmp	r3, #0
 8001488:	d001      	beq.n	800148e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800148a:	2301      	movs	r3, #1
 800148c:	e00e      	b.n	80014ac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	2b0f      	cmp	r3, #15
 8001492:	d80a      	bhi.n	80014aa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001494:	2200      	movs	r2, #0
 8001496:	6879      	ldr	r1, [r7, #4]
 8001498:	f04f 30ff 	mov.w	r0, #4294967295
 800149c:	f000 f90b 	bl	80016b6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80014a0:	4a06      	ldr	r2, [pc, #24]	@ (80014bc <HAL_InitTick+0x5c>)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80014a6:	2300      	movs	r3, #0
 80014a8:	e000      	b.n	80014ac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80014aa:	2301      	movs	r3, #1
}
 80014ac:	4618      	mov	r0, r3
 80014ae:	3708      	adds	r7, #8
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bd80      	pop	{r7, pc}
 80014b4:	20000000 	.word	0x20000000
 80014b8:	20000008 	.word	0x20000008
 80014bc:	20000004 	.word	0x20000004

080014c0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014c0:	b480      	push	{r7}
 80014c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014c4:	4b06      	ldr	r3, [pc, #24]	@ (80014e0 <HAL_IncTick+0x20>)
 80014c6:	781b      	ldrb	r3, [r3, #0]
 80014c8:	461a      	mov	r2, r3
 80014ca:	4b06      	ldr	r3, [pc, #24]	@ (80014e4 <HAL_IncTick+0x24>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	4413      	add	r3, r2
 80014d0:	4a04      	ldr	r2, [pc, #16]	@ (80014e4 <HAL_IncTick+0x24>)
 80014d2:	6013      	str	r3, [r2, #0]
}
 80014d4:	bf00      	nop
 80014d6:	46bd      	mov	sp, r7
 80014d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014dc:	4770      	bx	lr
 80014de:	bf00      	nop
 80014e0:	20000008 	.word	0x20000008
 80014e4:	2000018c 	.word	0x2000018c

080014e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014e8:	b480      	push	{r7}
 80014ea:	af00      	add	r7, sp, #0
  return uwTick;
 80014ec:	4b03      	ldr	r3, [pc, #12]	@ (80014fc <HAL_GetTick+0x14>)
 80014ee:	681b      	ldr	r3, [r3, #0]
}
 80014f0:	4618      	mov	r0, r3
 80014f2:	46bd      	mov	sp, r7
 80014f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f8:	4770      	bx	lr
 80014fa:	bf00      	nop
 80014fc:	2000018c 	.word	0x2000018c

08001500 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001500:	b480      	push	{r7}
 8001502:	b085      	sub	sp, #20
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	f003 0307 	and.w	r3, r3, #7
 800150e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001510:	4b0c      	ldr	r3, [pc, #48]	@ (8001544 <__NVIC_SetPriorityGrouping+0x44>)
 8001512:	68db      	ldr	r3, [r3, #12]
 8001514:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001516:	68ba      	ldr	r2, [r7, #8]
 8001518:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800151c:	4013      	ands	r3, r2
 800151e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001524:	68bb      	ldr	r3, [r7, #8]
 8001526:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001528:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800152c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001530:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001532:	4a04      	ldr	r2, [pc, #16]	@ (8001544 <__NVIC_SetPriorityGrouping+0x44>)
 8001534:	68bb      	ldr	r3, [r7, #8]
 8001536:	60d3      	str	r3, [r2, #12]
}
 8001538:	bf00      	nop
 800153a:	3714      	adds	r7, #20
 800153c:	46bd      	mov	sp, r7
 800153e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001542:	4770      	bx	lr
 8001544:	e000ed00 	.word	0xe000ed00

08001548 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001548:	b480      	push	{r7}
 800154a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800154c:	4b04      	ldr	r3, [pc, #16]	@ (8001560 <__NVIC_GetPriorityGrouping+0x18>)
 800154e:	68db      	ldr	r3, [r3, #12]
 8001550:	0a1b      	lsrs	r3, r3, #8
 8001552:	f003 0307 	and.w	r3, r3, #7
}
 8001556:	4618      	mov	r0, r3
 8001558:	46bd      	mov	sp, r7
 800155a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155e:	4770      	bx	lr
 8001560:	e000ed00 	.word	0xe000ed00

08001564 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001564:	b480      	push	{r7}
 8001566:	b083      	sub	sp, #12
 8001568:	af00      	add	r7, sp, #0
 800156a:	4603      	mov	r3, r0
 800156c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800156e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001572:	2b00      	cmp	r3, #0
 8001574:	db0b      	blt.n	800158e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001576:	79fb      	ldrb	r3, [r7, #7]
 8001578:	f003 021f 	and.w	r2, r3, #31
 800157c:	4907      	ldr	r1, [pc, #28]	@ (800159c <__NVIC_EnableIRQ+0x38>)
 800157e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001582:	095b      	lsrs	r3, r3, #5
 8001584:	2001      	movs	r0, #1
 8001586:	fa00 f202 	lsl.w	r2, r0, r2
 800158a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800158e:	bf00      	nop
 8001590:	370c      	adds	r7, #12
 8001592:	46bd      	mov	sp, r7
 8001594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001598:	4770      	bx	lr
 800159a:	bf00      	nop
 800159c:	e000e100 	.word	0xe000e100

080015a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015a0:	b480      	push	{r7}
 80015a2:	b083      	sub	sp, #12
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	4603      	mov	r3, r0
 80015a8:	6039      	str	r1, [r7, #0]
 80015aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	db0a      	blt.n	80015ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	b2da      	uxtb	r2, r3
 80015b8:	490c      	ldr	r1, [pc, #48]	@ (80015ec <__NVIC_SetPriority+0x4c>)
 80015ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015be:	0112      	lsls	r2, r2, #4
 80015c0:	b2d2      	uxtb	r2, r2
 80015c2:	440b      	add	r3, r1
 80015c4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015c8:	e00a      	b.n	80015e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	b2da      	uxtb	r2, r3
 80015ce:	4908      	ldr	r1, [pc, #32]	@ (80015f0 <__NVIC_SetPriority+0x50>)
 80015d0:	79fb      	ldrb	r3, [r7, #7]
 80015d2:	f003 030f 	and.w	r3, r3, #15
 80015d6:	3b04      	subs	r3, #4
 80015d8:	0112      	lsls	r2, r2, #4
 80015da:	b2d2      	uxtb	r2, r2
 80015dc:	440b      	add	r3, r1
 80015de:	761a      	strb	r2, [r3, #24]
}
 80015e0:	bf00      	nop
 80015e2:	370c      	adds	r7, #12
 80015e4:	46bd      	mov	sp, r7
 80015e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ea:	4770      	bx	lr
 80015ec:	e000e100 	.word	0xe000e100
 80015f0:	e000ed00 	.word	0xe000ed00

080015f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015f4:	b480      	push	{r7}
 80015f6:	b089      	sub	sp, #36	@ 0x24
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	60f8      	str	r0, [r7, #12]
 80015fc:	60b9      	str	r1, [r7, #8]
 80015fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	f003 0307 	and.w	r3, r3, #7
 8001606:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001608:	69fb      	ldr	r3, [r7, #28]
 800160a:	f1c3 0307 	rsb	r3, r3, #7
 800160e:	2b04      	cmp	r3, #4
 8001610:	bf28      	it	cs
 8001612:	2304      	movcs	r3, #4
 8001614:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001616:	69fb      	ldr	r3, [r7, #28]
 8001618:	3304      	adds	r3, #4
 800161a:	2b06      	cmp	r3, #6
 800161c:	d902      	bls.n	8001624 <NVIC_EncodePriority+0x30>
 800161e:	69fb      	ldr	r3, [r7, #28]
 8001620:	3b03      	subs	r3, #3
 8001622:	e000      	b.n	8001626 <NVIC_EncodePriority+0x32>
 8001624:	2300      	movs	r3, #0
 8001626:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001628:	f04f 32ff 	mov.w	r2, #4294967295
 800162c:	69bb      	ldr	r3, [r7, #24]
 800162e:	fa02 f303 	lsl.w	r3, r2, r3
 8001632:	43da      	mvns	r2, r3
 8001634:	68bb      	ldr	r3, [r7, #8]
 8001636:	401a      	ands	r2, r3
 8001638:	697b      	ldr	r3, [r7, #20]
 800163a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800163c:	f04f 31ff 	mov.w	r1, #4294967295
 8001640:	697b      	ldr	r3, [r7, #20]
 8001642:	fa01 f303 	lsl.w	r3, r1, r3
 8001646:	43d9      	mvns	r1, r3
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800164c:	4313      	orrs	r3, r2
         );
}
 800164e:	4618      	mov	r0, r3
 8001650:	3724      	adds	r7, #36	@ 0x24
 8001652:	46bd      	mov	sp, r7
 8001654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001658:	4770      	bx	lr
	...

0800165c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b082      	sub	sp, #8
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	3b01      	subs	r3, #1
 8001668:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800166c:	d301      	bcc.n	8001672 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800166e:	2301      	movs	r3, #1
 8001670:	e00f      	b.n	8001692 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001672:	4a0a      	ldr	r2, [pc, #40]	@ (800169c <SysTick_Config+0x40>)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	3b01      	subs	r3, #1
 8001678:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800167a:	210f      	movs	r1, #15
 800167c:	f04f 30ff 	mov.w	r0, #4294967295
 8001680:	f7ff ff8e 	bl	80015a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001684:	4b05      	ldr	r3, [pc, #20]	@ (800169c <SysTick_Config+0x40>)
 8001686:	2200      	movs	r2, #0
 8001688:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800168a:	4b04      	ldr	r3, [pc, #16]	@ (800169c <SysTick_Config+0x40>)
 800168c:	2207      	movs	r2, #7
 800168e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001690:	2300      	movs	r3, #0
}
 8001692:	4618      	mov	r0, r3
 8001694:	3708      	adds	r7, #8
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}
 800169a:	bf00      	nop
 800169c:	e000e010 	.word	0xe000e010

080016a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b082      	sub	sp, #8
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016a8:	6878      	ldr	r0, [r7, #4]
 80016aa:	f7ff ff29 	bl	8001500 <__NVIC_SetPriorityGrouping>
}
 80016ae:	bf00      	nop
 80016b0:	3708      	adds	r7, #8
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}

080016b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80016b6:	b580      	push	{r7, lr}
 80016b8:	b086      	sub	sp, #24
 80016ba:	af00      	add	r7, sp, #0
 80016bc:	4603      	mov	r3, r0
 80016be:	60b9      	str	r1, [r7, #8]
 80016c0:	607a      	str	r2, [r7, #4]
 80016c2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80016c4:	2300      	movs	r3, #0
 80016c6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80016c8:	f7ff ff3e 	bl	8001548 <__NVIC_GetPriorityGrouping>
 80016cc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016ce:	687a      	ldr	r2, [r7, #4]
 80016d0:	68b9      	ldr	r1, [r7, #8]
 80016d2:	6978      	ldr	r0, [r7, #20]
 80016d4:	f7ff ff8e 	bl	80015f4 <NVIC_EncodePriority>
 80016d8:	4602      	mov	r2, r0
 80016da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016de:	4611      	mov	r1, r2
 80016e0:	4618      	mov	r0, r3
 80016e2:	f7ff ff5d 	bl	80015a0 <__NVIC_SetPriority>
}
 80016e6:	bf00      	nop
 80016e8:	3718      	adds	r7, #24
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}

080016ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016ee:	b580      	push	{r7, lr}
 80016f0:	b082      	sub	sp, #8
 80016f2:	af00      	add	r7, sp, #0
 80016f4:	4603      	mov	r3, r0
 80016f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016fc:	4618      	mov	r0, r3
 80016fe:	f7ff ff31 	bl	8001564 <__NVIC_EnableIRQ>
}
 8001702:	bf00      	nop
 8001704:	3708      	adds	r7, #8
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}

0800170a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800170a:	b580      	push	{r7, lr}
 800170c:	b082      	sub	sp, #8
 800170e:	af00      	add	r7, sp, #0
 8001710:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001712:	6878      	ldr	r0, [r7, #4]
 8001714:	f7ff ffa2 	bl	800165c <SysTick_Config>
 8001718:	4603      	mov	r3, r0
}
 800171a:	4618      	mov	r0, r3
 800171c:	3708      	adds	r7, #8
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}

08001722 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001722:	b580      	push	{r7, lr}
 8001724:	b084      	sub	sp, #16
 8001726:	af00      	add	r7, sp, #0
 8001728:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800172e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001730:	f7ff feda 	bl	80014e8 <HAL_GetTick>
 8001734:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800173c:	b2db      	uxtb	r3, r3
 800173e:	2b02      	cmp	r3, #2
 8001740:	d008      	beq.n	8001754 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	2280      	movs	r2, #128	@ 0x80
 8001746:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	2200      	movs	r2, #0
 800174c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001750:	2301      	movs	r3, #1
 8001752:	e052      	b.n	80017fa <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	681a      	ldr	r2, [r3, #0]
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f022 0216 	bic.w	r2, r2, #22
 8001762:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	695a      	ldr	r2, [r3, #20]
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001772:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001778:	2b00      	cmp	r3, #0
 800177a:	d103      	bne.n	8001784 <HAL_DMA_Abort+0x62>
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001780:	2b00      	cmp	r3, #0
 8001782:	d007      	beq.n	8001794 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	681a      	ldr	r2, [r3, #0]
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f022 0208 	bic.w	r2, r2, #8
 8001792:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	681a      	ldr	r2, [r3, #0]
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f022 0201 	bic.w	r2, r2, #1
 80017a2:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80017a4:	e013      	b.n	80017ce <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80017a6:	f7ff fe9f 	bl	80014e8 <HAL_GetTick>
 80017aa:	4602      	mov	r2, r0
 80017ac:	68bb      	ldr	r3, [r7, #8]
 80017ae:	1ad3      	subs	r3, r2, r3
 80017b0:	2b05      	cmp	r3, #5
 80017b2:	d90c      	bls.n	80017ce <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	2220      	movs	r2, #32
 80017b8:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	2203      	movs	r2, #3
 80017be:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	2200      	movs	r2, #0
 80017c6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80017ca:	2303      	movs	r3, #3
 80017cc:	e015      	b.n	80017fa <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f003 0301 	and.w	r3, r3, #1
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d1e4      	bne.n	80017a6 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80017e0:	223f      	movs	r2, #63	@ 0x3f
 80017e2:	409a      	lsls	r2, r3
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	2201      	movs	r2, #1
 80017ec:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	2200      	movs	r2, #0
 80017f4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80017f8:	2300      	movs	r3, #0
}
 80017fa:	4618      	mov	r0, r3
 80017fc:	3710      	adds	r7, #16
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}

08001802 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001802:	b480      	push	{r7}
 8001804:	b083      	sub	sp, #12
 8001806:	af00      	add	r7, sp, #0
 8001808:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001810:	b2db      	uxtb	r3, r3
 8001812:	2b02      	cmp	r3, #2
 8001814:	d004      	beq.n	8001820 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	2280      	movs	r2, #128	@ 0x80
 800181a:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800181c:	2301      	movs	r3, #1
 800181e:	e00c      	b.n	800183a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	2205      	movs	r2, #5
 8001824:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	681a      	ldr	r2, [r3, #0]
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f022 0201 	bic.w	r2, r2, #1
 8001836:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001838:	2300      	movs	r3, #0
}
 800183a:	4618      	mov	r0, r3
 800183c:	370c      	adds	r7, #12
 800183e:	46bd      	mov	sp, r7
 8001840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001844:	4770      	bx	lr
	...

08001848 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001848:	b480      	push	{r7}
 800184a:	b089      	sub	sp, #36	@ 0x24
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
 8001850:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001852:	2300      	movs	r3, #0
 8001854:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001856:	2300      	movs	r3, #0
 8001858:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800185a:	2300      	movs	r3, #0
 800185c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800185e:	2300      	movs	r3, #0
 8001860:	61fb      	str	r3, [r7, #28]
 8001862:	e159      	b.n	8001b18 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001864:	2201      	movs	r2, #1
 8001866:	69fb      	ldr	r3, [r7, #28]
 8001868:	fa02 f303 	lsl.w	r3, r2, r3
 800186c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	697a      	ldr	r2, [r7, #20]
 8001874:	4013      	ands	r3, r2
 8001876:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001878:	693a      	ldr	r2, [r7, #16]
 800187a:	697b      	ldr	r3, [r7, #20]
 800187c:	429a      	cmp	r2, r3
 800187e:	f040 8148 	bne.w	8001b12 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	685b      	ldr	r3, [r3, #4]
 8001886:	f003 0303 	and.w	r3, r3, #3
 800188a:	2b01      	cmp	r3, #1
 800188c:	d005      	beq.n	800189a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800188e:	683b      	ldr	r3, [r7, #0]
 8001890:	685b      	ldr	r3, [r3, #4]
 8001892:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001896:	2b02      	cmp	r3, #2
 8001898:	d130      	bne.n	80018fc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	689b      	ldr	r3, [r3, #8]
 800189e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80018a0:	69fb      	ldr	r3, [r7, #28]
 80018a2:	005b      	lsls	r3, r3, #1
 80018a4:	2203      	movs	r2, #3
 80018a6:	fa02 f303 	lsl.w	r3, r2, r3
 80018aa:	43db      	mvns	r3, r3
 80018ac:	69ba      	ldr	r2, [r7, #24]
 80018ae:	4013      	ands	r3, r2
 80018b0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	68da      	ldr	r2, [r3, #12]
 80018b6:	69fb      	ldr	r3, [r7, #28]
 80018b8:	005b      	lsls	r3, r3, #1
 80018ba:	fa02 f303 	lsl.w	r3, r2, r3
 80018be:	69ba      	ldr	r2, [r7, #24]
 80018c0:	4313      	orrs	r3, r2
 80018c2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	69ba      	ldr	r2, [r7, #24]
 80018c8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	685b      	ldr	r3, [r3, #4]
 80018ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80018d0:	2201      	movs	r2, #1
 80018d2:	69fb      	ldr	r3, [r7, #28]
 80018d4:	fa02 f303 	lsl.w	r3, r2, r3
 80018d8:	43db      	mvns	r3, r3
 80018da:	69ba      	ldr	r2, [r7, #24]
 80018dc:	4013      	ands	r3, r2
 80018de:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	685b      	ldr	r3, [r3, #4]
 80018e4:	091b      	lsrs	r3, r3, #4
 80018e6:	f003 0201 	and.w	r2, r3, #1
 80018ea:	69fb      	ldr	r3, [r7, #28]
 80018ec:	fa02 f303 	lsl.w	r3, r2, r3
 80018f0:	69ba      	ldr	r2, [r7, #24]
 80018f2:	4313      	orrs	r3, r2
 80018f4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	69ba      	ldr	r2, [r7, #24]
 80018fa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	685b      	ldr	r3, [r3, #4]
 8001900:	f003 0303 	and.w	r3, r3, #3
 8001904:	2b03      	cmp	r3, #3
 8001906:	d017      	beq.n	8001938 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	68db      	ldr	r3, [r3, #12]
 800190c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800190e:	69fb      	ldr	r3, [r7, #28]
 8001910:	005b      	lsls	r3, r3, #1
 8001912:	2203      	movs	r2, #3
 8001914:	fa02 f303 	lsl.w	r3, r2, r3
 8001918:	43db      	mvns	r3, r3
 800191a:	69ba      	ldr	r2, [r7, #24]
 800191c:	4013      	ands	r3, r2
 800191e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	689a      	ldr	r2, [r3, #8]
 8001924:	69fb      	ldr	r3, [r7, #28]
 8001926:	005b      	lsls	r3, r3, #1
 8001928:	fa02 f303 	lsl.w	r3, r2, r3
 800192c:	69ba      	ldr	r2, [r7, #24]
 800192e:	4313      	orrs	r3, r2
 8001930:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	69ba      	ldr	r2, [r7, #24]
 8001936:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	685b      	ldr	r3, [r3, #4]
 800193c:	f003 0303 	and.w	r3, r3, #3
 8001940:	2b02      	cmp	r3, #2
 8001942:	d123      	bne.n	800198c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001944:	69fb      	ldr	r3, [r7, #28]
 8001946:	08da      	lsrs	r2, r3, #3
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	3208      	adds	r2, #8
 800194c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001950:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001952:	69fb      	ldr	r3, [r7, #28]
 8001954:	f003 0307 	and.w	r3, r3, #7
 8001958:	009b      	lsls	r3, r3, #2
 800195a:	220f      	movs	r2, #15
 800195c:	fa02 f303 	lsl.w	r3, r2, r3
 8001960:	43db      	mvns	r3, r3
 8001962:	69ba      	ldr	r2, [r7, #24]
 8001964:	4013      	ands	r3, r2
 8001966:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	691a      	ldr	r2, [r3, #16]
 800196c:	69fb      	ldr	r3, [r7, #28]
 800196e:	f003 0307 	and.w	r3, r3, #7
 8001972:	009b      	lsls	r3, r3, #2
 8001974:	fa02 f303 	lsl.w	r3, r2, r3
 8001978:	69ba      	ldr	r2, [r7, #24]
 800197a:	4313      	orrs	r3, r2
 800197c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800197e:	69fb      	ldr	r3, [r7, #28]
 8001980:	08da      	lsrs	r2, r3, #3
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	3208      	adds	r2, #8
 8001986:	69b9      	ldr	r1, [r7, #24]
 8001988:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001992:	69fb      	ldr	r3, [r7, #28]
 8001994:	005b      	lsls	r3, r3, #1
 8001996:	2203      	movs	r2, #3
 8001998:	fa02 f303 	lsl.w	r3, r2, r3
 800199c:	43db      	mvns	r3, r3
 800199e:	69ba      	ldr	r2, [r7, #24]
 80019a0:	4013      	ands	r3, r2
 80019a2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	f003 0203 	and.w	r2, r3, #3
 80019ac:	69fb      	ldr	r3, [r7, #28]
 80019ae:	005b      	lsls	r3, r3, #1
 80019b0:	fa02 f303 	lsl.w	r3, r2, r3
 80019b4:	69ba      	ldr	r2, [r7, #24]
 80019b6:	4313      	orrs	r3, r2
 80019b8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	69ba      	ldr	r2, [r7, #24]
 80019be:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	f000 80a2 	beq.w	8001b12 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019ce:	2300      	movs	r3, #0
 80019d0:	60fb      	str	r3, [r7, #12]
 80019d2:	4b57      	ldr	r3, [pc, #348]	@ (8001b30 <HAL_GPIO_Init+0x2e8>)
 80019d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019d6:	4a56      	ldr	r2, [pc, #344]	@ (8001b30 <HAL_GPIO_Init+0x2e8>)
 80019d8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80019dc:	6453      	str	r3, [r2, #68]	@ 0x44
 80019de:	4b54      	ldr	r3, [pc, #336]	@ (8001b30 <HAL_GPIO_Init+0x2e8>)
 80019e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019e2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80019e6:	60fb      	str	r3, [r7, #12]
 80019e8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80019ea:	4a52      	ldr	r2, [pc, #328]	@ (8001b34 <HAL_GPIO_Init+0x2ec>)
 80019ec:	69fb      	ldr	r3, [r7, #28]
 80019ee:	089b      	lsrs	r3, r3, #2
 80019f0:	3302      	adds	r3, #2
 80019f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80019f8:	69fb      	ldr	r3, [r7, #28]
 80019fa:	f003 0303 	and.w	r3, r3, #3
 80019fe:	009b      	lsls	r3, r3, #2
 8001a00:	220f      	movs	r2, #15
 8001a02:	fa02 f303 	lsl.w	r3, r2, r3
 8001a06:	43db      	mvns	r3, r3
 8001a08:	69ba      	ldr	r2, [r7, #24]
 8001a0a:	4013      	ands	r3, r2
 8001a0c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	4a49      	ldr	r2, [pc, #292]	@ (8001b38 <HAL_GPIO_Init+0x2f0>)
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d019      	beq.n	8001a4a <HAL_GPIO_Init+0x202>
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	4a48      	ldr	r2, [pc, #288]	@ (8001b3c <HAL_GPIO_Init+0x2f4>)
 8001a1a:	4293      	cmp	r3, r2
 8001a1c:	d013      	beq.n	8001a46 <HAL_GPIO_Init+0x1fe>
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	4a47      	ldr	r2, [pc, #284]	@ (8001b40 <HAL_GPIO_Init+0x2f8>)
 8001a22:	4293      	cmp	r3, r2
 8001a24:	d00d      	beq.n	8001a42 <HAL_GPIO_Init+0x1fa>
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	4a46      	ldr	r2, [pc, #280]	@ (8001b44 <HAL_GPIO_Init+0x2fc>)
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d007      	beq.n	8001a3e <HAL_GPIO_Init+0x1f6>
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	4a45      	ldr	r2, [pc, #276]	@ (8001b48 <HAL_GPIO_Init+0x300>)
 8001a32:	4293      	cmp	r3, r2
 8001a34:	d101      	bne.n	8001a3a <HAL_GPIO_Init+0x1f2>
 8001a36:	2304      	movs	r3, #4
 8001a38:	e008      	b.n	8001a4c <HAL_GPIO_Init+0x204>
 8001a3a:	2307      	movs	r3, #7
 8001a3c:	e006      	b.n	8001a4c <HAL_GPIO_Init+0x204>
 8001a3e:	2303      	movs	r3, #3
 8001a40:	e004      	b.n	8001a4c <HAL_GPIO_Init+0x204>
 8001a42:	2302      	movs	r3, #2
 8001a44:	e002      	b.n	8001a4c <HAL_GPIO_Init+0x204>
 8001a46:	2301      	movs	r3, #1
 8001a48:	e000      	b.n	8001a4c <HAL_GPIO_Init+0x204>
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	69fa      	ldr	r2, [r7, #28]
 8001a4e:	f002 0203 	and.w	r2, r2, #3
 8001a52:	0092      	lsls	r2, r2, #2
 8001a54:	4093      	lsls	r3, r2
 8001a56:	69ba      	ldr	r2, [r7, #24]
 8001a58:	4313      	orrs	r3, r2
 8001a5a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001a5c:	4935      	ldr	r1, [pc, #212]	@ (8001b34 <HAL_GPIO_Init+0x2ec>)
 8001a5e:	69fb      	ldr	r3, [r7, #28]
 8001a60:	089b      	lsrs	r3, r3, #2
 8001a62:	3302      	adds	r3, #2
 8001a64:	69ba      	ldr	r2, [r7, #24]
 8001a66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a6a:	4b38      	ldr	r3, [pc, #224]	@ (8001b4c <HAL_GPIO_Init+0x304>)
 8001a6c:	689b      	ldr	r3, [r3, #8]
 8001a6e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a70:	693b      	ldr	r3, [r7, #16]
 8001a72:	43db      	mvns	r3, r3
 8001a74:	69ba      	ldr	r2, [r7, #24]
 8001a76:	4013      	ands	r3, r2
 8001a78:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d003      	beq.n	8001a8e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001a86:	69ba      	ldr	r2, [r7, #24]
 8001a88:	693b      	ldr	r3, [r7, #16]
 8001a8a:	4313      	orrs	r3, r2
 8001a8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001a8e:	4a2f      	ldr	r2, [pc, #188]	@ (8001b4c <HAL_GPIO_Init+0x304>)
 8001a90:	69bb      	ldr	r3, [r7, #24]
 8001a92:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001a94:	4b2d      	ldr	r3, [pc, #180]	@ (8001b4c <HAL_GPIO_Init+0x304>)
 8001a96:	68db      	ldr	r3, [r3, #12]
 8001a98:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a9a:	693b      	ldr	r3, [r7, #16]
 8001a9c:	43db      	mvns	r3, r3
 8001a9e:	69ba      	ldr	r2, [r7, #24]
 8001aa0:	4013      	ands	r3, r2
 8001aa2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d003      	beq.n	8001ab8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001ab0:	69ba      	ldr	r2, [r7, #24]
 8001ab2:	693b      	ldr	r3, [r7, #16]
 8001ab4:	4313      	orrs	r3, r2
 8001ab6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001ab8:	4a24      	ldr	r2, [pc, #144]	@ (8001b4c <HAL_GPIO_Init+0x304>)
 8001aba:	69bb      	ldr	r3, [r7, #24]
 8001abc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001abe:	4b23      	ldr	r3, [pc, #140]	@ (8001b4c <HAL_GPIO_Init+0x304>)
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ac4:	693b      	ldr	r3, [r7, #16]
 8001ac6:	43db      	mvns	r3, r3
 8001ac8:	69ba      	ldr	r2, [r7, #24]
 8001aca:	4013      	ands	r3, r2
 8001acc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	685b      	ldr	r3, [r3, #4]
 8001ad2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d003      	beq.n	8001ae2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001ada:	69ba      	ldr	r2, [r7, #24]
 8001adc:	693b      	ldr	r3, [r7, #16]
 8001ade:	4313      	orrs	r3, r2
 8001ae0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001ae2:	4a1a      	ldr	r2, [pc, #104]	@ (8001b4c <HAL_GPIO_Init+0x304>)
 8001ae4:	69bb      	ldr	r3, [r7, #24]
 8001ae6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ae8:	4b18      	ldr	r3, [pc, #96]	@ (8001b4c <HAL_GPIO_Init+0x304>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001aee:	693b      	ldr	r3, [r7, #16]
 8001af0:	43db      	mvns	r3, r3
 8001af2:	69ba      	ldr	r2, [r7, #24]
 8001af4:	4013      	ands	r3, r2
 8001af6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	685b      	ldr	r3, [r3, #4]
 8001afc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d003      	beq.n	8001b0c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001b04:	69ba      	ldr	r2, [r7, #24]
 8001b06:	693b      	ldr	r3, [r7, #16]
 8001b08:	4313      	orrs	r3, r2
 8001b0a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001b0c:	4a0f      	ldr	r2, [pc, #60]	@ (8001b4c <HAL_GPIO_Init+0x304>)
 8001b0e:	69bb      	ldr	r3, [r7, #24]
 8001b10:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b12:	69fb      	ldr	r3, [r7, #28]
 8001b14:	3301      	adds	r3, #1
 8001b16:	61fb      	str	r3, [r7, #28]
 8001b18:	69fb      	ldr	r3, [r7, #28]
 8001b1a:	2b0f      	cmp	r3, #15
 8001b1c:	f67f aea2 	bls.w	8001864 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001b20:	bf00      	nop
 8001b22:	bf00      	nop
 8001b24:	3724      	adds	r7, #36	@ 0x24
 8001b26:	46bd      	mov	sp, r7
 8001b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2c:	4770      	bx	lr
 8001b2e:	bf00      	nop
 8001b30:	40023800 	.word	0x40023800
 8001b34:	40013800 	.word	0x40013800
 8001b38:	40020000 	.word	0x40020000
 8001b3c:	40020400 	.word	0x40020400
 8001b40:	40020800 	.word	0x40020800
 8001b44:	40020c00 	.word	0x40020c00
 8001b48:	40021000 	.word	0x40021000
 8001b4c:	40013c00 	.word	0x40013c00

08001b50 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b50:	b480      	push	{r7}
 8001b52:	b083      	sub	sp, #12
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
 8001b58:	460b      	mov	r3, r1
 8001b5a:	807b      	strh	r3, [r7, #2]
 8001b5c:	4613      	mov	r3, r2
 8001b5e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001b60:	787b      	ldrb	r3, [r7, #1]
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d003      	beq.n	8001b6e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b66:	887a      	ldrh	r2, [r7, #2]
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001b6c:	e003      	b.n	8001b76 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001b6e:	887b      	ldrh	r3, [r7, #2]
 8001b70:	041a      	lsls	r2, r3, #16
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	619a      	str	r2, [r3, #24]
}
 8001b76:	bf00      	nop
 8001b78:	370c      	adds	r7, #12
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b80:	4770      	bx	lr
	...

08001b84 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b086      	sub	sp, #24
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d101      	bne.n	8001b96 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b92:	2301      	movs	r3, #1
 8001b94:	e267      	b.n	8002066 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f003 0301 	and.w	r3, r3, #1
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d075      	beq.n	8001c8e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001ba2:	4b88      	ldr	r3, [pc, #544]	@ (8001dc4 <HAL_RCC_OscConfig+0x240>)
 8001ba4:	689b      	ldr	r3, [r3, #8]
 8001ba6:	f003 030c 	and.w	r3, r3, #12
 8001baa:	2b04      	cmp	r3, #4
 8001bac:	d00c      	beq.n	8001bc8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001bae:	4b85      	ldr	r3, [pc, #532]	@ (8001dc4 <HAL_RCC_OscConfig+0x240>)
 8001bb0:	689b      	ldr	r3, [r3, #8]
 8001bb2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001bb6:	2b08      	cmp	r3, #8
 8001bb8:	d112      	bne.n	8001be0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001bba:	4b82      	ldr	r3, [pc, #520]	@ (8001dc4 <HAL_RCC_OscConfig+0x240>)
 8001bbc:	685b      	ldr	r3, [r3, #4]
 8001bbe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001bc2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001bc6:	d10b      	bne.n	8001be0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bc8:	4b7e      	ldr	r3, [pc, #504]	@ (8001dc4 <HAL_RCC_OscConfig+0x240>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d05b      	beq.n	8001c8c <HAL_RCC_OscConfig+0x108>
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d157      	bne.n	8001c8c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001bdc:	2301      	movs	r3, #1
 8001bde:	e242      	b.n	8002066 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001be8:	d106      	bne.n	8001bf8 <HAL_RCC_OscConfig+0x74>
 8001bea:	4b76      	ldr	r3, [pc, #472]	@ (8001dc4 <HAL_RCC_OscConfig+0x240>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	4a75      	ldr	r2, [pc, #468]	@ (8001dc4 <HAL_RCC_OscConfig+0x240>)
 8001bf0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001bf4:	6013      	str	r3, [r2, #0]
 8001bf6:	e01d      	b.n	8001c34 <HAL_RCC_OscConfig+0xb0>
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	685b      	ldr	r3, [r3, #4]
 8001bfc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001c00:	d10c      	bne.n	8001c1c <HAL_RCC_OscConfig+0x98>
 8001c02:	4b70      	ldr	r3, [pc, #448]	@ (8001dc4 <HAL_RCC_OscConfig+0x240>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	4a6f      	ldr	r2, [pc, #444]	@ (8001dc4 <HAL_RCC_OscConfig+0x240>)
 8001c08:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001c0c:	6013      	str	r3, [r2, #0]
 8001c0e:	4b6d      	ldr	r3, [pc, #436]	@ (8001dc4 <HAL_RCC_OscConfig+0x240>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	4a6c      	ldr	r2, [pc, #432]	@ (8001dc4 <HAL_RCC_OscConfig+0x240>)
 8001c14:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c18:	6013      	str	r3, [r2, #0]
 8001c1a:	e00b      	b.n	8001c34 <HAL_RCC_OscConfig+0xb0>
 8001c1c:	4b69      	ldr	r3, [pc, #420]	@ (8001dc4 <HAL_RCC_OscConfig+0x240>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4a68      	ldr	r2, [pc, #416]	@ (8001dc4 <HAL_RCC_OscConfig+0x240>)
 8001c22:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001c26:	6013      	str	r3, [r2, #0]
 8001c28:	4b66      	ldr	r3, [pc, #408]	@ (8001dc4 <HAL_RCC_OscConfig+0x240>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4a65      	ldr	r2, [pc, #404]	@ (8001dc4 <HAL_RCC_OscConfig+0x240>)
 8001c2e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001c32:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d013      	beq.n	8001c64 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c3c:	f7ff fc54 	bl	80014e8 <HAL_GetTick>
 8001c40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c42:	e008      	b.n	8001c56 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c44:	f7ff fc50 	bl	80014e8 <HAL_GetTick>
 8001c48:	4602      	mov	r2, r0
 8001c4a:	693b      	ldr	r3, [r7, #16]
 8001c4c:	1ad3      	subs	r3, r2, r3
 8001c4e:	2b64      	cmp	r3, #100	@ 0x64
 8001c50:	d901      	bls.n	8001c56 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001c52:	2303      	movs	r3, #3
 8001c54:	e207      	b.n	8002066 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c56:	4b5b      	ldr	r3, [pc, #364]	@ (8001dc4 <HAL_RCC_OscConfig+0x240>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d0f0      	beq.n	8001c44 <HAL_RCC_OscConfig+0xc0>
 8001c62:	e014      	b.n	8001c8e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c64:	f7ff fc40 	bl	80014e8 <HAL_GetTick>
 8001c68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c6a:	e008      	b.n	8001c7e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c6c:	f7ff fc3c 	bl	80014e8 <HAL_GetTick>
 8001c70:	4602      	mov	r2, r0
 8001c72:	693b      	ldr	r3, [r7, #16]
 8001c74:	1ad3      	subs	r3, r2, r3
 8001c76:	2b64      	cmp	r3, #100	@ 0x64
 8001c78:	d901      	bls.n	8001c7e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001c7a:	2303      	movs	r3, #3
 8001c7c:	e1f3      	b.n	8002066 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c7e:	4b51      	ldr	r3, [pc, #324]	@ (8001dc4 <HAL_RCC_OscConfig+0x240>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d1f0      	bne.n	8001c6c <HAL_RCC_OscConfig+0xe8>
 8001c8a:	e000      	b.n	8001c8e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c8c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f003 0302 	and.w	r3, r3, #2
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d063      	beq.n	8001d62 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001c9a:	4b4a      	ldr	r3, [pc, #296]	@ (8001dc4 <HAL_RCC_OscConfig+0x240>)
 8001c9c:	689b      	ldr	r3, [r3, #8]
 8001c9e:	f003 030c 	and.w	r3, r3, #12
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d00b      	beq.n	8001cbe <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001ca6:	4b47      	ldr	r3, [pc, #284]	@ (8001dc4 <HAL_RCC_OscConfig+0x240>)
 8001ca8:	689b      	ldr	r3, [r3, #8]
 8001caa:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001cae:	2b08      	cmp	r3, #8
 8001cb0:	d11c      	bne.n	8001cec <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001cb2:	4b44      	ldr	r3, [pc, #272]	@ (8001dc4 <HAL_RCC_OscConfig+0x240>)
 8001cb4:	685b      	ldr	r3, [r3, #4]
 8001cb6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d116      	bne.n	8001cec <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cbe:	4b41      	ldr	r3, [pc, #260]	@ (8001dc4 <HAL_RCC_OscConfig+0x240>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f003 0302 	and.w	r3, r3, #2
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d005      	beq.n	8001cd6 <HAL_RCC_OscConfig+0x152>
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	68db      	ldr	r3, [r3, #12]
 8001cce:	2b01      	cmp	r3, #1
 8001cd0:	d001      	beq.n	8001cd6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	e1c7      	b.n	8002066 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cd6:	4b3b      	ldr	r3, [pc, #236]	@ (8001dc4 <HAL_RCC_OscConfig+0x240>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	691b      	ldr	r3, [r3, #16]
 8001ce2:	00db      	lsls	r3, r3, #3
 8001ce4:	4937      	ldr	r1, [pc, #220]	@ (8001dc4 <HAL_RCC_OscConfig+0x240>)
 8001ce6:	4313      	orrs	r3, r2
 8001ce8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cea:	e03a      	b.n	8001d62 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	68db      	ldr	r3, [r3, #12]
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d020      	beq.n	8001d36 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001cf4:	4b34      	ldr	r3, [pc, #208]	@ (8001dc8 <HAL_RCC_OscConfig+0x244>)
 8001cf6:	2201      	movs	r2, #1
 8001cf8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cfa:	f7ff fbf5 	bl	80014e8 <HAL_GetTick>
 8001cfe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d00:	e008      	b.n	8001d14 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d02:	f7ff fbf1 	bl	80014e8 <HAL_GetTick>
 8001d06:	4602      	mov	r2, r0
 8001d08:	693b      	ldr	r3, [r7, #16]
 8001d0a:	1ad3      	subs	r3, r2, r3
 8001d0c:	2b02      	cmp	r3, #2
 8001d0e:	d901      	bls.n	8001d14 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001d10:	2303      	movs	r3, #3
 8001d12:	e1a8      	b.n	8002066 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d14:	4b2b      	ldr	r3, [pc, #172]	@ (8001dc4 <HAL_RCC_OscConfig+0x240>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f003 0302 	and.w	r3, r3, #2
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d0f0      	beq.n	8001d02 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d20:	4b28      	ldr	r3, [pc, #160]	@ (8001dc4 <HAL_RCC_OscConfig+0x240>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	691b      	ldr	r3, [r3, #16]
 8001d2c:	00db      	lsls	r3, r3, #3
 8001d2e:	4925      	ldr	r1, [pc, #148]	@ (8001dc4 <HAL_RCC_OscConfig+0x240>)
 8001d30:	4313      	orrs	r3, r2
 8001d32:	600b      	str	r3, [r1, #0]
 8001d34:	e015      	b.n	8001d62 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d36:	4b24      	ldr	r3, [pc, #144]	@ (8001dc8 <HAL_RCC_OscConfig+0x244>)
 8001d38:	2200      	movs	r2, #0
 8001d3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d3c:	f7ff fbd4 	bl	80014e8 <HAL_GetTick>
 8001d40:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d42:	e008      	b.n	8001d56 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d44:	f7ff fbd0 	bl	80014e8 <HAL_GetTick>
 8001d48:	4602      	mov	r2, r0
 8001d4a:	693b      	ldr	r3, [r7, #16]
 8001d4c:	1ad3      	subs	r3, r2, r3
 8001d4e:	2b02      	cmp	r3, #2
 8001d50:	d901      	bls.n	8001d56 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001d52:	2303      	movs	r3, #3
 8001d54:	e187      	b.n	8002066 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d56:	4b1b      	ldr	r3, [pc, #108]	@ (8001dc4 <HAL_RCC_OscConfig+0x240>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f003 0302 	and.w	r3, r3, #2
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d1f0      	bne.n	8001d44 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f003 0308 	and.w	r3, r3, #8
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d036      	beq.n	8001ddc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	695b      	ldr	r3, [r3, #20]
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d016      	beq.n	8001da4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d76:	4b15      	ldr	r3, [pc, #84]	@ (8001dcc <HAL_RCC_OscConfig+0x248>)
 8001d78:	2201      	movs	r2, #1
 8001d7a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d7c:	f7ff fbb4 	bl	80014e8 <HAL_GetTick>
 8001d80:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d82:	e008      	b.n	8001d96 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d84:	f7ff fbb0 	bl	80014e8 <HAL_GetTick>
 8001d88:	4602      	mov	r2, r0
 8001d8a:	693b      	ldr	r3, [r7, #16]
 8001d8c:	1ad3      	subs	r3, r2, r3
 8001d8e:	2b02      	cmp	r3, #2
 8001d90:	d901      	bls.n	8001d96 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001d92:	2303      	movs	r3, #3
 8001d94:	e167      	b.n	8002066 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d96:	4b0b      	ldr	r3, [pc, #44]	@ (8001dc4 <HAL_RCC_OscConfig+0x240>)
 8001d98:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001d9a:	f003 0302 	and.w	r3, r3, #2
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d0f0      	beq.n	8001d84 <HAL_RCC_OscConfig+0x200>
 8001da2:	e01b      	b.n	8001ddc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001da4:	4b09      	ldr	r3, [pc, #36]	@ (8001dcc <HAL_RCC_OscConfig+0x248>)
 8001da6:	2200      	movs	r2, #0
 8001da8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001daa:	f7ff fb9d 	bl	80014e8 <HAL_GetTick>
 8001dae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001db0:	e00e      	b.n	8001dd0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001db2:	f7ff fb99 	bl	80014e8 <HAL_GetTick>
 8001db6:	4602      	mov	r2, r0
 8001db8:	693b      	ldr	r3, [r7, #16]
 8001dba:	1ad3      	subs	r3, r2, r3
 8001dbc:	2b02      	cmp	r3, #2
 8001dbe:	d907      	bls.n	8001dd0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001dc0:	2303      	movs	r3, #3
 8001dc2:	e150      	b.n	8002066 <HAL_RCC_OscConfig+0x4e2>
 8001dc4:	40023800 	.word	0x40023800
 8001dc8:	42470000 	.word	0x42470000
 8001dcc:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001dd0:	4b88      	ldr	r3, [pc, #544]	@ (8001ff4 <HAL_RCC_OscConfig+0x470>)
 8001dd2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001dd4:	f003 0302 	and.w	r3, r3, #2
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d1ea      	bne.n	8001db2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f003 0304 	and.w	r3, r3, #4
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	f000 8097 	beq.w	8001f18 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001dea:	2300      	movs	r3, #0
 8001dec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001dee:	4b81      	ldr	r3, [pc, #516]	@ (8001ff4 <HAL_RCC_OscConfig+0x470>)
 8001df0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001df2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d10f      	bne.n	8001e1a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	60bb      	str	r3, [r7, #8]
 8001dfe:	4b7d      	ldr	r3, [pc, #500]	@ (8001ff4 <HAL_RCC_OscConfig+0x470>)
 8001e00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e02:	4a7c      	ldr	r2, [pc, #496]	@ (8001ff4 <HAL_RCC_OscConfig+0x470>)
 8001e04:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e08:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e0a:	4b7a      	ldr	r3, [pc, #488]	@ (8001ff4 <HAL_RCC_OscConfig+0x470>)
 8001e0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e0e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e12:	60bb      	str	r3, [r7, #8]
 8001e14:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e16:	2301      	movs	r3, #1
 8001e18:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e1a:	4b77      	ldr	r3, [pc, #476]	@ (8001ff8 <HAL_RCC_OscConfig+0x474>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d118      	bne.n	8001e58 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e26:	4b74      	ldr	r3, [pc, #464]	@ (8001ff8 <HAL_RCC_OscConfig+0x474>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	4a73      	ldr	r2, [pc, #460]	@ (8001ff8 <HAL_RCC_OscConfig+0x474>)
 8001e2c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e30:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e32:	f7ff fb59 	bl	80014e8 <HAL_GetTick>
 8001e36:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e38:	e008      	b.n	8001e4c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e3a:	f7ff fb55 	bl	80014e8 <HAL_GetTick>
 8001e3e:	4602      	mov	r2, r0
 8001e40:	693b      	ldr	r3, [r7, #16]
 8001e42:	1ad3      	subs	r3, r2, r3
 8001e44:	2b02      	cmp	r3, #2
 8001e46:	d901      	bls.n	8001e4c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001e48:	2303      	movs	r3, #3
 8001e4a:	e10c      	b.n	8002066 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e4c:	4b6a      	ldr	r3, [pc, #424]	@ (8001ff8 <HAL_RCC_OscConfig+0x474>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d0f0      	beq.n	8001e3a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	689b      	ldr	r3, [r3, #8]
 8001e5c:	2b01      	cmp	r3, #1
 8001e5e:	d106      	bne.n	8001e6e <HAL_RCC_OscConfig+0x2ea>
 8001e60:	4b64      	ldr	r3, [pc, #400]	@ (8001ff4 <HAL_RCC_OscConfig+0x470>)
 8001e62:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e64:	4a63      	ldr	r2, [pc, #396]	@ (8001ff4 <HAL_RCC_OscConfig+0x470>)
 8001e66:	f043 0301 	orr.w	r3, r3, #1
 8001e6a:	6713      	str	r3, [r2, #112]	@ 0x70
 8001e6c:	e01c      	b.n	8001ea8 <HAL_RCC_OscConfig+0x324>
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	689b      	ldr	r3, [r3, #8]
 8001e72:	2b05      	cmp	r3, #5
 8001e74:	d10c      	bne.n	8001e90 <HAL_RCC_OscConfig+0x30c>
 8001e76:	4b5f      	ldr	r3, [pc, #380]	@ (8001ff4 <HAL_RCC_OscConfig+0x470>)
 8001e78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e7a:	4a5e      	ldr	r2, [pc, #376]	@ (8001ff4 <HAL_RCC_OscConfig+0x470>)
 8001e7c:	f043 0304 	orr.w	r3, r3, #4
 8001e80:	6713      	str	r3, [r2, #112]	@ 0x70
 8001e82:	4b5c      	ldr	r3, [pc, #368]	@ (8001ff4 <HAL_RCC_OscConfig+0x470>)
 8001e84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e86:	4a5b      	ldr	r2, [pc, #364]	@ (8001ff4 <HAL_RCC_OscConfig+0x470>)
 8001e88:	f043 0301 	orr.w	r3, r3, #1
 8001e8c:	6713      	str	r3, [r2, #112]	@ 0x70
 8001e8e:	e00b      	b.n	8001ea8 <HAL_RCC_OscConfig+0x324>
 8001e90:	4b58      	ldr	r3, [pc, #352]	@ (8001ff4 <HAL_RCC_OscConfig+0x470>)
 8001e92:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e94:	4a57      	ldr	r2, [pc, #348]	@ (8001ff4 <HAL_RCC_OscConfig+0x470>)
 8001e96:	f023 0301 	bic.w	r3, r3, #1
 8001e9a:	6713      	str	r3, [r2, #112]	@ 0x70
 8001e9c:	4b55      	ldr	r3, [pc, #340]	@ (8001ff4 <HAL_RCC_OscConfig+0x470>)
 8001e9e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ea0:	4a54      	ldr	r2, [pc, #336]	@ (8001ff4 <HAL_RCC_OscConfig+0x470>)
 8001ea2:	f023 0304 	bic.w	r3, r3, #4
 8001ea6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	689b      	ldr	r3, [r3, #8]
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d015      	beq.n	8001edc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001eb0:	f7ff fb1a 	bl	80014e8 <HAL_GetTick>
 8001eb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001eb6:	e00a      	b.n	8001ece <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001eb8:	f7ff fb16 	bl	80014e8 <HAL_GetTick>
 8001ebc:	4602      	mov	r2, r0
 8001ebe:	693b      	ldr	r3, [r7, #16]
 8001ec0:	1ad3      	subs	r3, r2, r3
 8001ec2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d901      	bls.n	8001ece <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001eca:	2303      	movs	r3, #3
 8001ecc:	e0cb      	b.n	8002066 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ece:	4b49      	ldr	r3, [pc, #292]	@ (8001ff4 <HAL_RCC_OscConfig+0x470>)
 8001ed0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ed2:	f003 0302 	and.w	r3, r3, #2
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d0ee      	beq.n	8001eb8 <HAL_RCC_OscConfig+0x334>
 8001eda:	e014      	b.n	8001f06 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001edc:	f7ff fb04 	bl	80014e8 <HAL_GetTick>
 8001ee0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ee2:	e00a      	b.n	8001efa <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ee4:	f7ff fb00 	bl	80014e8 <HAL_GetTick>
 8001ee8:	4602      	mov	r2, r0
 8001eea:	693b      	ldr	r3, [r7, #16]
 8001eec:	1ad3      	subs	r3, r2, r3
 8001eee:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d901      	bls.n	8001efa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001ef6:	2303      	movs	r3, #3
 8001ef8:	e0b5      	b.n	8002066 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001efa:	4b3e      	ldr	r3, [pc, #248]	@ (8001ff4 <HAL_RCC_OscConfig+0x470>)
 8001efc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001efe:	f003 0302 	and.w	r3, r3, #2
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d1ee      	bne.n	8001ee4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001f06:	7dfb      	ldrb	r3, [r7, #23]
 8001f08:	2b01      	cmp	r3, #1
 8001f0a:	d105      	bne.n	8001f18 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f0c:	4b39      	ldr	r3, [pc, #228]	@ (8001ff4 <HAL_RCC_OscConfig+0x470>)
 8001f0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f10:	4a38      	ldr	r2, [pc, #224]	@ (8001ff4 <HAL_RCC_OscConfig+0x470>)
 8001f12:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001f16:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	699b      	ldr	r3, [r3, #24]
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	f000 80a1 	beq.w	8002064 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001f22:	4b34      	ldr	r3, [pc, #208]	@ (8001ff4 <HAL_RCC_OscConfig+0x470>)
 8001f24:	689b      	ldr	r3, [r3, #8]
 8001f26:	f003 030c 	and.w	r3, r3, #12
 8001f2a:	2b08      	cmp	r3, #8
 8001f2c:	d05c      	beq.n	8001fe8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	699b      	ldr	r3, [r3, #24]
 8001f32:	2b02      	cmp	r3, #2
 8001f34:	d141      	bne.n	8001fba <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f36:	4b31      	ldr	r3, [pc, #196]	@ (8001ffc <HAL_RCC_OscConfig+0x478>)
 8001f38:	2200      	movs	r2, #0
 8001f3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f3c:	f7ff fad4 	bl	80014e8 <HAL_GetTick>
 8001f40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f42:	e008      	b.n	8001f56 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f44:	f7ff fad0 	bl	80014e8 <HAL_GetTick>
 8001f48:	4602      	mov	r2, r0
 8001f4a:	693b      	ldr	r3, [r7, #16]
 8001f4c:	1ad3      	subs	r3, r2, r3
 8001f4e:	2b02      	cmp	r3, #2
 8001f50:	d901      	bls.n	8001f56 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001f52:	2303      	movs	r3, #3
 8001f54:	e087      	b.n	8002066 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f56:	4b27      	ldr	r3, [pc, #156]	@ (8001ff4 <HAL_RCC_OscConfig+0x470>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d1f0      	bne.n	8001f44 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	69da      	ldr	r2, [r3, #28]
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6a1b      	ldr	r3, [r3, #32]
 8001f6a:	431a      	orrs	r2, r3
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f70:	019b      	lsls	r3, r3, #6
 8001f72:	431a      	orrs	r2, r3
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f78:	085b      	lsrs	r3, r3, #1
 8001f7a:	3b01      	subs	r3, #1
 8001f7c:	041b      	lsls	r3, r3, #16
 8001f7e:	431a      	orrs	r2, r3
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f84:	061b      	lsls	r3, r3, #24
 8001f86:	491b      	ldr	r1, [pc, #108]	@ (8001ff4 <HAL_RCC_OscConfig+0x470>)
 8001f88:	4313      	orrs	r3, r2
 8001f8a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f8c:	4b1b      	ldr	r3, [pc, #108]	@ (8001ffc <HAL_RCC_OscConfig+0x478>)
 8001f8e:	2201      	movs	r2, #1
 8001f90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f92:	f7ff faa9 	bl	80014e8 <HAL_GetTick>
 8001f96:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f98:	e008      	b.n	8001fac <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f9a:	f7ff faa5 	bl	80014e8 <HAL_GetTick>
 8001f9e:	4602      	mov	r2, r0
 8001fa0:	693b      	ldr	r3, [r7, #16]
 8001fa2:	1ad3      	subs	r3, r2, r3
 8001fa4:	2b02      	cmp	r3, #2
 8001fa6:	d901      	bls.n	8001fac <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001fa8:	2303      	movs	r3, #3
 8001faa:	e05c      	b.n	8002066 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001fac:	4b11      	ldr	r3, [pc, #68]	@ (8001ff4 <HAL_RCC_OscConfig+0x470>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d0f0      	beq.n	8001f9a <HAL_RCC_OscConfig+0x416>
 8001fb8:	e054      	b.n	8002064 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fba:	4b10      	ldr	r3, [pc, #64]	@ (8001ffc <HAL_RCC_OscConfig+0x478>)
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fc0:	f7ff fa92 	bl	80014e8 <HAL_GetTick>
 8001fc4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fc6:	e008      	b.n	8001fda <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fc8:	f7ff fa8e 	bl	80014e8 <HAL_GetTick>
 8001fcc:	4602      	mov	r2, r0
 8001fce:	693b      	ldr	r3, [r7, #16]
 8001fd0:	1ad3      	subs	r3, r2, r3
 8001fd2:	2b02      	cmp	r3, #2
 8001fd4:	d901      	bls.n	8001fda <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001fd6:	2303      	movs	r3, #3
 8001fd8:	e045      	b.n	8002066 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fda:	4b06      	ldr	r3, [pc, #24]	@ (8001ff4 <HAL_RCC_OscConfig+0x470>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d1f0      	bne.n	8001fc8 <HAL_RCC_OscConfig+0x444>
 8001fe6:	e03d      	b.n	8002064 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	699b      	ldr	r3, [r3, #24]
 8001fec:	2b01      	cmp	r3, #1
 8001fee:	d107      	bne.n	8002000 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001ff0:	2301      	movs	r3, #1
 8001ff2:	e038      	b.n	8002066 <HAL_RCC_OscConfig+0x4e2>
 8001ff4:	40023800 	.word	0x40023800
 8001ff8:	40007000 	.word	0x40007000
 8001ffc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002000:	4b1b      	ldr	r3, [pc, #108]	@ (8002070 <HAL_RCC_OscConfig+0x4ec>)
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	699b      	ldr	r3, [r3, #24]
 800200a:	2b01      	cmp	r3, #1
 800200c:	d028      	beq.n	8002060 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002018:	429a      	cmp	r2, r3
 800201a:	d121      	bne.n	8002060 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002026:	429a      	cmp	r2, r3
 8002028:	d11a      	bne.n	8002060 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800202a:	68fa      	ldr	r2, [r7, #12]
 800202c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002030:	4013      	ands	r3, r2
 8002032:	687a      	ldr	r2, [r7, #4]
 8002034:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002036:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002038:	4293      	cmp	r3, r2
 800203a:	d111      	bne.n	8002060 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002046:	085b      	lsrs	r3, r3, #1
 8002048:	3b01      	subs	r3, #1
 800204a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800204c:	429a      	cmp	r2, r3
 800204e:	d107      	bne.n	8002060 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800205a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800205c:	429a      	cmp	r2, r3
 800205e:	d001      	beq.n	8002064 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002060:	2301      	movs	r3, #1
 8002062:	e000      	b.n	8002066 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002064:	2300      	movs	r3, #0
}
 8002066:	4618      	mov	r0, r3
 8002068:	3718      	adds	r7, #24
 800206a:	46bd      	mov	sp, r7
 800206c:	bd80      	pop	{r7, pc}
 800206e:	bf00      	nop
 8002070:	40023800 	.word	0x40023800

08002074 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b084      	sub	sp, #16
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
 800207c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	2b00      	cmp	r3, #0
 8002082:	d101      	bne.n	8002088 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002084:	2301      	movs	r3, #1
 8002086:	e0cc      	b.n	8002222 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002088:	4b68      	ldr	r3, [pc, #416]	@ (800222c <HAL_RCC_ClockConfig+0x1b8>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f003 0307 	and.w	r3, r3, #7
 8002090:	683a      	ldr	r2, [r7, #0]
 8002092:	429a      	cmp	r2, r3
 8002094:	d90c      	bls.n	80020b0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002096:	4b65      	ldr	r3, [pc, #404]	@ (800222c <HAL_RCC_ClockConfig+0x1b8>)
 8002098:	683a      	ldr	r2, [r7, #0]
 800209a:	b2d2      	uxtb	r2, r2
 800209c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800209e:	4b63      	ldr	r3, [pc, #396]	@ (800222c <HAL_RCC_ClockConfig+0x1b8>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f003 0307 	and.w	r3, r3, #7
 80020a6:	683a      	ldr	r2, [r7, #0]
 80020a8:	429a      	cmp	r2, r3
 80020aa:	d001      	beq.n	80020b0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80020ac:	2301      	movs	r3, #1
 80020ae:	e0b8      	b.n	8002222 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f003 0302 	and.w	r3, r3, #2
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d020      	beq.n	80020fe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f003 0304 	and.w	r3, r3, #4
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d005      	beq.n	80020d4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80020c8:	4b59      	ldr	r3, [pc, #356]	@ (8002230 <HAL_RCC_ClockConfig+0x1bc>)
 80020ca:	689b      	ldr	r3, [r3, #8]
 80020cc:	4a58      	ldr	r2, [pc, #352]	@ (8002230 <HAL_RCC_ClockConfig+0x1bc>)
 80020ce:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80020d2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f003 0308 	and.w	r3, r3, #8
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d005      	beq.n	80020ec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80020e0:	4b53      	ldr	r3, [pc, #332]	@ (8002230 <HAL_RCC_ClockConfig+0x1bc>)
 80020e2:	689b      	ldr	r3, [r3, #8]
 80020e4:	4a52      	ldr	r2, [pc, #328]	@ (8002230 <HAL_RCC_ClockConfig+0x1bc>)
 80020e6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80020ea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020ec:	4b50      	ldr	r3, [pc, #320]	@ (8002230 <HAL_RCC_ClockConfig+0x1bc>)
 80020ee:	689b      	ldr	r3, [r3, #8]
 80020f0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	689b      	ldr	r3, [r3, #8]
 80020f8:	494d      	ldr	r1, [pc, #308]	@ (8002230 <HAL_RCC_ClockConfig+0x1bc>)
 80020fa:	4313      	orrs	r3, r2
 80020fc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f003 0301 	and.w	r3, r3, #1
 8002106:	2b00      	cmp	r3, #0
 8002108:	d044      	beq.n	8002194 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	685b      	ldr	r3, [r3, #4]
 800210e:	2b01      	cmp	r3, #1
 8002110:	d107      	bne.n	8002122 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002112:	4b47      	ldr	r3, [pc, #284]	@ (8002230 <HAL_RCC_ClockConfig+0x1bc>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800211a:	2b00      	cmp	r3, #0
 800211c:	d119      	bne.n	8002152 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800211e:	2301      	movs	r3, #1
 8002120:	e07f      	b.n	8002222 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	685b      	ldr	r3, [r3, #4]
 8002126:	2b02      	cmp	r3, #2
 8002128:	d003      	beq.n	8002132 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800212e:	2b03      	cmp	r3, #3
 8002130:	d107      	bne.n	8002142 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002132:	4b3f      	ldr	r3, [pc, #252]	@ (8002230 <HAL_RCC_ClockConfig+0x1bc>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800213a:	2b00      	cmp	r3, #0
 800213c:	d109      	bne.n	8002152 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800213e:	2301      	movs	r3, #1
 8002140:	e06f      	b.n	8002222 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002142:	4b3b      	ldr	r3, [pc, #236]	@ (8002230 <HAL_RCC_ClockConfig+0x1bc>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f003 0302 	and.w	r3, r3, #2
 800214a:	2b00      	cmp	r3, #0
 800214c:	d101      	bne.n	8002152 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800214e:	2301      	movs	r3, #1
 8002150:	e067      	b.n	8002222 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002152:	4b37      	ldr	r3, [pc, #220]	@ (8002230 <HAL_RCC_ClockConfig+0x1bc>)
 8002154:	689b      	ldr	r3, [r3, #8]
 8002156:	f023 0203 	bic.w	r2, r3, #3
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	685b      	ldr	r3, [r3, #4]
 800215e:	4934      	ldr	r1, [pc, #208]	@ (8002230 <HAL_RCC_ClockConfig+0x1bc>)
 8002160:	4313      	orrs	r3, r2
 8002162:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002164:	f7ff f9c0 	bl	80014e8 <HAL_GetTick>
 8002168:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800216a:	e00a      	b.n	8002182 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800216c:	f7ff f9bc 	bl	80014e8 <HAL_GetTick>
 8002170:	4602      	mov	r2, r0
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	1ad3      	subs	r3, r2, r3
 8002176:	f241 3288 	movw	r2, #5000	@ 0x1388
 800217a:	4293      	cmp	r3, r2
 800217c:	d901      	bls.n	8002182 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800217e:	2303      	movs	r3, #3
 8002180:	e04f      	b.n	8002222 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002182:	4b2b      	ldr	r3, [pc, #172]	@ (8002230 <HAL_RCC_ClockConfig+0x1bc>)
 8002184:	689b      	ldr	r3, [r3, #8]
 8002186:	f003 020c 	and.w	r2, r3, #12
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	685b      	ldr	r3, [r3, #4]
 800218e:	009b      	lsls	r3, r3, #2
 8002190:	429a      	cmp	r2, r3
 8002192:	d1eb      	bne.n	800216c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002194:	4b25      	ldr	r3, [pc, #148]	@ (800222c <HAL_RCC_ClockConfig+0x1b8>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f003 0307 	and.w	r3, r3, #7
 800219c:	683a      	ldr	r2, [r7, #0]
 800219e:	429a      	cmp	r2, r3
 80021a0:	d20c      	bcs.n	80021bc <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021a2:	4b22      	ldr	r3, [pc, #136]	@ (800222c <HAL_RCC_ClockConfig+0x1b8>)
 80021a4:	683a      	ldr	r2, [r7, #0]
 80021a6:	b2d2      	uxtb	r2, r2
 80021a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80021aa:	4b20      	ldr	r3, [pc, #128]	@ (800222c <HAL_RCC_ClockConfig+0x1b8>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f003 0307 	and.w	r3, r3, #7
 80021b2:	683a      	ldr	r2, [r7, #0]
 80021b4:	429a      	cmp	r2, r3
 80021b6:	d001      	beq.n	80021bc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80021b8:	2301      	movs	r3, #1
 80021ba:	e032      	b.n	8002222 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f003 0304 	and.w	r3, r3, #4
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d008      	beq.n	80021da <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80021c8:	4b19      	ldr	r3, [pc, #100]	@ (8002230 <HAL_RCC_ClockConfig+0x1bc>)
 80021ca:	689b      	ldr	r3, [r3, #8]
 80021cc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	68db      	ldr	r3, [r3, #12]
 80021d4:	4916      	ldr	r1, [pc, #88]	@ (8002230 <HAL_RCC_ClockConfig+0x1bc>)
 80021d6:	4313      	orrs	r3, r2
 80021d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f003 0308 	and.w	r3, r3, #8
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d009      	beq.n	80021fa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80021e6:	4b12      	ldr	r3, [pc, #72]	@ (8002230 <HAL_RCC_ClockConfig+0x1bc>)
 80021e8:	689b      	ldr	r3, [r3, #8]
 80021ea:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	691b      	ldr	r3, [r3, #16]
 80021f2:	00db      	lsls	r3, r3, #3
 80021f4:	490e      	ldr	r1, [pc, #56]	@ (8002230 <HAL_RCC_ClockConfig+0x1bc>)
 80021f6:	4313      	orrs	r3, r2
 80021f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80021fa:	f000 f821 	bl	8002240 <HAL_RCC_GetSysClockFreq>
 80021fe:	4602      	mov	r2, r0
 8002200:	4b0b      	ldr	r3, [pc, #44]	@ (8002230 <HAL_RCC_ClockConfig+0x1bc>)
 8002202:	689b      	ldr	r3, [r3, #8]
 8002204:	091b      	lsrs	r3, r3, #4
 8002206:	f003 030f 	and.w	r3, r3, #15
 800220a:	490a      	ldr	r1, [pc, #40]	@ (8002234 <HAL_RCC_ClockConfig+0x1c0>)
 800220c:	5ccb      	ldrb	r3, [r1, r3]
 800220e:	fa22 f303 	lsr.w	r3, r2, r3
 8002212:	4a09      	ldr	r2, [pc, #36]	@ (8002238 <HAL_RCC_ClockConfig+0x1c4>)
 8002214:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002216:	4b09      	ldr	r3, [pc, #36]	@ (800223c <HAL_RCC_ClockConfig+0x1c8>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	4618      	mov	r0, r3
 800221c:	f7ff f920 	bl	8001460 <HAL_InitTick>

  return HAL_OK;
 8002220:	2300      	movs	r3, #0
}
 8002222:	4618      	mov	r0, r3
 8002224:	3710      	adds	r7, #16
 8002226:	46bd      	mov	sp, r7
 8002228:	bd80      	pop	{r7, pc}
 800222a:	bf00      	nop
 800222c:	40023c00 	.word	0x40023c00
 8002230:	40023800 	.word	0x40023800
 8002234:	08005444 	.word	0x08005444
 8002238:	20000000 	.word	0x20000000
 800223c:	20000004 	.word	0x20000004

08002240 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002240:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002244:	b094      	sub	sp, #80	@ 0x50
 8002246:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002248:	2300      	movs	r3, #0
 800224a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 800224c:	2300      	movs	r3, #0
 800224e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8002250:	2300      	movs	r3, #0
 8002252:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002254:	2300      	movs	r3, #0
 8002256:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002258:	4b79      	ldr	r3, [pc, #484]	@ (8002440 <HAL_RCC_GetSysClockFreq+0x200>)
 800225a:	689b      	ldr	r3, [r3, #8]
 800225c:	f003 030c 	and.w	r3, r3, #12
 8002260:	2b08      	cmp	r3, #8
 8002262:	d00d      	beq.n	8002280 <HAL_RCC_GetSysClockFreq+0x40>
 8002264:	2b08      	cmp	r3, #8
 8002266:	f200 80e1 	bhi.w	800242c <HAL_RCC_GetSysClockFreq+0x1ec>
 800226a:	2b00      	cmp	r3, #0
 800226c:	d002      	beq.n	8002274 <HAL_RCC_GetSysClockFreq+0x34>
 800226e:	2b04      	cmp	r3, #4
 8002270:	d003      	beq.n	800227a <HAL_RCC_GetSysClockFreq+0x3a>
 8002272:	e0db      	b.n	800242c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002274:	4b73      	ldr	r3, [pc, #460]	@ (8002444 <HAL_RCC_GetSysClockFreq+0x204>)
 8002276:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002278:	e0db      	b.n	8002432 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800227a:	4b73      	ldr	r3, [pc, #460]	@ (8002448 <HAL_RCC_GetSysClockFreq+0x208>)
 800227c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800227e:	e0d8      	b.n	8002432 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002280:	4b6f      	ldr	r3, [pc, #444]	@ (8002440 <HAL_RCC_GetSysClockFreq+0x200>)
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002288:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800228a:	4b6d      	ldr	r3, [pc, #436]	@ (8002440 <HAL_RCC_GetSysClockFreq+0x200>)
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002292:	2b00      	cmp	r3, #0
 8002294:	d063      	beq.n	800235e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002296:	4b6a      	ldr	r3, [pc, #424]	@ (8002440 <HAL_RCC_GetSysClockFreq+0x200>)
 8002298:	685b      	ldr	r3, [r3, #4]
 800229a:	099b      	lsrs	r3, r3, #6
 800229c:	2200      	movs	r2, #0
 800229e:	63bb      	str	r3, [r7, #56]	@ 0x38
 80022a0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80022a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80022a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80022a8:	633b      	str	r3, [r7, #48]	@ 0x30
 80022aa:	2300      	movs	r3, #0
 80022ac:	637b      	str	r3, [r7, #52]	@ 0x34
 80022ae:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80022b2:	4622      	mov	r2, r4
 80022b4:	462b      	mov	r3, r5
 80022b6:	f04f 0000 	mov.w	r0, #0
 80022ba:	f04f 0100 	mov.w	r1, #0
 80022be:	0159      	lsls	r1, r3, #5
 80022c0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80022c4:	0150      	lsls	r0, r2, #5
 80022c6:	4602      	mov	r2, r0
 80022c8:	460b      	mov	r3, r1
 80022ca:	4621      	mov	r1, r4
 80022cc:	1a51      	subs	r1, r2, r1
 80022ce:	6139      	str	r1, [r7, #16]
 80022d0:	4629      	mov	r1, r5
 80022d2:	eb63 0301 	sbc.w	r3, r3, r1
 80022d6:	617b      	str	r3, [r7, #20]
 80022d8:	f04f 0200 	mov.w	r2, #0
 80022dc:	f04f 0300 	mov.w	r3, #0
 80022e0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80022e4:	4659      	mov	r1, fp
 80022e6:	018b      	lsls	r3, r1, #6
 80022e8:	4651      	mov	r1, sl
 80022ea:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80022ee:	4651      	mov	r1, sl
 80022f0:	018a      	lsls	r2, r1, #6
 80022f2:	4651      	mov	r1, sl
 80022f4:	ebb2 0801 	subs.w	r8, r2, r1
 80022f8:	4659      	mov	r1, fp
 80022fa:	eb63 0901 	sbc.w	r9, r3, r1
 80022fe:	f04f 0200 	mov.w	r2, #0
 8002302:	f04f 0300 	mov.w	r3, #0
 8002306:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800230a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800230e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002312:	4690      	mov	r8, r2
 8002314:	4699      	mov	r9, r3
 8002316:	4623      	mov	r3, r4
 8002318:	eb18 0303 	adds.w	r3, r8, r3
 800231c:	60bb      	str	r3, [r7, #8]
 800231e:	462b      	mov	r3, r5
 8002320:	eb49 0303 	adc.w	r3, r9, r3
 8002324:	60fb      	str	r3, [r7, #12]
 8002326:	f04f 0200 	mov.w	r2, #0
 800232a:	f04f 0300 	mov.w	r3, #0
 800232e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002332:	4629      	mov	r1, r5
 8002334:	024b      	lsls	r3, r1, #9
 8002336:	4621      	mov	r1, r4
 8002338:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800233c:	4621      	mov	r1, r4
 800233e:	024a      	lsls	r2, r1, #9
 8002340:	4610      	mov	r0, r2
 8002342:	4619      	mov	r1, r3
 8002344:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002346:	2200      	movs	r2, #0
 8002348:	62bb      	str	r3, [r7, #40]	@ 0x28
 800234a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800234c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002350:	f7fd ff9e 	bl	8000290 <__aeabi_uldivmod>
 8002354:	4602      	mov	r2, r0
 8002356:	460b      	mov	r3, r1
 8002358:	4613      	mov	r3, r2
 800235a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800235c:	e058      	b.n	8002410 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800235e:	4b38      	ldr	r3, [pc, #224]	@ (8002440 <HAL_RCC_GetSysClockFreq+0x200>)
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	099b      	lsrs	r3, r3, #6
 8002364:	2200      	movs	r2, #0
 8002366:	4618      	mov	r0, r3
 8002368:	4611      	mov	r1, r2
 800236a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800236e:	623b      	str	r3, [r7, #32]
 8002370:	2300      	movs	r3, #0
 8002372:	627b      	str	r3, [r7, #36]	@ 0x24
 8002374:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002378:	4642      	mov	r2, r8
 800237a:	464b      	mov	r3, r9
 800237c:	f04f 0000 	mov.w	r0, #0
 8002380:	f04f 0100 	mov.w	r1, #0
 8002384:	0159      	lsls	r1, r3, #5
 8002386:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800238a:	0150      	lsls	r0, r2, #5
 800238c:	4602      	mov	r2, r0
 800238e:	460b      	mov	r3, r1
 8002390:	4641      	mov	r1, r8
 8002392:	ebb2 0a01 	subs.w	sl, r2, r1
 8002396:	4649      	mov	r1, r9
 8002398:	eb63 0b01 	sbc.w	fp, r3, r1
 800239c:	f04f 0200 	mov.w	r2, #0
 80023a0:	f04f 0300 	mov.w	r3, #0
 80023a4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80023a8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80023ac:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80023b0:	ebb2 040a 	subs.w	r4, r2, sl
 80023b4:	eb63 050b 	sbc.w	r5, r3, fp
 80023b8:	f04f 0200 	mov.w	r2, #0
 80023bc:	f04f 0300 	mov.w	r3, #0
 80023c0:	00eb      	lsls	r3, r5, #3
 80023c2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80023c6:	00e2      	lsls	r2, r4, #3
 80023c8:	4614      	mov	r4, r2
 80023ca:	461d      	mov	r5, r3
 80023cc:	4643      	mov	r3, r8
 80023ce:	18e3      	adds	r3, r4, r3
 80023d0:	603b      	str	r3, [r7, #0]
 80023d2:	464b      	mov	r3, r9
 80023d4:	eb45 0303 	adc.w	r3, r5, r3
 80023d8:	607b      	str	r3, [r7, #4]
 80023da:	f04f 0200 	mov.w	r2, #0
 80023de:	f04f 0300 	mov.w	r3, #0
 80023e2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80023e6:	4629      	mov	r1, r5
 80023e8:	028b      	lsls	r3, r1, #10
 80023ea:	4621      	mov	r1, r4
 80023ec:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80023f0:	4621      	mov	r1, r4
 80023f2:	028a      	lsls	r2, r1, #10
 80023f4:	4610      	mov	r0, r2
 80023f6:	4619      	mov	r1, r3
 80023f8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80023fa:	2200      	movs	r2, #0
 80023fc:	61bb      	str	r3, [r7, #24]
 80023fe:	61fa      	str	r2, [r7, #28]
 8002400:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002404:	f7fd ff44 	bl	8000290 <__aeabi_uldivmod>
 8002408:	4602      	mov	r2, r0
 800240a:	460b      	mov	r3, r1
 800240c:	4613      	mov	r3, r2
 800240e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002410:	4b0b      	ldr	r3, [pc, #44]	@ (8002440 <HAL_RCC_GetSysClockFreq+0x200>)
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	0c1b      	lsrs	r3, r3, #16
 8002416:	f003 0303 	and.w	r3, r3, #3
 800241a:	3301      	adds	r3, #1
 800241c:	005b      	lsls	r3, r3, #1
 800241e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8002420:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002422:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002424:	fbb2 f3f3 	udiv	r3, r2, r3
 8002428:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800242a:	e002      	b.n	8002432 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800242c:	4b05      	ldr	r3, [pc, #20]	@ (8002444 <HAL_RCC_GetSysClockFreq+0x204>)
 800242e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002430:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002432:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002434:	4618      	mov	r0, r3
 8002436:	3750      	adds	r7, #80	@ 0x50
 8002438:	46bd      	mov	sp, r7
 800243a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800243e:	bf00      	nop
 8002440:	40023800 	.word	0x40023800
 8002444:	00f42400 	.word	0x00f42400
 8002448:	007a1200 	.word	0x007a1200

0800244c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800244c:	b480      	push	{r7}
 800244e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002450:	4b03      	ldr	r3, [pc, #12]	@ (8002460 <HAL_RCC_GetHCLKFreq+0x14>)
 8002452:	681b      	ldr	r3, [r3, #0]
}
 8002454:	4618      	mov	r0, r3
 8002456:	46bd      	mov	sp, r7
 8002458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245c:	4770      	bx	lr
 800245e:	bf00      	nop
 8002460:	20000000 	.word	0x20000000

08002464 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002468:	f7ff fff0 	bl	800244c <HAL_RCC_GetHCLKFreq>
 800246c:	4602      	mov	r2, r0
 800246e:	4b05      	ldr	r3, [pc, #20]	@ (8002484 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002470:	689b      	ldr	r3, [r3, #8]
 8002472:	0a9b      	lsrs	r3, r3, #10
 8002474:	f003 0307 	and.w	r3, r3, #7
 8002478:	4903      	ldr	r1, [pc, #12]	@ (8002488 <HAL_RCC_GetPCLK1Freq+0x24>)
 800247a:	5ccb      	ldrb	r3, [r1, r3]
 800247c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002480:	4618      	mov	r0, r3
 8002482:	bd80      	pop	{r7, pc}
 8002484:	40023800 	.word	0x40023800
 8002488:	08005454 	.word	0x08005454

0800248c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002490:	f7ff ffdc 	bl	800244c <HAL_RCC_GetHCLKFreq>
 8002494:	4602      	mov	r2, r0
 8002496:	4b05      	ldr	r3, [pc, #20]	@ (80024ac <HAL_RCC_GetPCLK2Freq+0x20>)
 8002498:	689b      	ldr	r3, [r3, #8]
 800249a:	0b5b      	lsrs	r3, r3, #13
 800249c:	f003 0307 	and.w	r3, r3, #7
 80024a0:	4903      	ldr	r1, [pc, #12]	@ (80024b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80024a2:	5ccb      	ldrb	r3, [r1, r3]
 80024a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80024a8:	4618      	mov	r0, r3
 80024aa:	bd80      	pop	{r7, pc}
 80024ac:	40023800 	.word	0x40023800
 80024b0:	08005454 	.word	0x08005454

080024b4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80024b4:	b480      	push	{r7}
 80024b6:	b085      	sub	sp, #20
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80024c2:	b2db      	uxtb	r3, r3
 80024c4:	2b01      	cmp	r3, #1
 80024c6:	d001      	beq.n	80024cc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80024c8:	2301      	movs	r3, #1
 80024ca:	e044      	b.n	8002556 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2202      	movs	r2, #2
 80024d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	68da      	ldr	r2, [r3, #12]
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f042 0201 	orr.w	r2, r2, #1
 80024e2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	4a1e      	ldr	r2, [pc, #120]	@ (8002564 <HAL_TIM_Base_Start_IT+0xb0>)
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d018      	beq.n	8002520 <HAL_TIM_Base_Start_IT+0x6c>
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80024f6:	d013      	beq.n	8002520 <HAL_TIM_Base_Start_IT+0x6c>
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4a1a      	ldr	r2, [pc, #104]	@ (8002568 <HAL_TIM_Base_Start_IT+0xb4>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d00e      	beq.n	8002520 <HAL_TIM_Base_Start_IT+0x6c>
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4a19      	ldr	r2, [pc, #100]	@ (800256c <HAL_TIM_Base_Start_IT+0xb8>)
 8002508:	4293      	cmp	r3, r2
 800250a:	d009      	beq.n	8002520 <HAL_TIM_Base_Start_IT+0x6c>
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	4a17      	ldr	r2, [pc, #92]	@ (8002570 <HAL_TIM_Base_Start_IT+0xbc>)
 8002512:	4293      	cmp	r3, r2
 8002514:	d004      	beq.n	8002520 <HAL_TIM_Base_Start_IT+0x6c>
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4a16      	ldr	r2, [pc, #88]	@ (8002574 <HAL_TIM_Base_Start_IT+0xc0>)
 800251c:	4293      	cmp	r3, r2
 800251e:	d111      	bne.n	8002544 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	689b      	ldr	r3, [r3, #8]
 8002526:	f003 0307 	and.w	r3, r3, #7
 800252a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	2b06      	cmp	r3, #6
 8002530:	d010      	beq.n	8002554 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	681a      	ldr	r2, [r3, #0]
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f042 0201 	orr.w	r2, r2, #1
 8002540:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002542:	e007      	b.n	8002554 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	681a      	ldr	r2, [r3, #0]
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f042 0201 	orr.w	r2, r2, #1
 8002552:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002554:	2300      	movs	r3, #0
}
 8002556:	4618      	mov	r0, r3
 8002558:	3714      	adds	r7, #20
 800255a:	46bd      	mov	sp, r7
 800255c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002560:	4770      	bx	lr
 8002562:	bf00      	nop
 8002564:	40010000 	.word	0x40010000
 8002568:	40000400 	.word	0x40000400
 800256c:	40000800 	.word	0x40000800
 8002570:	40000c00 	.word	0x40000c00
 8002574:	40014000 	.word	0x40014000

08002578 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b082      	sub	sp, #8
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2b00      	cmp	r3, #0
 8002584:	d101      	bne.n	800258a <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8002586:	2301      	movs	r3, #1
 8002588:	e041      	b.n	800260e <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002590:	b2db      	uxtb	r3, r3
 8002592:	2b00      	cmp	r3, #0
 8002594:	d106      	bne.n	80025a4 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	2200      	movs	r2, #0
 800259a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800259e:	6878      	ldr	r0, [r7, #4]
 80025a0:	f7fe fd3c 	bl	800101c <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2202      	movs	r2, #2
 80025a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681a      	ldr	r2, [r3, #0]
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	3304      	adds	r3, #4
 80025b4:	4619      	mov	r1, r3
 80025b6:	4610      	mov	r0, r2
 80025b8:	f000 fb62 	bl	8002c80 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2201      	movs	r2, #1
 80025c0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2201      	movs	r2, #1
 80025c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	2201      	movs	r2, #1
 80025d0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2201      	movs	r2, #1
 80025d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2201      	movs	r2, #1
 80025e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2201      	movs	r2, #1
 80025e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2201      	movs	r2, #1
 80025f0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2201      	movs	r2, #1
 80025f8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2201      	movs	r2, #1
 8002600:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2201      	movs	r2, #1
 8002608:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800260c:	2300      	movs	r3, #0
}
 800260e:	4618      	mov	r0, r3
 8002610:	3708      	adds	r7, #8
 8002612:	46bd      	mov	sp, r7
 8002614:	bd80      	pop	{r7, pc}

08002616 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002616:	b580      	push	{r7, lr}
 8002618:	b082      	sub	sp, #8
 800261a:	af00      	add	r7, sp, #0
 800261c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2b00      	cmp	r3, #0
 8002622:	d101      	bne.n	8002628 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002624:	2301      	movs	r3, #1
 8002626:	e041      	b.n	80026ac <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800262e:	b2db      	uxtb	r3, r3
 8002630:	2b00      	cmp	r3, #0
 8002632:	d106      	bne.n	8002642 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2200      	movs	r2, #0
 8002638:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800263c:	6878      	ldr	r0, [r7, #4]
 800263e:	f7fe fcc7 	bl	8000fd0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	2202      	movs	r2, #2
 8002646:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681a      	ldr	r2, [r3, #0]
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	3304      	adds	r3, #4
 8002652:	4619      	mov	r1, r3
 8002654:	4610      	mov	r0, r2
 8002656:	f000 fb13 	bl	8002c80 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	2201      	movs	r2, #1
 800265e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	2201      	movs	r2, #1
 8002666:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	2201      	movs	r2, #1
 800266e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	2201      	movs	r2, #1
 8002676:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	2201      	movs	r2, #1
 800267e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	2201      	movs	r2, #1
 8002686:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	2201      	movs	r2, #1
 800268e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	2201      	movs	r2, #1
 8002696:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	2201      	movs	r2, #1
 800269e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	2201      	movs	r2, #1
 80026a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80026aa:	2300      	movs	r3, #0
}
 80026ac:	4618      	mov	r0, r3
 80026ae:	3708      	adds	r7, #8
 80026b0:	46bd      	mov	sp, r7
 80026b2:	bd80      	pop	{r7, pc}

080026b4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b084      	sub	sp, #16
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
 80026bc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d109      	bne.n	80026d8 <HAL_TIM_PWM_Start+0x24>
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80026ca:	b2db      	uxtb	r3, r3
 80026cc:	2b01      	cmp	r3, #1
 80026ce:	bf14      	ite	ne
 80026d0:	2301      	movne	r3, #1
 80026d2:	2300      	moveq	r3, #0
 80026d4:	b2db      	uxtb	r3, r3
 80026d6:	e022      	b.n	800271e <HAL_TIM_PWM_Start+0x6a>
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	2b04      	cmp	r3, #4
 80026dc:	d109      	bne.n	80026f2 <HAL_TIM_PWM_Start+0x3e>
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80026e4:	b2db      	uxtb	r3, r3
 80026e6:	2b01      	cmp	r3, #1
 80026e8:	bf14      	ite	ne
 80026ea:	2301      	movne	r3, #1
 80026ec:	2300      	moveq	r3, #0
 80026ee:	b2db      	uxtb	r3, r3
 80026f0:	e015      	b.n	800271e <HAL_TIM_PWM_Start+0x6a>
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	2b08      	cmp	r3, #8
 80026f6:	d109      	bne.n	800270c <HAL_TIM_PWM_Start+0x58>
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80026fe:	b2db      	uxtb	r3, r3
 8002700:	2b01      	cmp	r3, #1
 8002702:	bf14      	ite	ne
 8002704:	2301      	movne	r3, #1
 8002706:	2300      	moveq	r3, #0
 8002708:	b2db      	uxtb	r3, r3
 800270a:	e008      	b.n	800271e <HAL_TIM_PWM_Start+0x6a>
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002712:	b2db      	uxtb	r3, r3
 8002714:	2b01      	cmp	r3, #1
 8002716:	bf14      	ite	ne
 8002718:	2301      	movne	r3, #1
 800271a:	2300      	moveq	r3, #0
 800271c:	b2db      	uxtb	r3, r3
 800271e:	2b00      	cmp	r3, #0
 8002720:	d001      	beq.n	8002726 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002722:	2301      	movs	r3, #1
 8002724:	e068      	b.n	80027f8 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	2b00      	cmp	r3, #0
 800272a:	d104      	bne.n	8002736 <HAL_TIM_PWM_Start+0x82>
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2202      	movs	r2, #2
 8002730:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002734:	e013      	b.n	800275e <HAL_TIM_PWM_Start+0xaa>
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	2b04      	cmp	r3, #4
 800273a:	d104      	bne.n	8002746 <HAL_TIM_PWM_Start+0x92>
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2202      	movs	r2, #2
 8002740:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002744:	e00b      	b.n	800275e <HAL_TIM_PWM_Start+0xaa>
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	2b08      	cmp	r3, #8
 800274a:	d104      	bne.n	8002756 <HAL_TIM_PWM_Start+0xa2>
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2202      	movs	r2, #2
 8002750:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002754:	e003      	b.n	800275e <HAL_TIM_PWM_Start+0xaa>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	2202      	movs	r2, #2
 800275a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	2201      	movs	r2, #1
 8002764:	6839      	ldr	r1, [r7, #0]
 8002766:	4618      	mov	r0, r3
 8002768:	f000 fc9c 	bl	80030a4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4a23      	ldr	r2, [pc, #140]	@ (8002800 <HAL_TIM_PWM_Start+0x14c>)
 8002772:	4293      	cmp	r3, r2
 8002774:	d107      	bne.n	8002786 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002784:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	4a1d      	ldr	r2, [pc, #116]	@ (8002800 <HAL_TIM_PWM_Start+0x14c>)
 800278c:	4293      	cmp	r3, r2
 800278e:	d018      	beq.n	80027c2 <HAL_TIM_PWM_Start+0x10e>
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002798:	d013      	beq.n	80027c2 <HAL_TIM_PWM_Start+0x10e>
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	4a19      	ldr	r2, [pc, #100]	@ (8002804 <HAL_TIM_PWM_Start+0x150>)
 80027a0:	4293      	cmp	r3, r2
 80027a2:	d00e      	beq.n	80027c2 <HAL_TIM_PWM_Start+0x10e>
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4a17      	ldr	r2, [pc, #92]	@ (8002808 <HAL_TIM_PWM_Start+0x154>)
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d009      	beq.n	80027c2 <HAL_TIM_PWM_Start+0x10e>
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	4a16      	ldr	r2, [pc, #88]	@ (800280c <HAL_TIM_PWM_Start+0x158>)
 80027b4:	4293      	cmp	r3, r2
 80027b6:	d004      	beq.n	80027c2 <HAL_TIM_PWM_Start+0x10e>
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	4a14      	ldr	r2, [pc, #80]	@ (8002810 <HAL_TIM_PWM_Start+0x15c>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	d111      	bne.n	80027e6 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	689b      	ldr	r3, [r3, #8]
 80027c8:	f003 0307 	and.w	r3, r3, #7
 80027cc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	2b06      	cmp	r3, #6
 80027d2:	d010      	beq.n	80027f6 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	681a      	ldr	r2, [r3, #0]
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f042 0201 	orr.w	r2, r2, #1
 80027e2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80027e4:	e007      	b.n	80027f6 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	681a      	ldr	r2, [r3, #0]
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f042 0201 	orr.w	r2, r2, #1
 80027f4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80027f6:	2300      	movs	r3, #0
}
 80027f8:	4618      	mov	r0, r3
 80027fa:	3710      	adds	r7, #16
 80027fc:	46bd      	mov	sp, r7
 80027fe:	bd80      	pop	{r7, pc}
 8002800:	40010000 	.word	0x40010000
 8002804:	40000400 	.word	0x40000400
 8002808:	40000800 	.word	0x40000800
 800280c:	40000c00 	.word	0x40000c00
 8002810:	40014000 	.word	0x40014000

08002814 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b084      	sub	sp, #16
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	68db      	ldr	r3, [r3, #12]
 8002822:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	691b      	ldr	r3, [r3, #16]
 800282a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800282c:	68bb      	ldr	r3, [r7, #8]
 800282e:	f003 0302 	and.w	r3, r3, #2
 8002832:	2b00      	cmp	r3, #0
 8002834:	d020      	beq.n	8002878 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	f003 0302 	and.w	r3, r3, #2
 800283c:	2b00      	cmp	r3, #0
 800283e:	d01b      	beq.n	8002878 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f06f 0202 	mvn.w	r2, #2
 8002848:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	2201      	movs	r2, #1
 800284e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	699b      	ldr	r3, [r3, #24]
 8002856:	f003 0303 	and.w	r3, r3, #3
 800285a:	2b00      	cmp	r3, #0
 800285c:	d003      	beq.n	8002866 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800285e:	6878      	ldr	r0, [r7, #4]
 8002860:	f000 f9f0 	bl	8002c44 <HAL_TIM_IC_CaptureCallback>
 8002864:	e005      	b.n	8002872 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002866:	6878      	ldr	r0, [r7, #4]
 8002868:	f000 f9e2 	bl	8002c30 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800286c:	6878      	ldr	r0, [r7, #4]
 800286e:	f000 f9f3 	bl	8002c58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	2200      	movs	r2, #0
 8002876:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002878:	68bb      	ldr	r3, [r7, #8]
 800287a:	f003 0304 	and.w	r3, r3, #4
 800287e:	2b00      	cmp	r3, #0
 8002880:	d020      	beq.n	80028c4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	f003 0304 	and.w	r3, r3, #4
 8002888:	2b00      	cmp	r3, #0
 800288a:	d01b      	beq.n	80028c4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f06f 0204 	mvn.w	r2, #4
 8002894:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	2202      	movs	r2, #2
 800289a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	699b      	ldr	r3, [r3, #24]
 80028a2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d003      	beq.n	80028b2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80028aa:	6878      	ldr	r0, [r7, #4]
 80028ac:	f000 f9ca 	bl	8002c44 <HAL_TIM_IC_CaptureCallback>
 80028b0:	e005      	b.n	80028be <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80028b2:	6878      	ldr	r0, [r7, #4]
 80028b4:	f000 f9bc 	bl	8002c30 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028b8:	6878      	ldr	r0, [r7, #4]
 80028ba:	f000 f9cd 	bl	8002c58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	2200      	movs	r2, #0
 80028c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80028c4:	68bb      	ldr	r3, [r7, #8]
 80028c6:	f003 0308 	and.w	r3, r3, #8
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d020      	beq.n	8002910 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	f003 0308 	and.w	r3, r3, #8
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d01b      	beq.n	8002910 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f06f 0208 	mvn.w	r2, #8
 80028e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2204      	movs	r2, #4
 80028e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	69db      	ldr	r3, [r3, #28]
 80028ee:	f003 0303 	and.w	r3, r3, #3
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d003      	beq.n	80028fe <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80028f6:	6878      	ldr	r0, [r7, #4]
 80028f8:	f000 f9a4 	bl	8002c44 <HAL_TIM_IC_CaptureCallback>
 80028fc:	e005      	b.n	800290a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80028fe:	6878      	ldr	r0, [r7, #4]
 8002900:	f000 f996 	bl	8002c30 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002904:	6878      	ldr	r0, [r7, #4]
 8002906:	f000 f9a7 	bl	8002c58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	2200      	movs	r2, #0
 800290e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002910:	68bb      	ldr	r3, [r7, #8]
 8002912:	f003 0310 	and.w	r3, r3, #16
 8002916:	2b00      	cmp	r3, #0
 8002918:	d020      	beq.n	800295c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	f003 0310 	and.w	r3, r3, #16
 8002920:	2b00      	cmp	r3, #0
 8002922:	d01b      	beq.n	800295c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f06f 0210 	mvn.w	r2, #16
 800292c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	2208      	movs	r2, #8
 8002932:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	69db      	ldr	r3, [r3, #28]
 800293a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800293e:	2b00      	cmp	r3, #0
 8002940:	d003      	beq.n	800294a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002942:	6878      	ldr	r0, [r7, #4]
 8002944:	f000 f97e 	bl	8002c44 <HAL_TIM_IC_CaptureCallback>
 8002948:	e005      	b.n	8002956 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800294a:	6878      	ldr	r0, [r7, #4]
 800294c:	f000 f970 	bl	8002c30 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002950:	6878      	ldr	r0, [r7, #4]
 8002952:	f000 f981 	bl	8002c58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	2200      	movs	r2, #0
 800295a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800295c:	68bb      	ldr	r3, [r7, #8]
 800295e:	f003 0301 	and.w	r3, r3, #1
 8002962:	2b00      	cmp	r3, #0
 8002964:	d00c      	beq.n	8002980 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	f003 0301 	and.w	r3, r3, #1
 800296c:	2b00      	cmp	r3, #0
 800296e:	d007      	beq.n	8002980 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f06f 0201 	mvn.w	r2, #1
 8002978:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800297a:	6878      	ldr	r0, [r7, #4]
 800297c:	f7fe f820 	bl	80009c0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002980:	68bb      	ldr	r3, [r7, #8]
 8002982:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002986:	2b00      	cmp	r3, #0
 8002988:	d00c      	beq.n	80029a4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002990:	2b00      	cmp	r3, #0
 8002992:	d007      	beq.n	80029a4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800299c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800299e:	6878      	ldr	r0, [r7, #4]
 80029a0:	f000 fc1e 	bl	80031e0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80029a4:	68bb      	ldr	r3, [r7, #8]
 80029a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d00c      	beq.n	80029c8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d007      	beq.n	80029c8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80029c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80029c2:	6878      	ldr	r0, [r7, #4]
 80029c4:	f000 f952 	bl	8002c6c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80029c8:	68bb      	ldr	r3, [r7, #8]
 80029ca:	f003 0320 	and.w	r3, r3, #32
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d00c      	beq.n	80029ec <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	f003 0320 	and.w	r3, r3, #32
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d007      	beq.n	80029ec <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f06f 0220 	mvn.w	r2, #32
 80029e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80029e6:	6878      	ldr	r0, [r7, #4]
 80029e8:	f000 fbf0 	bl	80031cc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80029ec:	bf00      	nop
 80029ee:	3710      	adds	r7, #16
 80029f0:	46bd      	mov	sp, r7
 80029f2:	bd80      	pop	{r7, pc}

080029f4 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b086      	sub	sp, #24
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	60f8      	str	r0, [r7, #12]
 80029fc:	60b9      	str	r1, [r7, #8]
 80029fe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a00:	2300      	movs	r3, #0
 8002a02:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002a0a:	2b01      	cmp	r3, #1
 8002a0c:	d101      	bne.n	8002a12 <HAL_TIM_OC_ConfigChannel+0x1e>
 8002a0e:	2302      	movs	r3, #2
 8002a10:	e048      	b.n	8002aa4 <HAL_TIM_OC_ConfigChannel+0xb0>
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	2201      	movs	r2, #1
 8002a16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	2b0c      	cmp	r3, #12
 8002a1e:	d839      	bhi.n	8002a94 <HAL_TIM_OC_ConfigChannel+0xa0>
 8002a20:	a201      	add	r2, pc, #4	@ (adr r2, 8002a28 <HAL_TIM_OC_ConfigChannel+0x34>)
 8002a22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a26:	bf00      	nop
 8002a28:	08002a5d 	.word	0x08002a5d
 8002a2c:	08002a95 	.word	0x08002a95
 8002a30:	08002a95 	.word	0x08002a95
 8002a34:	08002a95 	.word	0x08002a95
 8002a38:	08002a6b 	.word	0x08002a6b
 8002a3c:	08002a95 	.word	0x08002a95
 8002a40:	08002a95 	.word	0x08002a95
 8002a44:	08002a95 	.word	0x08002a95
 8002a48:	08002a79 	.word	0x08002a79
 8002a4c:	08002a95 	.word	0x08002a95
 8002a50:	08002a95 	.word	0x08002a95
 8002a54:	08002a95 	.word	0x08002a95
 8002a58:	08002a87 	.word	0x08002a87
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	68b9      	ldr	r1, [r7, #8]
 8002a62:	4618      	mov	r0, r3
 8002a64:	f000 f992 	bl	8002d8c <TIM_OC1_SetConfig>
      break;
 8002a68:	e017      	b.n	8002a9a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	68b9      	ldr	r1, [r7, #8]
 8002a70:	4618      	mov	r0, r3
 8002a72:	f000 f9f1 	bl	8002e58 <TIM_OC2_SetConfig>
      break;
 8002a76:	e010      	b.n	8002a9a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	68b9      	ldr	r1, [r7, #8]
 8002a7e:	4618      	mov	r0, r3
 8002a80:	f000 fa56 	bl	8002f30 <TIM_OC3_SetConfig>
      break;
 8002a84:	e009      	b.n	8002a9a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	68b9      	ldr	r1, [r7, #8]
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	f000 fab9 	bl	8003004 <TIM_OC4_SetConfig>
      break;
 8002a92:	e002      	b.n	8002a9a <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8002a94:	2301      	movs	r3, #1
 8002a96:	75fb      	strb	r3, [r7, #23]
      break;
 8002a98:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002aa2:	7dfb      	ldrb	r3, [r7, #23]
}
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	3718      	adds	r7, #24
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	bd80      	pop	{r7, pc}

08002aac <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b086      	sub	sp, #24
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	60f8      	str	r0, [r7, #12]
 8002ab4:	60b9      	str	r1, [r7, #8]
 8002ab6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ab8:	2300      	movs	r3, #0
 8002aba:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002ac2:	2b01      	cmp	r3, #1
 8002ac4:	d101      	bne.n	8002aca <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002ac6:	2302      	movs	r3, #2
 8002ac8:	e0ae      	b.n	8002c28 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	2201      	movs	r2, #1
 8002ace:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	2b0c      	cmp	r3, #12
 8002ad6:	f200 809f 	bhi.w	8002c18 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002ada:	a201      	add	r2, pc, #4	@ (adr r2, 8002ae0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002adc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ae0:	08002b15 	.word	0x08002b15
 8002ae4:	08002c19 	.word	0x08002c19
 8002ae8:	08002c19 	.word	0x08002c19
 8002aec:	08002c19 	.word	0x08002c19
 8002af0:	08002b55 	.word	0x08002b55
 8002af4:	08002c19 	.word	0x08002c19
 8002af8:	08002c19 	.word	0x08002c19
 8002afc:	08002c19 	.word	0x08002c19
 8002b00:	08002b97 	.word	0x08002b97
 8002b04:	08002c19 	.word	0x08002c19
 8002b08:	08002c19 	.word	0x08002c19
 8002b0c:	08002c19 	.word	0x08002c19
 8002b10:	08002bd7 	.word	0x08002bd7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	68b9      	ldr	r1, [r7, #8]
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	f000 f936 	bl	8002d8c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	699a      	ldr	r2, [r3, #24]
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f042 0208 	orr.w	r2, r2, #8
 8002b2e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	699a      	ldr	r2, [r3, #24]
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f022 0204 	bic.w	r2, r2, #4
 8002b3e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	6999      	ldr	r1, [r3, #24]
 8002b46:	68bb      	ldr	r3, [r7, #8]
 8002b48:	691a      	ldr	r2, [r3, #16]
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	430a      	orrs	r2, r1
 8002b50:	619a      	str	r2, [r3, #24]
      break;
 8002b52:	e064      	b.n	8002c1e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	68b9      	ldr	r1, [r7, #8]
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	f000 f97c 	bl	8002e58 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	699a      	ldr	r2, [r3, #24]
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002b6e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	699a      	ldr	r2, [r3, #24]
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002b7e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	6999      	ldr	r1, [r3, #24]
 8002b86:	68bb      	ldr	r3, [r7, #8]
 8002b88:	691b      	ldr	r3, [r3, #16]
 8002b8a:	021a      	lsls	r2, r3, #8
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	430a      	orrs	r2, r1
 8002b92:	619a      	str	r2, [r3, #24]
      break;
 8002b94:	e043      	b.n	8002c1e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	68b9      	ldr	r1, [r7, #8]
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	f000 f9c7 	bl	8002f30 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	69da      	ldr	r2, [r3, #28]
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f042 0208 	orr.w	r2, r2, #8
 8002bb0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	69da      	ldr	r2, [r3, #28]
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f022 0204 	bic.w	r2, r2, #4
 8002bc0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	69d9      	ldr	r1, [r3, #28]
 8002bc8:	68bb      	ldr	r3, [r7, #8]
 8002bca:	691a      	ldr	r2, [r3, #16]
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	430a      	orrs	r2, r1
 8002bd2:	61da      	str	r2, [r3, #28]
      break;
 8002bd4:	e023      	b.n	8002c1e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	68b9      	ldr	r1, [r7, #8]
 8002bdc:	4618      	mov	r0, r3
 8002bde:	f000 fa11 	bl	8003004 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	69da      	ldr	r2, [r3, #28]
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002bf0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	69da      	ldr	r2, [r3, #28]
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002c00:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	69d9      	ldr	r1, [r3, #28]
 8002c08:	68bb      	ldr	r3, [r7, #8]
 8002c0a:	691b      	ldr	r3, [r3, #16]
 8002c0c:	021a      	lsls	r2, r3, #8
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	430a      	orrs	r2, r1
 8002c14:	61da      	str	r2, [r3, #28]
      break;
 8002c16:	e002      	b.n	8002c1e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002c18:	2301      	movs	r3, #1
 8002c1a:	75fb      	strb	r3, [r7, #23]
      break;
 8002c1c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	2200      	movs	r2, #0
 8002c22:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002c26:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c28:	4618      	mov	r0, r3
 8002c2a:	3718      	adds	r7, #24
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	bd80      	pop	{r7, pc}

08002c30 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002c30:	b480      	push	{r7}
 8002c32:	b083      	sub	sp, #12
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002c38:	bf00      	nop
 8002c3a:	370c      	adds	r7, #12
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c42:	4770      	bx	lr

08002c44 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002c44:	b480      	push	{r7}
 8002c46:	b083      	sub	sp, #12
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002c4c:	bf00      	nop
 8002c4e:	370c      	adds	r7, #12
 8002c50:	46bd      	mov	sp, r7
 8002c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c56:	4770      	bx	lr

08002c58 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002c58:	b480      	push	{r7}
 8002c5a:	b083      	sub	sp, #12
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002c60:	bf00      	nop
 8002c62:	370c      	adds	r7, #12
 8002c64:	46bd      	mov	sp, r7
 8002c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6a:	4770      	bx	lr

08002c6c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	b083      	sub	sp, #12
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002c74:	bf00      	nop
 8002c76:	370c      	adds	r7, #12
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7e:	4770      	bx	lr

08002c80 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002c80:	b480      	push	{r7}
 8002c82:	b085      	sub	sp, #20
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
 8002c88:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	4a37      	ldr	r2, [pc, #220]	@ (8002d70 <TIM_Base_SetConfig+0xf0>)
 8002c94:	4293      	cmp	r3, r2
 8002c96:	d00f      	beq.n	8002cb8 <TIM_Base_SetConfig+0x38>
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002c9e:	d00b      	beq.n	8002cb8 <TIM_Base_SetConfig+0x38>
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	4a34      	ldr	r2, [pc, #208]	@ (8002d74 <TIM_Base_SetConfig+0xf4>)
 8002ca4:	4293      	cmp	r3, r2
 8002ca6:	d007      	beq.n	8002cb8 <TIM_Base_SetConfig+0x38>
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	4a33      	ldr	r2, [pc, #204]	@ (8002d78 <TIM_Base_SetConfig+0xf8>)
 8002cac:	4293      	cmp	r3, r2
 8002cae:	d003      	beq.n	8002cb8 <TIM_Base_SetConfig+0x38>
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	4a32      	ldr	r2, [pc, #200]	@ (8002d7c <TIM_Base_SetConfig+0xfc>)
 8002cb4:	4293      	cmp	r3, r2
 8002cb6:	d108      	bne.n	8002cca <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002cbe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	685b      	ldr	r3, [r3, #4]
 8002cc4:	68fa      	ldr	r2, [r7, #12]
 8002cc6:	4313      	orrs	r3, r2
 8002cc8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	4a28      	ldr	r2, [pc, #160]	@ (8002d70 <TIM_Base_SetConfig+0xf0>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d01b      	beq.n	8002d0a <TIM_Base_SetConfig+0x8a>
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002cd8:	d017      	beq.n	8002d0a <TIM_Base_SetConfig+0x8a>
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	4a25      	ldr	r2, [pc, #148]	@ (8002d74 <TIM_Base_SetConfig+0xf4>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d013      	beq.n	8002d0a <TIM_Base_SetConfig+0x8a>
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	4a24      	ldr	r2, [pc, #144]	@ (8002d78 <TIM_Base_SetConfig+0xf8>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d00f      	beq.n	8002d0a <TIM_Base_SetConfig+0x8a>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	4a23      	ldr	r2, [pc, #140]	@ (8002d7c <TIM_Base_SetConfig+0xfc>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d00b      	beq.n	8002d0a <TIM_Base_SetConfig+0x8a>
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	4a22      	ldr	r2, [pc, #136]	@ (8002d80 <TIM_Base_SetConfig+0x100>)
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d007      	beq.n	8002d0a <TIM_Base_SetConfig+0x8a>
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	4a21      	ldr	r2, [pc, #132]	@ (8002d84 <TIM_Base_SetConfig+0x104>)
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d003      	beq.n	8002d0a <TIM_Base_SetConfig+0x8a>
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	4a20      	ldr	r2, [pc, #128]	@ (8002d88 <TIM_Base_SetConfig+0x108>)
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d108      	bne.n	8002d1c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002d10:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	68db      	ldr	r3, [r3, #12]
 8002d16:	68fa      	ldr	r2, [r7, #12]
 8002d18:	4313      	orrs	r3, r2
 8002d1a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	695b      	ldr	r3, [r3, #20]
 8002d26:	4313      	orrs	r3, r2
 8002d28:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	689a      	ldr	r2, [r3, #8]
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	681a      	ldr	r2, [r3, #0]
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	4a0c      	ldr	r2, [pc, #48]	@ (8002d70 <TIM_Base_SetConfig+0xf0>)
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d103      	bne.n	8002d4a <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	691a      	ldr	r2, [r3, #16]
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f043 0204 	orr.w	r2, r3, #4
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	2201      	movs	r2, #1
 8002d5a:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	68fa      	ldr	r2, [r7, #12]
 8002d60:	601a      	str	r2, [r3, #0]
}
 8002d62:	bf00      	nop
 8002d64:	3714      	adds	r7, #20
 8002d66:	46bd      	mov	sp, r7
 8002d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6c:	4770      	bx	lr
 8002d6e:	bf00      	nop
 8002d70:	40010000 	.word	0x40010000
 8002d74:	40000400 	.word	0x40000400
 8002d78:	40000800 	.word	0x40000800
 8002d7c:	40000c00 	.word	0x40000c00
 8002d80:	40014000 	.word	0x40014000
 8002d84:	40014400 	.word	0x40014400
 8002d88:	40014800 	.word	0x40014800

08002d8c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	b087      	sub	sp, #28
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
 8002d94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6a1b      	ldr	r3, [r3, #32]
 8002d9a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6a1b      	ldr	r3, [r3, #32]
 8002da0:	f023 0201 	bic.w	r2, r3, #1
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	685b      	ldr	r3, [r3, #4]
 8002dac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	699b      	ldr	r3, [r3, #24]
 8002db2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002dba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	f023 0303 	bic.w	r3, r3, #3
 8002dc2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	68fa      	ldr	r2, [r7, #12]
 8002dca:	4313      	orrs	r3, r2
 8002dcc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002dce:	697b      	ldr	r3, [r7, #20]
 8002dd0:	f023 0302 	bic.w	r3, r3, #2
 8002dd4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	689b      	ldr	r3, [r3, #8]
 8002dda:	697a      	ldr	r2, [r7, #20]
 8002ddc:	4313      	orrs	r3, r2
 8002dde:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	4a1c      	ldr	r2, [pc, #112]	@ (8002e54 <TIM_OC1_SetConfig+0xc8>)
 8002de4:	4293      	cmp	r3, r2
 8002de6:	d10c      	bne.n	8002e02 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002de8:	697b      	ldr	r3, [r7, #20]
 8002dea:	f023 0308 	bic.w	r3, r3, #8
 8002dee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	68db      	ldr	r3, [r3, #12]
 8002df4:	697a      	ldr	r2, [r7, #20]
 8002df6:	4313      	orrs	r3, r2
 8002df8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002dfa:	697b      	ldr	r3, [r7, #20]
 8002dfc:	f023 0304 	bic.w	r3, r3, #4
 8002e00:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	4a13      	ldr	r2, [pc, #76]	@ (8002e54 <TIM_OC1_SetConfig+0xc8>)
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d111      	bne.n	8002e2e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002e0a:	693b      	ldr	r3, [r7, #16]
 8002e0c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002e10:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002e12:	693b      	ldr	r3, [r7, #16]
 8002e14:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002e18:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	695b      	ldr	r3, [r3, #20]
 8002e1e:	693a      	ldr	r2, [r7, #16]
 8002e20:	4313      	orrs	r3, r2
 8002e22:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	699b      	ldr	r3, [r3, #24]
 8002e28:	693a      	ldr	r2, [r7, #16]
 8002e2a:	4313      	orrs	r3, r2
 8002e2c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	693a      	ldr	r2, [r7, #16]
 8002e32:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	68fa      	ldr	r2, [r7, #12]
 8002e38:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	685a      	ldr	r2, [r3, #4]
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	697a      	ldr	r2, [r7, #20]
 8002e46:	621a      	str	r2, [r3, #32]
}
 8002e48:	bf00      	nop
 8002e4a:	371c      	adds	r7, #28
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e52:	4770      	bx	lr
 8002e54:	40010000 	.word	0x40010000

08002e58 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002e58:	b480      	push	{r7}
 8002e5a:	b087      	sub	sp, #28
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
 8002e60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6a1b      	ldr	r3, [r3, #32]
 8002e66:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6a1b      	ldr	r3, [r3, #32]
 8002e6c:	f023 0210 	bic.w	r2, r3, #16
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	685b      	ldr	r3, [r3, #4]
 8002e78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	699b      	ldr	r3, [r3, #24]
 8002e7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002e86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002e8e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	021b      	lsls	r3, r3, #8
 8002e96:	68fa      	ldr	r2, [r7, #12]
 8002e98:	4313      	orrs	r3, r2
 8002e9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002e9c:	697b      	ldr	r3, [r7, #20]
 8002e9e:	f023 0320 	bic.w	r3, r3, #32
 8002ea2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	689b      	ldr	r3, [r3, #8]
 8002ea8:	011b      	lsls	r3, r3, #4
 8002eaa:	697a      	ldr	r2, [r7, #20]
 8002eac:	4313      	orrs	r3, r2
 8002eae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	4a1e      	ldr	r2, [pc, #120]	@ (8002f2c <TIM_OC2_SetConfig+0xd4>)
 8002eb4:	4293      	cmp	r3, r2
 8002eb6:	d10d      	bne.n	8002ed4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002eb8:	697b      	ldr	r3, [r7, #20]
 8002eba:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002ebe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	68db      	ldr	r3, [r3, #12]
 8002ec4:	011b      	lsls	r3, r3, #4
 8002ec6:	697a      	ldr	r2, [r7, #20]
 8002ec8:	4313      	orrs	r3, r2
 8002eca:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002ecc:	697b      	ldr	r3, [r7, #20]
 8002ece:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002ed2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	4a15      	ldr	r2, [pc, #84]	@ (8002f2c <TIM_OC2_SetConfig+0xd4>)
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	d113      	bne.n	8002f04 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002edc:	693b      	ldr	r3, [r7, #16]
 8002ede:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002ee2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002ee4:	693b      	ldr	r3, [r7, #16]
 8002ee6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002eea:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	695b      	ldr	r3, [r3, #20]
 8002ef0:	009b      	lsls	r3, r3, #2
 8002ef2:	693a      	ldr	r2, [r7, #16]
 8002ef4:	4313      	orrs	r3, r2
 8002ef6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	699b      	ldr	r3, [r3, #24]
 8002efc:	009b      	lsls	r3, r3, #2
 8002efe:	693a      	ldr	r2, [r7, #16]
 8002f00:	4313      	orrs	r3, r2
 8002f02:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	693a      	ldr	r2, [r7, #16]
 8002f08:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	68fa      	ldr	r2, [r7, #12]
 8002f0e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	685a      	ldr	r2, [r3, #4]
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	697a      	ldr	r2, [r7, #20]
 8002f1c:	621a      	str	r2, [r3, #32]
}
 8002f1e:	bf00      	nop
 8002f20:	371c      	adds	r7, #28
 8002f22:	46bd      	mov	sp, r7
 8002f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f28:	4770      	bx	lr
 8002f2a:	bf00      	nop
 8002f2c:	40010000 	.word	0x40010000

08002f30 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002f30:	b480      	push	{r7}
 8002f32:	b087      	sub	sp, #28
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
 8002f38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6a1b      	ldr	r3, [r3, #32]
 8002f3e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6a1b      	ldr	r3, [r3, #32]
 8002f44:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	685b      	ldr	r3, [r3, #4]
 8002f50:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	69db      	ldr	r3, [r3, #28]
 8002f56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002f5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	f023 0303 	bic.w	r3, r3, #3
 8002f66:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	68fa      	ldr	r2, [r7, #12]
 8002f6e:	4313      	orrs	r3, r2
 8002f70:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002f72:	697b      	ldr	r3, [r7, #20]
 8002f74:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002f78:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	689b      	ldr	r3, [r3, #8]
 8002f7e:	021b      	lsls	r3, r3, #8
 8002f80:	697a      	ldr	r2, [r7, #20]
 8002f82:	4313      	orrs	r3, r2
 8002f84:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	4a1d      	ldr	r2, [pc, #116]	@ (8003000 <TIM_OC3_SetConfig+0xd0>)
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d10d      	bne.n	8002faa <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002f8e:	697b      	ldr	r3, [r7, #20]
 8002f90:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002f94:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	68db      	ldr	r3, [r3, #12]
 8002f9a:	021b      	lsls	r3, r3, #8
 8002f9c:	697a      	ldr	r2, [r7, #20]
 8002f9e:	4313      	orrs	r3, r2
 8002fa0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002fa2:	697b      	ldr	r3, [r7, #20]
 8002fa4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002fa8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	4a14      	ldr	r2, [pc, #80]	@ (8003000 <TIM_OC3_SetConfig+0xd0>)
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d113      	bne.n	8002fda <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002fb2:	693b      	ldr	r3, [r7, #16]
 8002fb4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002fb8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002fba:	693b      	ldr	r3, [r7, #16]
 8002fbc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002fc0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	695b      	ldr	r3, [r3, #20]
 8002fc6:	011b      	lsls	r3, r3, #4
 8002fc8:	693a      	ldr	r2, [r7, #16]
 8002fca:	4313      	orrs	r3, r2
 8002fcc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	699b      	ldr	r3, [r3, #24]
 8002fd2:	011b      	lsls	r3, r3, #4
 8002fd4:	693a      	ldr	r2, [r7, #16]
 8002fd6:	4313      	orrs	r3, r2
 8002fd8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	693a      	ldr	r2, [r7, #16]
 8002fde:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	68fa      	ldr	r2, [r7, #12]
 8002fe4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	685a      	ldr	r2, [r3, #4]
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	697a      	ldr	r2, [r7, #20]
 8002ff2:	621a      	str	r2, [r3, #32]
}
 8002ff4:	bf00      	nop
 8002ff6:	371c      	adds	r7, #28
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffe:	4770      	bx	lr
 8003000:	40010000 	.word	0x40010000

08003004 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003004:	b480      	push	{r7}
 8003006:	b087      	sub	sp, #28
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
 800300c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6a1b      	ldr	r3, [r3, #32]
 8003012:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6a1b      	ldr	r3, [r3, #32]
 8003018:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	685b      	ldr	r3, [r3, #4]
 8003024:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	69db      	ldr	r3, [r3, #28]
 800302a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003032:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800303a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	021b      	lsls	r3, r3, #8
 8003042:	68fa      	ldr	r2, [r7, #12]
 8003044:	4313      	orrs	r3, r2
 8003046:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003048:	693b      	ldr	r3, [r7, #16]
 800304a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800304e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	689b      	ldr	r3, [r3, #8]
 8003054:	031b      	lsls	r3, r3, #12
 8003056:	693a      	ldr	r2, [r7, #16]
 8003058:	4313      	orrs	r3, r2
 800305a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	4a10      	ldr	r2, [pc, #64]	@ (80030a0 <TIM_OC4_SetConfig+0x9c>)
 8003060:	4293      	cmp	r3, r2
 8003062:	d109      	bne.n	8003078 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003064:	697b      	ldr	r3, [r7, #20]
 8003066:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800306a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	695b      	ldr	r3, [r3, #20]
 8003070:	019b      	lsls	r3, r3, #6
 8003072:	697a      	ldr	r2, [r7, #20]
 8003074:	4313      	orrs	r3, r2
 8003076:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	697a      	ldr	r2, [r7, #20]
 800307c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	68fa      	ldr	r2, [r7, #12]
 8003082:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	685a      	ldr	r2, [r3, #4]
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	693a      	ldr	r2, [r7, #16]
 8003090:	621a      	str	r2, [r3, #32]
}
 8003092:	bf00      	nop
 8003094:	371c      	adds	r7, #28
 8003096:	46bd      	mov	sp, r7
 8003098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309c:	4770      	bx	lr
 800309e:	bf00      	nop
 80030a0:	40010000 	.word	0x40010000

080030a4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80030a4:	b480      	push	{r7}
 80030a6:	b087      	sub	sp, #28
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	60f8      	str	r0, [r7, #12]
 80030ac:	60b9      	str	r1, [r7, #8]
 80030ae:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80030b0:	68bb      	ldr	r3, [r7, #8]
 80030b2:	f003 031f 	and.w	r3, r3, #31
 80030b6:	2201      	movs	r2, #1
 80030b8:	fa02 f303 	lsl.w	r3, r2, r3
 80030bc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	6a1a      	ldr	r2, [r3, #32]
 80030c2:	697b      	ldr	r3, [r7, #20]
 80030c4:	43db      	mvns	r3, r3
 80030c6:	401a      	ands	r2, r3
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	6a1a      	ldr	r2, [r3, #32]
 80030d0:	68bb      	ldr	r3, [r7, #8]
 80030d2:	f003 031f 	and.w	r3, r3, #31
 80030d6:	6879      	ldr	r1, [r7, #4]
 80030d8:	fa01 f303 	lsl.w	r3, r1, r3
 80030dc:	431a      	orrs	r2, r3
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	621a      	str	r2, [r3, #32]
}
 80030e2:	bf00      	nop
 80030e4:	371c      	adds	r7, #28
 80030e6:	46bd      	mov	sp, r7
 80030e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ec:	4770      	bx	lr
	...

080030f0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80030f0:	b480      	push	{r7}
 80030f2:	b085      	sub	sp, #20
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
 80030f8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003100:	2b01      	cmp	r3, #1
 8003102:	d101      	bne.n	8003108 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003104:	2302      	movs	r3, #2
 8003106:	e050      	b.n	80031aa <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2201      	movs	r2, #1
 800310c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2202      	movs	r2, #2
 8003114:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	685b      	ldr	r3, [r3, #4]
 800311e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	689b      	ldr	r3, [r3, #8]
 8003126:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800312e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	68fa      	ldr	r2, [r7, #12]
 8003136:	4313      	orrs	r3, r2
 8003138:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	68fa      	ldr	r2, [r7, #12]
 8003140:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	4a1c      	ldr	r2, [pc, #112]	@ (80031b8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003148:	4293      	cmp	r3, r2
 800314a:	d018      	beq.n	800317e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003154:	d013      	beq.n	800317e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	4a18      	ldr	r2, [pc, #96]	@ (80031bc <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800315c:	4293      	cmp	r3, r2
 800315e:	d00e      	beq.n	800317e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	4a16      	ldr	r2, [pc, #88]	@ (80031c0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003166:	4293      	cmp	r3, r2
 8003168:	d009      	beq.n	800317e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	4a15      	ldr	r2, [pc, #84]	@ (80031c4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003170:	4293      	cmp	r3, r2
 8003172:	d004      	beq.n	800317e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	4a13      	ldr	r2, [pc, #76]	@ (80031c8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800317a:	4293      	cmp	r3, r2
 800317c:	d10c      	bne.n	8003198 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800317e:	68bb      	ldr	r3, [r7, #8]
 8003180:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003184:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	685b      	ldr	r3, [r3, #4]
 800318a:	68ba      	ldr	r2, [r7, #8]
 800318c:	4313      	orrs	r3, r2
 800318e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	68ba      	ldr	r2, [r7, #8]
 8003196:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2201      	movs	r2, #1
 800319c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2200      	movs	r2, #0
 80031a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80031a8:	2300      	movs	r3, #0
}
 80031aa:	4618      	mov	r0, r3
 80031ac:	3714      	adds	r7, #20
 80031ae:	46bd      	mov	sp, r7
 80031b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b4:	4770      	bx	lr
 80031b6:	bf00      	nop
 80031b8:	40010000 	.word	0x40010000
 80031bc:	40000400 	.word	0x40000400
 80031c0:	40000800 	.word	0x40000800
 80031c4:	40000c00 	.word	0x40000c00
 80031c8:	40014000 	.word	0x40014000

080031cc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80031cc:	b480      	push	{r7}
 80031ce:	b083      	sub	sp, #12
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80031d4:	bf00      	nop
 80031d6:	370c      	adds	r7, #12
 80031d8:	46bd      	mov	sp, r7
 80031da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031de:	4770      	bx	lr

080031e0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80031e0:	b480      	push	{r7}
 80031e2:	b083      	sub	sp, #12
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80031e8:	bf00      	nop
 80031ea:	370c      	adds	r7, #12
 80031ec:	46bd      	mov	sp, r7
 80031ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f2:	4770      	bx	lr

080031f4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b082      	sub	sp, #8
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d101      	bne.n	8003206 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003202:	2301      	movs	r3, #1
 8003204:	e042      	b.n	800328c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800320c:	b2db      	uxtb	r3, r3
 800320e:	2b00      	cmp	r3, #0
 8003210:	d106      	bne.n	8003220 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2200      	movs	r2, #0
 8003216:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800321a:	6878      	ldr	r0, [r7, #4]
 800321c:	f7fd ff5e 	bl	80010dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2224      	movs	r2, #36	@ 0x24
 8003224:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	68da      	ldr	r2, [r3, #12]
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003236:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003238:	6878      	ldr	r0, [r7, #4]
 800323a:	f000 fdd3 	bl	8003de4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	691a      	ldr	r2, [r3, #16]
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800324c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	695a      	ldr	r2, [r3, #20]
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800325c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	68da      	ldr	r2, [r3, #12]
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800326c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	2200      	movs	r2, #0
 8003272:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2220      	movs	r2, #32
 8003278:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2220      	movs	r2, #32
 8003280:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2200      	movs	r2, #0
 8003288:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800328a:	2300      	movs	r3, #0
}
 800328c:	4618      	mov	r0, r3
 800328e:	3708      	adds	r7, #8
 8003290:	46bd      	mov	sp, r7
 8003292:	bd80      	pop	{r7, pc}

08003294 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b08a      	sub	sp, #40	@ 0x28
 8003298:	af02      	add	r7, sp, #8
 800329a:	60f8      	str	r0, [r7, #12]
 800329c:	60b9      	str	r1, [r7, #8]
 800329e:	603b      	str	r3, [r7, #0]
 80032a0:	4613      	mov	r3, r2
 80032a2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80032a4:	2300      	movs	r3, #0
 80032a6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80032ae:	b2db      	uxtb	r3, r3
 80032b0:	2b20      	cmp	r3, #32
 80032b2:	d175      	bne.n	80033a0 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80032b4:	68bb      	ldr	r3, [r7, #8]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d002      	beq.n	80032c0 <HAL_UART_Transmit+0x2c>
 80032ba:	88fb      	ldrh	r3, [r7, #6]
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d101      	bne.n	80032c4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80032c0:	2301      	movs	r3, #1
 80032c2:	e06e      	b.n	80033a2 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	2200      	movs	r2, #0
 80032c8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	2221      	movs	r2, #33	@ 0x21
 80032ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80032d2:	f7fe f909 	bl	80014e8 <HAL_GetTick>
 80032d6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	88fa      	ldrh	r2, [r7, #6]
 80032dc:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	88fa      	ldrh	r2, [r7, #6]
 80032e2:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	689b      	ldr	r3, [r3, #8]
 80032e8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80032ec:	d108      	bne.n	8003300 <HAL_UART_Transmit+0x6c>
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	691b      	ldr	r3, [r3, #16]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d104      	bne.n	8003300 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80032f6:	2300      	movs	r3, #0
 80032f8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80032fa:	68bb      	ldr	r3, [r7, #8]
 80032fc:	61bb      	str	r3, [r7, #24]
 80032fe:	e003      	b.n	8003308 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003300:	68bb      	ldr	r3, [r7, #8]
 8003302:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003304:	2300      	movs	r3, #0
 8003306:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003308:	e02e      	b.n	8003368 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	9300      	str	r3, [sp, #0]
 800330e:	697b      	ldr	r3, [r7, #20]
 8003310:	2200      	movs	r2, #0
 8003312:	2180      	movs	r1, #128	@ 0x80
 8003314:	68f8      	ldr	r0, [r7, #12]
 8003316:	f000 fb37 	bl	8003988 <UART_WaitOnFlagUntilTimeout>
 800331a:	4603      	mov	r3, r0
 800331c:	2b00      	cmp	r3, #0
 800331e:	d005      	beq.n	800332c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	2220      	movs	r2, #32
 8003324:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003328:	2303      	movs	r3, #3
 800332a:	e03a      	b.n	80033a2 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800332c:	69fb      	ldr	r3, [r7, #28]
 800332e:	2b00      	cmp	r3, #0
 8003330:	d10b      	bne.n	800334a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003332:	69bb      	ldr	r3, [r7, #24]
 8003334:	881b      	ldrh	r3, [r3, #0]
 8003336:	461a      	mov	r2, r3
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003340:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003342:	69bb      	ldr	r3, [r7, #24]
 8003344:	3302      	adds	r3, #2
 8003346:	61bb      	str	r3, [r7, #24]
 8003348:	e007      	b.n	800335a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800334a:	69fb      	ldr	r3, [r7, #28]
 800334c:	781a      	ldrb	r2, [r3, #0]
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003354:	69fb      	ldr	r3, [r7, #28]
 8003356:	3301      	adds	r3, #1
 8003358:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800335e:	b29b      	uxth	r3, r3
 8003360:	3b01      	subs	r3, #1
 8003362:	b29a      	uxth	r2, r3
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800336c:	b29b      	uxth	r3, r3
 800336e:	2b00      	cmp	r3, #0
 8003370:	d1cb      	bne.n	800330a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	9300      	str	r3, [sp, #0]
 8003376:	697b      	ldr	r3, [r7, #20]
 8003378:	2200      	movs	r2, #0
 800337a:	2140      	movs	r1, #64	@ 0x40
 800337c:	68f8      	ldr	r0, [r7, #12]
 800337e:	f000 fb03 	bl	8003988 <UART_WaitOnFlagUntilTimeout>
 8003382:	4603      	mov	r3, r0
 8003384:	2b00      	cmp	r3, #0
 8003386:	d005      	beq.n	8003394 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	2220      	movs	r2, #32
 800338c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003390:	2303      	movs	r3, #3
 8003392:	e006      	b.n	80033a2 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	2220      	movs	r2, #32
 8003398:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800339c:	2300      	movs	r3, #0
 800339e:	e000      	b.n	80033a2 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80033a0:	2302      	movs	r3, #2
  }
}
 80033a2:	4618      	mov	r0, r3
 80033a4:	3720      	adds	r7, #32
 80033a6:	46bd      	mov	sp, r7
 80033a8:	bd80      	pop	{r7, pc}

080033aa <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80033aa:	b580      	push	{r7, lr}
 80033ac:	b084      	sub	sp, #16
 80033ae:	af00      	add	r7, sp, #0
 80033b0:	60f8      	str	r0, [r7, #12]
 80033b2:	60b9      	str	r1, [r7, #8]
 80033b4:	4613      	mov	r3, r2
 80033b6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80033be:	b2db      	uxtb	r3, r3
 80033c0:	2b20      	cmp	r3, #32
 80033c2:	d112      	bne.n	80033ea <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80033c4:	68bb      	ldr	r3, [r7, #8]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d002      	beq.n	80033d0 <HAL_UART_Receive_IT+0x26>
 80033ca:	88fb      	ldrh	r3, [r7, #6]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d101      	bne.n	80033d4 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80033d0:	2301      	movs	r3, #1
 80033d2:	e00b      	b.n	80033ec <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	2200      	movs	r2, #0
 80033d8:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80033da:	88fb      	ldrh	r3, [r7, #6]
 80033dc:	461a      	mov	r2, r3
 80033de:	68b9      	ldr	r1, [r7, #8]
 80033e0:	68f8      	ldr	r0, [r7, #12]
 80033e2:	f000 fb2a 	bl	8003a3a <UART_Start_Receive_IT>
 80033e6:	4603      	mov	r3, r0
 80033e8:	e000      	b.n	80033ec <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80033ea:	2302      	movs	r3, #2
  }
}
 80033ec:	4618      	mov	r0, r3
 80033ee:	3710      	adds	r7, #16
 80033f0:	46bd      	mov	sp, r7
 80033f2:	bd80      	pop	{r7, pc}

080033f4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b0ba      	sub	sp, #232	@ 0xe8
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	68db      	ldr	r3, [r3, #12]
 800340c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	695b      	ldr	r3, [r3, #20]
 8003416:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800341a:	2300      	movs	r3, #0
 800341c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003420:	2300      	movs	r3, #0
 8003422:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003426:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800342a:	f003 030f 	and.w	r3, r3, #15
 800342e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8003432:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003436:	2b00      	cmp	r3, #0
 8003438:	d10f      	bne.n	800345a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800343a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800343e:	f003 0320 	and.w	r3, r3, #32
 8003442:	2b00      	cmp	r3, #0
 8003444:	d009      	beq.n	800345a <HAL_UART_IRQHandler+0x66>
 8003446:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800344a:	f003 0320 	and.w	r3, r3, #32
 800344e:	2b00      	cmp	r3, #0
 8003450:	d003      	beq.n	800345a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003452:	6878      	ldr	r0, [r7, #4]
 8003454:	f000 fc07 	bl	8003c66 <UART_Receive_IT>
      return;
 8003458:	e273      	b.n	8003942 <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800345a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800345e:	2b00      	cmp	r3, #0
 8003460:	f000 80de 	beq.w	8003620 <HAL_UART_IRQHandler+0x22c>
 8003464:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003468:	f003 0301 	and.w	r3, r3, #1
 800346c:	2b00      	cmp	r3, #0
 800346e:	d106      	bne.n	800347e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003470:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003474:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003478:	2b00      	cmp	r3, #0
 800347a:	f000 80d1 	beq.w	8003620 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800347e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003482:	f003 0301 	and.w	r3, r3, #1
 8003486:	2b00      	cmp	r3, #0
 8003488:	d00b      	beq.n	80034a2 <HAL_UART_IRQHandler+0xae>
 800348a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800348e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003492:	2b00      	cmp	r3, #0
 8003494:	d005      	beq.n	80034a2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800349a:	f043 0201 	orr.w	r2, r3, #1
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80034a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80034a6:	f003 0304 	and.w	r3, r3, #4
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d00b      	beq.n	80034c6 <HAL_UART_IRQHandler+0xd2>
 80034ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80034b2:	f003 0301 	and.w	r3, r3, #1
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d005      	beq.n	80034c6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034be:	f043 0202 	orr.w	r2, r3, #2
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80034c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80034ca:	f003 0302 	and.w	r3, r3, #2
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d00b      	beq.n	80034ea <HAL_UART_IRQHandler+0xf6>
 80034d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80034d6:	f003 0301 	and.w	r3, r3, #1
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d005      	beq.n	80034ea <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034e2:	f043 0204 	orr.w	r2, r3, #4
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80034ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80034ee:	f003 0308 	and.w	r3, r3, #8
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d011      	beq.n	800351a <HAL_UART_IRQHandler+0x126>
 80034f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80034fa:	f003 0320 	and.w	r3, r3, #32
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d105      	bne.n	800350e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003502:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003506:	f003 0301 	and.w	r3, r3, #1
 800350a:	2b00      	cmp	r3, #0
 800350c:	d005      	beq.n	800351a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003512:	f043 0208 	orr.w	r2, r3, #8
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800351e:	2b00      	cmp	r3, #0
 8003520:	f000 820a 	beq.w	8003938 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003524:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003528:	f003 0320 	and.w	r3, r3, #32
 800352c:	2b00      	cmp	r3, #0
 800352e:	d008      	beq.n	8003542 <HAL_UART_IRQHandler+0x14e>
 8003530:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003534:	f003 0320 	and.w	r3, r3, #32
 8003538:	2b00      	cmp	r3, #0
 800353a:	d002      	beq.n	8003542 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800353c:	6878      	ldr	r0, [r7, #4]
 800353e:	f000 fb92 	bl	8003c66 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	695b      	ldr	r3, [r3, #20]
 8003548:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800354c:	2b40      	cmp	r3, #64	@ 0x40
 800354e:	bf0c      	ite	eq
 8003550:	2301      	moveq	r3, #1
 8003552:	2300      	movne	r3, #0
 8003554:	b2db      	uxtb	r3, r3
 8003556:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800355e:	f003 0308 	and.w	r3, r3, #8
 8003562:	2b00      	cmp	r3, #0
 8003564:	d103      	bne.n	800356e <HAL_UART_IRQHandler+0x17a>
 8003566:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800356a:	2b00      	cmp	r3, #0
 800356c:	d04f      	beq.n	800360e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800356e:	6878      	ldr	r0, [r7, #4]
 8003570:	f000 fa9d 	bl	8003aae <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	695b      	ldr	r3, [r3, #20]
 800357a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800357e:	2b40      	cmp	r3, #64	@ 0x40
 8003580:	d141      	bne.n	8003606 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	3314      	adds	r3, #20
 8003588:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800358c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003590:	e853 3f00 	ldrex	r3, [r3]
 8003594:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003598:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800359c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80035a0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	3314      	adds	r3, #20
 80035aa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80035ae:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80035b2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035b6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80035ba:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80035be:	e841 2300 	strex	r3, r2, [r1]
 80035c2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80035c6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d1d9      	bne.n	8003582 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d013      	beq.n	80035fe <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035da:	4a8a      	ldr	r2, [pc, #552]	@ (8003804 <HAL_UART_IRQHandler+0x410>)
 80035dc:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035e2:	4618      	mov	r0, r3
 80035e4:	f7fe f90d 	bl	8001802 <HAL_DMA_Abort_IT>
 80035e8:	4603      	mov	r3, r0
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d016      	beq.n	800361c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80035f4:	687a      	ldr	r2, [r7, #4]
 80035f6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80035f8:	4610      	mov	r0, r2
 80035fa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035fc:	e00e      	b.n	800361c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80035fe:	6878      	ldr	r0, [r7, #4]
 8003600:	f000 f9ac 	bl	800395c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003604:	e00a      	b.n	800361c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003606:	6878      	ldr	r0, [r7, #4]
 8003608:	f000 f9a8 	bl	800395c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800360c:	e006      	b.n	800361c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800360e:	6878      	ldr	r0, [r7, #4]
 8003610:	f000 f9a4 	bl	800395c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2200      	movs	r2, #0
 8003618:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800361a:	e18d      	b.n	8003938 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800361c:	bf00      	nop
    return;
 800361e:	e18b      	b.n	8003938 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003624:	2b01      	cmp	r3, #1
 8003626:	f040 8167 	bne.w	80038f8 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800362a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800362e:	f003 0310 	and.w	r3, r3, #16
 8003632:	2b00      	cmp	r3, #0
 8003634:	f000 8160 	beq.w	80038f8 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 8003638:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800363c:	f003 0310 	and.w	r3, r3, #16
 8003640:	2b00      	cmp	r3, #0
 8003642:	f000 8159 	beq.w	80038f8 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003646:	2300      	movs	r3, #0
 8003648:	60bb      	str	r3, [r7, #8]
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	60bb      	str	r3, [r7, #8]
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	685b      	ldr	r3, [r3, #4]
 8003658:	60bb      	str	r3, [r7, #8]
 800365a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	695b      	ldr	r3, [r3, #20]
 8003662:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003666:	2b40      	cmp	r3, #64	@ 0x40
 8003668:	f040 80ce 	bne.w	8003808 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	685b      	ldr	r3, [r3, #4]
 8003674:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003678:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800367c:	2b00      	cmp	r3, #0
 800367e:	f000 80a9 	beq.w	80037d4 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003686:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800368a:	429a      	cmp	r2, r3
 800368c:	f080 80a2 	bcs.w	80037d4 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003696:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800369c:	69db      	ldr	r3, [r3, #28]
 800369e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80036a2:	f000 8088 	beq.w	80037b6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	330c      	adds	r3, #12
 80036ac:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036b0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80036b4:	e853 3f00 	ldrex	r3, [r3]
 80036b8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80036bc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80036c0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80036c4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	330c      	adds	r3, #12
 80036ce:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80036d2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80036d6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036da:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80036de:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80036e2:	e841 2300 	strex	r3, r2, [r1]
 80036e6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80036ea:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d1d9      	bne.n	80036a6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	3314      	adds	r3, #20
 80036f8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036fa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80036fc:	e853 3f00 	ldrex	r3, [r3]
 8003700:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003702:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003704:	f023 0301 	bic.w	r3, r3, #1
 8003708:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	3314      	adds	r3, #20
 8003712:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003716:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800371a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800371c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800371e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003722:	e841 2300 	strex	r3, r2, [r1]
 8003726:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003728:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800372a:	2b00      	cmp	r3, #0
 800372c:	d1e1      	bne.n	80036f2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	3314      	adds	r3, #20
 8003734:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003736:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003738:	e853 3f00 	ldrex	r3, [r3]
 800373c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800373e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003740:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003744:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	3314      	adds	r3, #20
 800374e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003752:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003754:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003756:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003758:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800375a:	e841 2300 	strex	r3, r2, [r1]
 800375e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003760:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003762:	2b00      	cmp	r3, #0
 8003764:	d1e3      	bne.n	800372e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2220      	movs	r2, #32
 800376a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	2200      	movs	r2, #0
 8003772:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	330c      	adds	r3, #12
 800377a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800377c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800377e:	e853 3f00 	ldrex	r3, [r3]
 8003782:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003784:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003786:	f023 0310 	bic.w	r3, r3, #16
 800378a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	330c      	adds	r3, #12
 8003794:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8003798:	65ba      	str	r2, [r7, #88]	@ 0x58
 800379a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800379c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800379e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80037a0:	e841 2300 	strex	r3, r2, [r1]
 80037a4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80037a6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d1e3      	bne.n	8003774 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037b0:	4618      	mov	r0, r3
 80037b2:	f7fd ffb6 	bl	8001722 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2202      	movs	r2, #2
 80037ba:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80037c4:	b29b      	uxth	r3, r3
 80037c6:	1ad3      	subs	r3, r2, r3
 80037c8:	b29b      	uxth	r3, r3
 80037ca:	4619      	mov	r1, r3
 80037cc:	6878      	ldr	r0, [r7, #4]
 80037ce:	f000 f8cf 	bl	8003970 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80037d2:	e0b3      	b.n	800393c <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80037d8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80037dc:	429a      	cmp	r2, r3
 80037de:	f040 80ad 	bne.w	800393c <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037e6:	69db      	ldr	r3, [r3, #28]
 80037e8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80037ec:	f040 80a6 	bne.w	800393c <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2202      	movs	r2, #2
 80037f4:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80037fa:	4619      	mov	r1, r3
 80037fc:	6878      	ldr	r0, [r7, #4]
 80037fe:	f000 f8b7 	bl	8003970 <HAL_UARTEx_RxEventCallback>
      return;
 8003802:	e09b      	b.n	800393c <HAL_UART_IRQHandler+0x548>
 8003804:	08003b75 	.word	0x08003b75
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003810:	b29b      	uxth	r3, r3
 8003812:	1ad3      	subs	r3, r2, r3
 8003814:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800381c:	b29b      	uxth	r3, r3
 800381e:	2b00      	cmp	r3, #0
 8003820:	f000 808e 	beq.w	8003940 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 8003824:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003828:	2b00      	cmp	r3, #0
 800382a:	f000 8089 	beq.w	8003940 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	330c      	adds	r3, #12
 8003834:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003836:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003838:	e853 3f00 	ldrex	r3, [r3]
 800383c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800383e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003840:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003844:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	330c      	adds	r3, #12
 800384e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8003852:	647a      	str	r2, [r7, #68]	@ 0x44
 8003854:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003856:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003858:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800385a:	e841 2300 	strex	r3, r2, [r1]
 800385e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003860:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003862:	2b00      	cmp	r3, #0
 8003864:	d1e3      	bne.n	800382e <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	3314      	adds	r3, #20
 800386c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800386e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003870:	e853 3f00 	ldrex	r3, [r3]
 8003874:	623b      	str	r3, [r7, #32]
   return(result);
 8003876:	6a3b      	ldr	r3, [r7, #32]
 8003878:	f023 0301 	bic.w	r3, r3, #1
 800387c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	3314      	adds	r3, #20
 8003886:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800388a:	633a      	str	r2, [r7, #48]	@ 0x30
 800388c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800388e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003890:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003892:	e841 2300 	strex	r3, r2, [r1]
 8003896:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003898:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800389a:	2b00      	cmp	r3, #0
 800389c:	d1e3      	bne.n	8003866 <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	2220      	movs	r2, #32
 80038a2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	2200      	movs	r2, #0
 80038aa:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	330c      	adds	r3, #12
 80038b2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038b4:	693b      	ldr	r3, [r7, #16]
 80038b6:	e853 3f00 	ldrex	r3, [r3]
 80038ba:	60fb      	str	r3, [r7, #12]
   return(result);
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	f023 0310 	bic.w	r3, r3, #16
 80038c2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	330c      	adds	r3, #12
 80038cc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80038d0:	61fa      	str	r2, [r7, #28]
 80038d2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038d4:	69b9      	ldr	r1, [r7, #24]
 80038d6:	69fa      	ldr	r2, [r7, #28]
 80038d8:	e841 2300 	strex	r3, r2, [r1]
 80038dc:	617b      	str	r3, [r7, #20]
   return(result);
 80038de:	697b      	ldr	r3, [r7, #20]
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d1e3      	bne.n	80038ac <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2202      	movs	r2, #2
 80038e8:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80038ea:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80038ee:	4619      	mov	r1, r3
 80038f0:	6878      	ldr	r0, [r7, #4]
 80038f2:	f000 f83d 	bl	8003970 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80038f6:	e023      	b.n	8003940 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80038f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80038fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003900:	2b00      	cmp	r3, #0
 8003902:	d009      	beq.n	8003918 <HAL_UART_IRQHandler+0x524>
 8003904:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003908:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800390c:	2b00      	cmp	r3, #0
 800390e:	d003      	beq.n	8003918 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 8003910:	6878      	ldr	r0, [r7, #4]
 8003912:	f000 f940 	bl	8003b96 <UART_Transmit_IT>
    return;
 8003916:	e014      	b.n	8003942 <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003918:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800391c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003920:	2b00      	cmp	r3, #0
 8003922:	d00e      	beq.n	8003942 <HAL_UART_IRQHandler+0x54e>
 8003924:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003928:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800392c:	2b00      	cmp	r3, #0
 800392e:	d008      	beq.n	8003942 <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 8003930:	6878      	ldr	r0, [r7, #4]
 8003932:	f000 f980 	bl	8003c36 <UART_EndTransmit_IT>
    return;
 8003936:	e004      	b.n	8003942 <HAL_UART_IRQHandler+0x54e>
    return;
 8003938:	bf00      	nop
 800393a:	e002      	b.n	8003942 <HAL_UART_IRQHandler+0x54e>
      return;
 800393c:	bf00      	nop
 800393e:	e000      	b.n	8003942 <HAL_UART_IRQHandler+0x54e>
      return;
 8003940:	bf00      	nop
  }
}
 8003942:	37e8      	adds	r7, #232	@ 0xe8
 8003944:	46bd      	mov	sp, r7
 8003946:	bd80      	pop	{r7, pc}

08003948 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003948:	b480      	push	{r7}
 800394a:	b083      	sub	sp, #12
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003950:	bf00      	nop
 8003952:	370c      	adds	r7, #12
 8003954:	46bd      	mov	sp, r7
 8003956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395a:	4770      	bx	lr

0800395c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800395c:	b480      	push	{r7}
 800395e:	b083      	sub	sp, #12
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003964:	bf00      	nop
 8003966:	370c      	adds	r7, #12
 8003968:	46bd      	mov	sp, r7
 800396a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396e:	4770      	bx	lr

08003970 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003970:	b480      	push	{r7}
 8003972:	b083      	sub	sp, #12
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
 8003978:	460b      	mov	r3, r1
 800397a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800397c:	bf00      	nop
 800397e:	370c      	adds	r7, #12
 8003980:	46bd      	mov	sp, r7
 8003982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003986:	4770      	bx	lr

08003988 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b086      	sub	sp, #24
 800398c:	af00      	add	r7, sp, #0
 800398e:	60f8      	str	r0, [r7, #12]
 8003990:	60b9      	str	r1, [r7, #8]
 8003992:	603b      	str	r3, [r7, #0]
 8003994:	4613      	mov	r3, r2
 8003996:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003998:	e03b      	b.n	8003a12 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800399a:	6a3b      	ldr	r3, [r7, #32]
 800399c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039a0:	d037      	beq.n	8003a12 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039a2:	f7fd fda1 	bl	80014e8 <HAL_GetTick>
 80039a6:	4602      	mov	r2, r0
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	1ad3      	subs	r3, r2, r3
 80039ac:	6a3a      	ldr	r2, [r7, #32]
 80039ae:	429a      	cmp	r2, r3
 80039b0:	d302      	bcc.n	80039b8 <UART_WaitOnFlagUntilTimeout+0x30>
 80039b2:	6a3b      	ldr	r3, [r7, #32]
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d101      	bne.n	80039bc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80039b8:	2303      	movs	r3, #3
 80039ba:	e03a      	b.n	8003a32 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	68db      	ldr	r3, [r3, #12]
 80039c2:	f003 0304 	and.w	r3, r3, #4
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d023      	beq.n	8003a12 <UART_WaitOnFlagUntilTimeout+0x8a>
 80039ca:	68bb      	ldr	r3, [r7, #8]
 80039cc:	2b80      	cmp	r3, #128	@ 0x80
 80039ce:	d020      	beq.n	8003a12 <UART_WaitOnFlagUntilTimeout+0x8a>
 80039d0:	68bb      	ldr	r3, [r7, #8]
 80039d2:	2b40      	cmp	r3, #64	@ 0x40
 80039d4:	d01d      	beq.n	8003a12 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f003 0308 	and.w	r3, r3, #8
 80039e0:	2b08      	cmp	r3, #8
 80039e2:	d116      	bne.n	8003a12 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80039e4:	2300      	movs	r3, #0
 80039e6:	617b      	str	r3, [r7, #20]
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	617b      	str	r3, [r7, #20]
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	685b      	ldr	r3, [r3, #4]
 80039f6:	617b      	str	r3, [r7, #20]
 80039f8:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80039fa:	68f8      	ldr	r0, [r7, #12]
 80039fc:	f000 f857 	bl	8003aae <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	2208      	movs	r2, #8
 8003a04:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	2200      	movs	r2, #0
 8003a0a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003a0e:	2301      	movs	r3, #1
 8003a10:	e00f      	b.n	8003a32 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	681a      	ldr	r2, [r3, #0]
 8003a18:	68bb      	ldr	r3, [r7, #8]
 8003a1a:	4013      	ands	r3, r2
 8003a1c:	68ba      	ldr	r2, [r7, #8]
 8003a1e:	429a      	cmp	r2, r3
 8003a20:	bf0c      	ite	eq
 8003a22:	2301      	moveq	r3, #1
 8003a24:	2300      	movne	r3, #0
 8003a26:	b2db      	uxtb	r3, r3
 8003a28:	461a      	mov	r2, r3
 8003a2a:	79fb      	ldrb	r3, [r7, #7]
 8003a2c:	429a      	cmp	r2, r3
 8003a2e:	d0b4      	beq.n	800399a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003a30:	2300      	movs	r3, #0
}
 8003a32:	4618      	mov	r0, r3
 8003a34:	3718      	adds	r7, #24
 8003a36:	46bd      	mov	sp, r7
 8003a38:	bd80      	pop	{r7, pc}

08003a3a <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003a3a:	b480      	push	{r7}
 8003a3c:	b085      	sub	sp, #20
 8003a3e:	af00      	add	r7, sp, #0
 8003a40:	60f8      	str	r0, [r7, #12]
 8003a42:	60b9      	str	r1, [r7, #8]
 8003a44:	4613      	mov	r3, r2
 8003a46:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	68ba      	ldr	r2, [r7, #8]
 8003a4c:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	88fa      	ldrh	r2, [r7, #6]
 8003a52:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	88fa      	ldrh	r2, [r7, #6]
 8003a58:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	2222      	movs	r2, #34	@ 0x22
 8003a64:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	691b      	ldr	r3, [r3, #16]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d007      	beq.n	8003a80 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	68da      	ldr	r2, [r3, #12]
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003a7e:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	695a      	ldr	r2, [r3, #20]
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f042 0201 	orr.w	r2, r2, #1
 8003a8e:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	68da      	ldr	r2, [r3, #12]
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f042 0220 	orr.w	r2, r2, #32
 8003a9e:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003aa0:	2300      	movs	r3, #0
}
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	3714      	adds	r7, #20
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aac:	4770      	bx	lr

08003aae <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003aae:	b480      	push	{r7}
 8003ab0:	b095      	sub	sp, #84	@ 0x54
 8003ab2:	af00      	add	r7, sp, #0
 8003ab4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	330c      	adds	r3, #12
 8003abc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003abe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ac0:	e853 3f00 	ldrex	r3, [r3]
 8003ac4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003ac6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ac8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003acc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	330c      	adds	r3, #12
 8003ad4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003ad6:	643a      	str	r2, [r7, #64]	@ 0x40
 8003ad8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ada:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003adc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003ade:	e841 2300 	strex	r3, r2, [r1]
 8003ae2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003ae4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d1e5      	bne.n	8003ab6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	3314      	adds	r3, #20
 8003af0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003af2:	6a3b      	ldr	r3, [r7, #32]
 8003af4:	e853 3f00 	ldrex	r3, [r3]
 8003af8:	61fb      	str	r3, [r7, #28]
   return(result);
 8003afa:	69fb      	ldr	r3, [r7, #28]
 8003afc:	f023 0301 	bic.w	r3, r3, #1
 8003b00:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	3314      	adds	r3, #20
 8003b08:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003b0a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003b0c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b0e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003b10:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003b12:	e841 2300 	strex	r3, r2, [r1]
 8003b16:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003b18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d1e5      	bne.n	8003aea <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b22:	2b01      	cmp	r3, #1
 8003b24:	d119      	bne.n	8003b5a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	330c      	adds	r3, #12
 8003b2c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	e853 3f00 	ldrex	r3, [r3]
 8003b34:	60bb      	str	r3, [r7, #8]
   return(result);
 8003b36:	68bb      	ldr	r3, [r7, #8]
 8003b38:	f023 0310 	bic.w	r3, r3, #16
 8003b3c:	647b      	str	r3, [r7, #68]	@ 0x44
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	330c      	adds	r3, #12
 8003b44:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003b46:	61ba      	str	r2, [r7, #24]
 8003b48:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b4a:	6979      	ldr	r1, [r7, #20]
 8003b4c:	69ba      	ldr	r2, [r7, #24]
 8003b4e:	e841 2300 	strex	r3, r2, [r1]
 8003b52:	613b      	str	r3, [r7, #16]
   return(result);
 8003b54:	693b      	ldr	r3, [r7, #16]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d1e5      	bne.n	8003b26 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	2220      	movs	r2, #32
 8003b5e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	2200      	movs	r2, #0
 8003b66:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003b68:	bf00      	nop
 8003b6a:	3754      	adds	r7, #84	@ 0x54
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b72:	4770      	bx	lr

08003b74 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b084      	sub	sp, #16
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b80:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	2200      	movs	r2, #0
 8003b86:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003b88:	68f8      	ldr	r0, [r7, #12]
 8003b8a:	f7ff fee7 	bl	800395c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003b8e:	bf00      	nop
 8003b90:	3710      	adds	r7, #16
 8003b92:	46bd      	mov	sp, r7
 8003b94:	bd80      	pop	{r7, pc}

08003b96 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003b96:	b480      	push	{r7}
 8003b98:	b085      	sub	sp, #20
 8003b9a:	af00      	add	r7, sp, #0
 8003b9c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003ba4:	b2db      	uxtb	r3, r3
 8003ba6:	2b21      	cmp	r3, #33	@ 0x21
 8003ba8:	d13e      	bne.n	8003c28 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	689b      	ldr	r3, [r3, #8]
 8003bae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003bb2:	d114      	bne.n	8003bde <UART_Transmit_IT+0x48>
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	691b      	ldr	r3, [r3, #16]
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d110      	bne.n	8003bde <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6a1b      	ldr	r3, [r3, #32]
 8003bc0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	881b      	ldrh	r3, [r3, #0]
 8003bc6:	461a      	mov	r2, r3
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003bd0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6a1b      	ldr	r3, [r3, #32]
 8003bd6:	1c9a      	adds	r2, r3, #2
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	621a      	str	r2, [r3, #32]
 8003bdc:	e008      	b.n	8003bf0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6a1b      	ldr	r3, [r3, #32]
 8003be2:	1c59      	adds	r1, r3, #1
 8003be4:	687a      	ldr	r2, [r7, #4]
 8003be6:	6211      	str	r1, [r2, #32]
 8003be8:	781a      	ldrb	r2, [r3, #0]
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003bf4:	b29b      	uxth	r3, r3
 8003bf6:	3b01      	subs	r3, #1
 8003bf8:	b29b      	uxth	r3, r3
 8003bfa:	687a      	ldr	r2, [r7, #4]
 8003bfc:	4619      	mov	r1, r3
 8003bfe:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d10f      	bne.n	8003c24 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	68da      	ldr	r2, [r3, #12]
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003c12:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	68da      	ldr	r2, [r3, #12]
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003c22:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003c24:	2300      	movs	r3, #0
 8003c26:	e000      	b.n	8003c2a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003c28:	2302      	movs	r3, #2
  }
}
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	3714      	adds	r7, #20
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c34:	4770      	bx	lr

08003c36 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003c36:	b580      	push	{r7, lr}
 8003c38:	b082      	sub	sp, #8
 8003c3a:	af00      	add	r7, sp, #0
 8003c3c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	68da      	ldr	r2, [r3, #12]
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003c4c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	2220      	movs	r2, #32
 8003c52:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003c56:	6878      	ldr	r0, [r7, #4]
 8003c58:	f7ff fe76 	bl	8003948 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003c5c:	2300      	movs	r3, #0
}
 8003c5e:	4618      	mov	r0, r3
 8003c60:	3708      	adds	r7, #8
 8003c62:	46bd      	mov	sp, r7
 8003c64:	bd80      	pop	{r7, pc}

08003c66 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003c66:	b580      	push	{r7, lr}
 8003c68:	b08c      	sub	sp, #48	@ 0x30
 8003c6a:	af00      	add	r7, sp, #0
 8003c6c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 8003c6e:	2300      	movs	r3, #0
 8003c70:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 8003c72:	2300      	movs	r3, #0
 8003c74:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003c7c:	b2db      	uxtb	r3, r3
 8003c7e:	2b22      	cmp	r3, #34	@ 0x22
 8003c80:	f040 80aa 	bne.w	8003dd8 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	689b      	ldr	r3, [r3, #8]
 8003c88:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003c8c:	d115      	bne.n	8003cba <UART_Receive_IT+0x54>
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	691b      	ldr	r3, [r3, #16]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d111      	bne.n	8003cba <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c9a:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	685b      	ldr	r3, [r3, #4]
 8003ca2:	b29b      	uxth	r3, r3
 8003ca4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ca8:	b29a      	uxth	r2, r3
 8003caa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003cac:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cb2:	1c9a      	adds	r2, r3, #2
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	629a      	str	r2, [r3, #40]	@ 0x28
 8003cb8:	e024      	b.n	8003d04 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	689b      	ldr	r3, [r3, #8]
 8003cc4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003cc8:	d007      	beq.n	8003cda <UART_Receive_IT+0x74>
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	689b      	ldr	r3, [r3, #8]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d10a      	bne.n	8003ce8 <UART_Receive_IT+0x82>
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	691b      	ldr	r3, [r3, #16]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d106      	bne.n	8003ce8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	685b      	ldr	r3, [r3, #4]
 8003ce0:	b2da      	uxtb	r2, r3
 8003ce2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ce4:	701a      	strb	r2, [r3, #0]
 8003ce6:	e008      	b.n	8003cfa <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	685b      	ldr	r3, [r3, #4]
 8003cee:	b2db      	uxtb	r3, r3
 8003cf0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003cf4:	b2da      	uxtb	r2, r3
 8003cf6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003cf8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cfe:	1c5a      	adds	r2, r3, #1
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003d08:	b29b      	uxth	r3, r3
 8003d0a:	3b01      	subs	r3, #1
 8003d0c:	b29b      	uxth	r3, r3
 8003d0e:	687a      	ldr	r2, [r7, #4]
 8003d10:	4619      	mov	r1, r3
 8003d12:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d15d      	bne.n	8003dd4 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	68da      	ldr	r2, [r3, #12]
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f022 0220 	bic.w	r2, r2, #32
 8003d26:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	68da      	ldr	r2, [r3, #12]
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003d36:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	695a      	ldr	r2, [r3, #20]
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f022 0201 	bic.w	r2, r2, #1
 8003d46:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2220      	movs	r2, #32
 8003d4c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2200      	movs	r2, #0
 8003d54:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d5a:	2b01      	cmp	r3, #1
 8003d5c:	d135      	bne.n	8003dca <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	2200      	movs	r2, #0
 8003d62:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	330c      	adds	r3, #12
 8003d6a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d6c:	697b      	ldr	r3, [r7, #20]
 8003d6e:	e853 3f00 	ldrex	r3, [r3]
 8003d72:	613b      	str	r3, [r7, #16]
   return(result);
 8003d74:	693b      	ldr	r3, [r7, #16]
 8003d76:	f023 0310 	bic.w	r3, r3, #16
 8003d7a:	627b      	str	r3, [r7, #36]	@ 0x24
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	330c      	adds	r3, #12
 8003d82:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d84:	623a      	str	r2, [r7, #32]
 8003d86:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d88:	69f9      	ldr	r1, [r7, #28]
 8003d8a:	6a3a      	ldr	r2, [r7, #32]
 8003d8c:	e841 2300 	strex	r3, r2, [r1]
 8003d90:	61bb      	str	r3, [r7, #24]
   return(result);
 8003d92:	69bb      	ldr	r3, [r7, #24]
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d1e5      	bne.n	8003d64 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f003 0310 	and.w	r3, r3, #16
 8003da2:	2b10      	cmp	r3, #16
 8003da4:	d10a      	bne.n	8003dbc <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003da6:	2300      	movs	r3, #0
 8003da8:	60fb      	str	r3, [r7, #12]
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	60fb      	str	r3, [r7, #12]
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	685b      	ldr	r3, [r3, #4]
 8003db8:	60fb      	str	r3, [r7, #12]
 8003dba:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003dc0:	4619      	mov	r1, r3
 8003dc2:	6878      	ldr	r0, [r7, #4]
 8003dc4:	f7ff fdd4 	bl	8003970 <HAL_UARTEx_RxEventCallback>
 8003dc8:	e002      	b.n	8003dd0 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003dca:	6878      	ldr	r0, [r7, #4]
 8003dcc:	f7fc ff16 	bl	8000bfc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	e002      	b.n	8003dda <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003dd4:	2300      	movs	r3, #0
 8003dd6:	e000      	b.n	8003dda <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003dd8:	2302      	movs	r3, #2
  }
}
 8003dda:	4618      	mov	r0, r3
 8003ddc:	3730      	adds	r7, #48	@ 0x30
 8003dde:	46bd      	mov	sp, r7
 8003de0:	bd80      	pop	{r7, pc}
	...

08003de4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003de4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003de8:	b0c0      	sub	sp, #256	@ 0x100
 8003dea:	af00      	add	r7, sp, #0
 8003dec:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003df0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	691b      	ldr	r3, [r3, #16]
 8003df8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003dfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e00:	68d9      	ldr	r1, [r3, #12]
 8003e02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e06:	681a      	ldr	r2, [r3, #0]
 8003e08:	ea40 0301 	orr.w	r3, r0, r1
 8003e0c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003e0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e12:	689a      	ldr	r2, [r3, #8]
 8003e14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e18:	691b      	ldr	r3, [r3, #16]
 8003e1a:	431a      	orrs	r2, r3
 8003e1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e20:	695b      	ldr	r3, [r3, #20]
 8003e22:	431a      	orrs	r2, r3
 8003e24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e28:	69db      	ldr	r3, [r3, #28]
 8003e2a:	4313      	orrs	r3, r2
 8003e2c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003e30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	68db      	ldr	r3, [r3, #12]
 8003e38:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003e3c:	f021 010c 	bic.w	r1, r1, #12
 8003e40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e44:	681a      	ldr	r2, [r3, #0]
 8003e46:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003e4a:	430b      	orrs	r3, r1
 8003e4c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003e4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	695b      	ldr	r3, [r3, #20]
 8003e56:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003e5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e5e:	6999      	ldr	r1, [r3, #24]
 8003e60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e64:	681a      	ldr	r2, [r3, #0]
 8003e66:	ea40 0301 	orr.w	r3, r0, r1
 8003e6a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003e6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e70:	681a      	ldr	r2, [r3, #0]
 8003e72:	4b8f      	ldr	r3, [pc, #572]	@ (80040b0 <UART_SetConfig+0x2cc>)
 8003e74:	429a      	cmp	r2, r3
 8003e76:	d005      	beq.n	8003e84 <UART_SetConfig+0xa0>
 8003e78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e7c:	681a      	ldr	r2, [r3, #0]
 8003e7e:	4b8d      	ldr	r3, [pc, #564]	@ (80040b4 <UART_SetConfig+0x2d0>)
 8003e80:	429a      	cmp	r2, r3
 8003e82:	d104      	bne.n	8003e8e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003e84:	f7fe fb02 	bl	800248c <HAL_RCC_GetPCLK2Freq>
 8003e88:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003e8c:	e003      	b.n	8003e96 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003e8e:	f7fe fae9 	bl	8002464 <HAL_RCC_GetPCLK1Freq>
 8003e92:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003e96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e9a:	69db      	ldr	r3, [r3, #28]
 8003e9c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003ea0:	f040 810c 	bne.w	80040bc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003ea4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003eae:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003eb2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003eb6:	4622      	mov	r2, r4
 8003eb8:	462b      	mov	r3, r5
 8003eba:	1891      	adds	r1, r2, r2
 8003ebc:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003ebe:	415b      	adcs	r3, r3
 8003ec0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003ec2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003ec6:	4621      	mov	r1, r4
 8003ec8:	eb12 0801 	adds.w	r8, r2, r1
 8003ecc:	4629      	mov	r1, r5
 8003ece:	eb43 0901 	adc.w	r9, r3, r1
 8003ed2:	f04f 0200 	mov.w	r2, #0
 8003ed6:	f04f 0300 	mov.w	r3, #0
 8003eda:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003ede:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003ee2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003ee6:	4690      	mov	r8, r2
 8003ee8:	4699      	mov	r9, r3
 8003eea:	4623      	mov	r3, r4
 8003eec:	eb18 0303 	adds.w	r3, r8, r3
 8003ef0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003ef4:	462b      	mov	r3, r5
 8003ef6:	eb49 0303 	adc.w	r3, r9, r3
 8003efa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003efe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f02:	685b      	ldr	r3, [r3, #4]
 8003f04:	2200      	movs	r2, #0
 8003f06:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003f0a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003f0e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003f12:	460b      	mov	r3, r1
 8003f14:	18db      	adds	r3, r3, r3
 8003f16:	653b      	str	r3, [r7, #80]	@ 0x50
 8003f18:	4613      	mov	r3, r2
 8003f1a:	eb42 0303 	adc.w	r3, r2, r3
 8003f1e:	657b      	str	r3, [r7, #84]	@ 0x54
 8003f20:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003f24:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003f28:	f7fc f9b2 	bl	8000290 <__aeabi_uldivmod>
 8003f2c:	4602      	mov	r2, r0
 8003f2e:	460b      	mov	r3, r1
 8003f30:	4b61      	ldr	r3, [pc, #388]	@ (80040b8 <UART_SetConfig+0x2d4>)
 8003f32:	fba3 2302 	umull	r2, r3, r3, r2
 8003f36:	095b      	lsrs	r3, r3, #5
 8003f38:	011c      	lsls	r4, r3, #4
 8003f3a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003f3e:	2200      	movs	r2, #0
 8003f40:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003f44:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003f48:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003f4c:	4642      	mov	r2, r8
 8003f4e:	464b      	mov	r3, r9
 8003f50:	1891      	adds	r1, r2, r2
 8003f52:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003f54:	415b      	adcs	r3, r3
 8003f56:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003f58:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003f5c:	4641      	mov	r1, r8
 8003f5e:	eb12 0a01 	adds.w	sl, r2, r1
 8003f62:	4649      	mov	r1, r9
 8003f64:	eb43 0b01 	adc.w	fp, r3, r1
 8003f68:	f04f 0200 	mov.w	r2, #0
 8003f6c:	f04f 0300 	mov.w	r3, #0
 8003f70:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003f74:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003f78:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003f7c:	4692      	mov	sl, r2
 8003f7e:	469b      	mov	fp, r3
 8003f80:	4643      	mov	r3, r8
 8003f82:	eb1a 0303 	adds.w	r3, sl, r3
 8003f86:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003f8a:	464b      	mov	r3, r9
 8003f8c:	eb4b 0303 	adc.w	r3, fp, r3
 8003f90:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003f94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f98:	685b      	ldr	r3, [r3, #4]
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003fa0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003fa4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003fa8:	460b      	mov	r3, r1
 8003faa:	18db      	adds	r3, r3, r3
 8003fac:	643b      	str	r3, [r7, #64]	@ 0x40
 8003fae:	4613      	mov	r3, r2
 8003fb0:	eb42 0303 	adc.w	r3, r2, r3
 8003fb4:	647b      	str	r3, [r7, #68]	@ 0x44
 8003fb6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003fba:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003fbe:	f7fc f967 	bl	8000290 <__aeabi_uldivmod>
 8003fc2:	4602      	mov	r2, r0
 8003fc4:	460b      	mov	r3, r1
 8003fc6:	4611      	mov	r1, r2
 8003fc8:	4b3b      	ldr	r3, [pc, #236]	@ (80040b8 <UART_SetConfig+0x2d4>)
 8003fca:	fba3 2301 	umull	r2, r3, r3, r1
 8003fce:	095b      	lsrs	r3, r3, #5
 8003fd0:	2264      	movs	r2, #100	@ 0x64
 8003fd2:	fb02 f303 	mul.w	r3, r2, r3
 8003fd6:	1acb      	subs	r3, r1, r3
 8003fd8:	00db      	lsls	r3, r3, #3
 8003fda:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003fde:	4b36      	ldr	r3, [pc, #216]	@ (80040b8 <UART_SetConfig+0x2d4>)
 8003fe0:	fba3 2302 	umull	r2, r3, r3, r2
 8003fe4:	095b      	lsrs	r3, r3, #5
 8003fe6:	005b      	lsls	r3, r3, #1
 8003fe8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003fec:	441c      	add	r4, r3
 8003fee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003ff8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003ffc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004000:	4642      	mov	r2, r8
 8004002:	464b      	mov	r3, r9
 8004004:	1891      	adds	r1, r2, r2
 8004006:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004008:	415b      	adcs	r3, r3
 800400a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800400c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004010:	4641      	mov	r1, r8
 8004012:	1851      	adds	r1, r2, r1
 8004014:	6339      	str	r1, [r7, #48]	@ 0x30
 8004016:	4649      	mov	r1, r9
 8004018:	414b      	adcs	r3, r1
 800401a:	637b      	str	r3, [r7, #52]	@ 0x34
 800401c:	f04f 0200 	mov.w	r2, #0
 8004020:	f04f 0300 	mov.w	r3, #0
 8004024:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004028:	4659      	mov	r1, fp
 800402a:	00cb      	lsls	r3, r1, #3
 800402c:	4651      	mov	r1, sl
 800402e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004032:	4651      	mov	r1, sl
 8004034:	00ca      	lsls	r2, r1, #3
 8004036:	4610      	mov	r0, r2
 8004038:	4619      	mov	r1, r3
 800403a:	4603      	mov	r3, r0
 800403c:	4642      	mov	r2, r8
 800403e:	189b      	adds	r3, r3, r2
 8004040:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004044:	464b      	mov	r3, r9
 8004046:	460a      	mov	r2, r1
 8004048:	eb42 0303 	adc.w	r3, r2, r3
 800404c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004050:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004054:	685b      	ldr	r3, [r3, #4]
 8004056:	2200      	movs	r2, #0
 8004058:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800405c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004060:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004064:	460b      	mov	r3, r1
 8004066:	18db      	adds	r3, r3, r3
 8004068:	62bb      	str	r3, [r7, #40]	@ 0x28
 800406a:	4613      	mov	r3, r2
 800406c:	eb42 0303 	adc.w	r3, r2, r3
 8004070:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004072:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004076:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800407a:	f7fc f909 	bl	8000290 <__aeabi_uldivmod>
 800407e:	4602      	mov	r2, r0
 8004080:	460b      	mov	r3, r1
 8004082:	4b0d      	ldr	r3, [pc, #52]	@ (80040b8 <UART_SetConfig+0x2d4>)
 8004084:	fba3 1302 	umull	r1, r3, r3, r2
 8004088:	095b      	lsrs	r3, r3, #5
 800408a:	2164      	movs	r1, #100	@ 0x64
 800408c:	fb01 f303 	mul.w	r3, r1, r3
 8004090:	1ad3      	subs	r3, r2, r3
 8004092:	00db      	lsls	r3, r3, #3
 8004094:	3332      	adds	r3, #50	@ 0x32
 8004096:	4a08      	ldr	r2, [pc, #32]	@ (80040b8 <UART_SetConfig+0x2d4>)
 8004098:	fba2 2303 	umull	r2, r3, r2, r3
 800409c:	095b      	lsrs	r3, r3, #5
 800409e:	f003 0207 	and.w	r2, r3, #7
 80040a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	4422      	add	r2, r4
 80040aa:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80040ac:	e106      	b.n	80042bc <UART_SetConfig+0x4d8>
 80040ae:	bf00      	nop
 80040b0:	40011000 	.word	0x40011000
 80040b4:	40011400 	.word	0x40011400
 80040b8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80040bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80040c0:	2200      	movs	r2, #0
 80040c2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80040c6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80040ca:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80040ce:	4642      	mov	r2, r8
 80040d0:	464b      	mov	r3, r9
 80040d2:	1891      	adds	r1, r2, r2
 80040d4:	6239      	str	r1, [r7, #32]
 80040d6:	415b      	adcs	r3, r3
 80040d8:	627b      	str	r3, [r7, #36]	@ 0x24
 80040da:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80040de:	4641      	mov	r1, r8
 80040e0:	1854      	adds	r4, r2, r1
 80040e2:	4649      	mov	r1, r9
 80040e4:	eb43 0501 	adc.w	r5, r3, r1
 80040e8:	f04f 0200 	mov.w	r2, #0
 80040ec:	f04f 0300 	mov.w	r3, #0
 80040f0:	00eb      	lsls	r3, r5, #3
 80040f2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80040f6:	00e2      	lsls	r2, r4, #3
 80040f8:	4614      	mov	r4, r2
 80040fa:	461d      	mov	r5, r3
 80040fc:	4643      	mov	r3, r8
 80040fe:	18e3      	adds	r3, r4, r3
 8004100:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004104:	464b      	mov	r3, r9
 8004106:	eb45 0303 	adc.w	r3, r5, r3
 800410a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800410e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004112:	685b      	ldr	r3, [r3, #4]
 8004114:	2200      	movs	r2, #0
 8004116:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800411a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800411e:	f04f 0200 	mov.w	r2, #0
 8004122:	f04f 0300 	mov.w	r3, #0
 8004126:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800412a:	4629      	mov	r1, r5
 800412c:	008b      	lsls	r3, r1, #2
 800412e:	4621      	mov	r1, r4
 8004130:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004134:	4621      	mov	r1, r4
 8004136:	008a      	lsls	r2, r1, #2
 8004138:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800413c:	f7fc f8a8 	bl	8000290 <__aeabi_uldivmod>
 8004140:	4602      	mov	r2, r0
 8004142:	460b      	mov	r3, r1
 8004144:	4b60      	ldr	r3, [pc, #384]	@ (80042c8 <UART_SetConfig+0x4e4>)
 8004146:	fba3 2302 	umull	r2, r3, r3, r2
 800414a:	095b      	lsrs	r3, r3, #5
 800414c:	011c      	lsls	r4, r3, #4
 800414e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004152:	2200      	movs	r2, #0
 8004154:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004158:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800415c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004160:	4642      	mov	r2, r8
 8004162:	464b      	mov	r3, r9
 8004164:	1891      	adds	r1, r2, r2
 8004166:	61b9      	str	r1, [r7, #24]
 8004168:	415b      	adcs	r3, r3
 800416a:	61fb      	str	r3, [r7, #28]
 800416c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004170:	4641      	mov	r1, r8
 8004172:	1851      	adds	r1, r2, r1
 8004174:	6139      	str	r1, [r7, #16]
 8004176:	4649      	mov	r1, r9
 8004178:	414b      	adcs	r3, r1
 800417a:	617b      	str	r3, [r7, #20]
 800417c:	f04f 0200 	mov.w	r2, #0
 8004180:	f04f 0300 	mov.w	r3, #0
 8004184:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004188:	4659      	mov	r1, fp
 800418a:	00cb      	lsls	r3, r1, #3
 800418c:	4651      	mov	r1, sl
 800418e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004192:	4651      	mov	r1, sl
 8004194:	00ca      	lsls	r2, r1, #3
 8004196:	4610      	mov	r0, r2
 8004198:	4619      	mov	r1, r3
 800419a:	4603      	mov	r3, r0
 800419c:	4642      	mov	r2, r8
 800419e:	189b      	adds	r3, r3, r2
 80041a0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80041a4:	464b      	mov	r3, r9
 80041a6:	460a      	mov	r2, r1
 80041a8:	eb42 0303 	adc.w	r3, r2, r3
 80041ac:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80041b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041b4:	685b      	ldr	r3, [r3, #4]
 80041b6:	2200      	movs	r2, #0
 80041b8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80041ba:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80041bc:	f04f 0200 	mov.w	r2, #0
 80041c0:	f04f 0300 	mov.w	r3, #0
 80041c4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80041c8:	4649      	mov	r1, r9
 80041ca:	008b      	lsls	r3, r1, #2
 80041cc:	4641      	mov	r1, r8
 80041ce:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80041d2:	4641      	mov	r1, r8
 80041d4:	008a      	lsls	r2, r1, #2
 80041d6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80041da:	f7fc f859 	bl	8000290 <__aeabi_uldivmod>
 80041de:	4602      	mov	r2, r0
 80041e0:	460b      	mov	r3, r1
 80041e2:	4611      	mov	r1, r2
 80041e4:	4b38      	ldr	r3, [pc, #224]	@ (80042c8 <UART_SetConfig+0x4e4>)
 80041e6:	fba3 2301 	umull	r2, r3, r3, r1
 80041ea:	095b      	lsrs	r3, r3, #5
 80041ec:	2264      	movs	r2, #100	@ 0x64
 80041ee:	fb02 f303 	mul.w	r3, r2, r3
 80041f2:	1acb      	subs	r3, r1, r3
 80041f4:	011b      	lsls	r3, r3, #4
 80041f6:	3332      	adds	r3, #50	@ 0x32
 80041f8:	4a33      	ldr	r2, [pc, #204]	@ (80042c8 <UART_SetConfig+0x4e4>)
 80041fa:	fba2 2303 	umull	r2, r3, r2, r3
 80041fe:	095b      	lsrs	r3, r3, #5
 8004200:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004204:	441c      	add	r4, r3
 8004206:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800420a:	2200      	movs	r2, #0
 800420c:	673b      	str	r3, [r7, #112]	@ 0x70
 800420e:	677a      	str	r2, [r7, #116]	@ 0x74
 8004210:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004214:	4642      	mov	r2, r8
 8004216:	464b      	mov	r3, r9
 8004218:	1891      	adds	r1, r2, r2
 800421a:	60b9      	str	r1, [r7, #8]
 800421c:	415b      	adcs	r3, r3
 800421e:	60fb      	str	r3, [r7, #12]
 8004220:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004224:	4641      	mov	r1, r8
 8004226:	1851      	adds	r1, r2, r1
 8004228:	6039      	str	r1, [r7, #0]
 800422a:	4649      	mov	r1, r9
 800422c:	414b      	adcs	r3, r1
 800422e:	607b      	str	r3, [r7, #4]
 8004230:	f04f 0200 	mov.w	r2, #0
 8004234:	f04f 0300 	mov.w	r3, #0
 8004238:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800423c:	4659      	mov	r1, fp
 800423e:	00cb      	lsls	r3, r1, #3
 8004240:	4651      	mov	r1, sl
 8004242:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004246:	4651      	mov	r1, sl
 8004248:	00ca      	lsls	r2, r1, #3
 800424a:	4610      	mov	r0, r2
 800424c:	4619      	mov	r1, r3
 800424e:	4603      	mov	r3, r0
 8004250:	4642      	mov	r2, r8
 8004252:	189b      	adds	r3, r3, r2
 8004254:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004256:	464b      	mov	r3, r9
 8004258:	460a      	mov	r2, r1
 800425a:	eb42 0303 	adc.w	r3, r2, r3
 800425e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004260:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004264:	685b      	ldr	r3, [r3, #4]
 8004266:	2200      	movs	r2, #0
 8004268:	663b      	str	r3, [r7, #96]	@ 0x60
 800426a:	667a      	str	r2, [r7, #100]	@ 0x64
 800426c:	f04f 0200 	mov.w	r2, #0
 8004270:	f04f 0300 	mov.w	r3, #0
 8004274:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004278:	4649      	mov	r1, r9
 800427a:	008b      	lsls	r3, r1, #2
 800427c:	4641      	mov	r1, r8
 800427e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004282:	4641      	mov	r1, r8
 8004284:	008a      	lsls	r2, r1, #2
 8004286:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800428a:	f7fc f801 	bl	8000290 <__aeabi_uldivmod>
 800428e:	4602      	mov	r2, r0
 8004290:	460b      	mov	r3, r1
 8004292:	4b0d      	ldr	r3, [pc, #52]	@ (80042c8 <UART_SetConfig+0x4e4>)
 8004294:	fba3 1302 	umull	r1, r3, r3, r2
 8004298:	095b      	lsrs	r3, r3, #5
 800429a:	2164      	movs	r1, #100	@ 0x64
 800429c:	fb01 f303 	mul.w	r3, r1, r3
 80042a0:	1ad3      	subs	r3, r2, r3
 80042a2:	011b      	lsls	r3, r3, #4
 80042a4:	3332      	adds	r3, #50	@ 0x32
 80042a6:	4a08      	ldr	r2, [pc, #32]	@ (80042c8 <UART_SetConfig+0x4e4>)
 80042a8:	fba2 2303 	umull	r2, r3, r2, r3
 80042ac:	095b      	lsrs	r3, r3, #5
 80042ae:	f003 020f 	and.w	r2, r3, #15
 80042b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	4422      	add	r2, r4
 80042ba:	609a      	str	r2, [r3, #8]
}
 80042bc:	bf00      	nop
 80042be:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80042c2:	46bd      	mov	sp, r7
 80042c4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80042c8:	51eb851f 	.word	0x51eb851f

080042cc <std>:
 80042cc:	2300      	movs	r3, #0
 80042ce:	b510      	push	{r4, lr}
 80042d0:	4604      	mov	r4, r0
 80042d2:	e9c0 3300 	strd	r3, r3, [r0]
 80042d6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80042da:	6083      	str	r3, [r0, #8]
 80042dc:	8181      	strh	r1, [r0, #12]
 80042de:	6643      	str	r3, [r0, #100]	@ 0x64
 80042e0:	81c2      	strh	r2, [r0, #14]
 80042e2:	6183      	str	r3, [r0, #24]
 80042e4:	4619      	mov	r1, r3
 80042e6:	2208      	movs	r2, #8
 80042e8:	305c      	adds	r0, #92	@ 0x5c
 80042ea:	f000 f9f9 	bl	80046e0 <memset>
 80042ee:	4b0d      	ldr	r3, [pc, #52]	@ (8004324 <std+0x58>)
 80042f0:	6263      	str	r3, [r4, #36]	@ 0x24
 80042f2:	4b0d      	ldr	r3, [pc, #52]	@ (8004328 <std+0x5c>)
 80042f4:	62a3      	str	r3, [r4, #40]	@ 0x28
 80042f6:	4b0d      	ldr	r3, [pc, #52]	@ (800432c <std+0x60>)
 80042f8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80042fa:	4b0d      	ldr	r3, [pc, #52]	@ (8004330 <std+0x64>)
 80042fc:	6323      	str	r3, [r4, #48]	@ 0x30
 80042fe:	4b0d      	ldr	r3, [pc, #52]	@ (8004334 <std+0x68>)
 8004300:	6224      	str	r4, [r4, #32]
 8004302:	429c      	cmp	r4, r3
 8004304:	d006      	beq.n	8004314 <std+0x48>
 8004306:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800430a:	4294      	cmp	r4, r2
 800430c:	d002      	beq.n	8004314 <std+0x48>
 800430e:	33d0      	adds	r3, #208	@ 0xd0
 8004310:	429c      	cmp	r4, r3
 8004312:	d105      	bne.n	8004320 <std+0x54>
 8004314:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004318:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800431c:	f000 bab4 	b.w	8004888 <__retarget_lock_init_recursive>
 8004320:	bd10      	pop	{r4, pc}
 8004322:	bf00      	nop
 8004324:	08004531 	.word	0x08004531
 8004328:	08004553 	.word	0x08004553
 800432c:	0800458b 	.word	0x0800458b
 8004330:	080045af 	.word	0x080045af
 8004334:	20000190 	.word	0x20000190

08004338 <stdio_exit_handler>:
 8004338:	4a02      	ldr	r2, [pc, #8]	@ (8004344 <stdio_exit_handler+0xc>)
 800433a:	4903      	ldr	r1, [pc, #12]	@ (8004348 <stdio_exit_handler+0x10>)
 800433c:	4803      	ldr	r0, [pc, #12]	@ (800434c <stdio_exit_handler+0x14>)
 800433e:	f000 b869 	b.w	8004414 <_fwalk_sglue>
 8004342:	bf00      	nop
 8004344:	2000000c 	.word	0x2000000c
 8004348:	08005171 	.word	0x08005171
 800434c:	2000001c 	.word	0x2000001c

08004350 <cleanup_stdio>:
 8004350:	6841      	ldr	r1, [r0, #4]
 8004352:	4b0c      	ldr	r3, [pc, #48]	@ (8004384 <cleanup_stdio+0x34>)
 8004354:	4299      	cmp	r1, r3
 8004356:	b510      	push	{r4, lr}
 8004358:	4604      	mov	r4, r0
 800435a:	d001      	beq.n	8004360 <cleanup_stdio+0x10>
 800435c:	f000 ff08 	bl	8005170 <_fflush_r>
 8004360:	68a1      	ldr	r1, [r4, #8]
 8004362:	4b09      	ldr	r3, [pc, #36]	@ (8004388 <cleanup_stdio+0x38>)
 8004364:	4299      	cmp	r1, r3
 8004366:	d002      	beq.n	800436e <cleanup_stdio+0x1e>
 8004368:	4620      	mov	r0, r4
 800436a:	f000 ff01 	bl	8005170 <_fflush_r>
 800436e:	68e1      	ldr	r1, [r4, #12]
 8004370:	4b06      	ldr	r3, [pc, #24]	@ (800438c <cleanup_stdio+0x3c>)
 8004372:	4299      	cmp	r1, r3
 8004374:	d004      	beq.n	8004380 <cleanup_stdio+0x30>
 8004376:	4620      	mov	r0, r4
 8004378:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800437c:	f000 bef8 	b.w	8005170 <_fflush_r>
 8004380:	bd10      	pop	{r4, pc}
 8004382:	bf00      	nop
 8004384:	20000190 	.word	0x20000190
 8004388:	200001f8 	.word	0x200001f8
 800438c:	20000260 	.word	0x20000260

08004390 <global_stdio_init.part.0>:
 8004390:	b510      	push	{r4, lr}
 8004392:	4b0b      	ldr	r3, [pc, #44]	@ (80043c0 <global_stdio_init.part.0+0x30>)
 8004394:	4c0b      	ldr	r4, [pc, #44]	@ (80043c4 <global_stdio_init.part.0+0x34>)
 8004396:	4a0c      	ldr	r2, [pc, #48]	@ (80043c8 <global_stdio_init.part.0+0x38>)
 8004398:	601a      	str	r2, [r3, #0]
 800439a:	4620      	mov	r0, r4
 800439c:	2200      	movs	r2, #0
 800439e:	2104      	movs	r1, #4
 80043a0:	f7ff ff94 	bl	80042cc <std>
 80043a4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80043a8:	2201      	movs	r2, #1
 80043aa:	2109      	movs	r1, #9
 80043ac:	f7ff ff8e 	bl	80042cc <std>
 80043b0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80043b4:	2202      	movs	r2, #2
 80043b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80043ba:	2112      	movs	r1, #18
 80043bc:	f7ff bf86 	b.w	80042cc <std>
 80043c0:	200002c8 	.word	0x200002c8
 80043c4:	20000190 	.word	0x20000190
 80043c8:	08004339 	.word	0x08004339

080043cc <__sfp_lock_acquire>:
 80043cc:	4801      	ldr	r0, [pc, #4]	@ (80043d4 <__sfp_lock_acquire+0x8>)
 80043ce:	f000 ba5c 	b.w	800488a <__retarget_lock_acquire_recursive>
 80043d2:	bf00      	nop
 80043d4:	200002d1 	.word	0x200002d1

080043d8 <__sfp_lock_release>:
 80043d8:	4801      	ldr	r0, [pc, #4]	@ (80043e0 <__sfp_lock_release+0x8>)
 80043da:	f000 ba57 	b.w	800488c <__retarget_lock_release_recursive>
 80043de:	bf00      	nop
 80043e0:	200002d1 	.word	0x200002d1

080043e4 <__sinit>:
 80043e4:	b510      	push	{r4, lr}
 80043e6:	4604      	mov	r4, r0
 80043e8:	f7ff fff0 	bl	80043cc <__sfp_lock_acquire>
 80043ec:	6a23      	ldr	r3, [r4, #32]
 80043ee:	b11b      	cbz	r3, 80043f8 <__sinit+0x14>
 80043f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80043f4:	f7ff bff0 	b.w	80043d8 <__sfp_lock_release>
 80043f8:	4b04      	ldr	r3, [pc, #16]	@ (800440c <__sinit+0x28>)
 80043fa:	6223      	str	r3, [r4, #32]
 80043fc:	4b04      	ldr	r3, [pc, #16]	@ (8004410 <__sinit+0x2c>)
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	2b00      	cmp	r3, #0
 8004402:	d1f5      	bne.n	80043f0 <__sinit+0xc>
 8004404:	f7ff ffc4 	bl	8004390 <global_stdio_init.part.0>
 8004408:	e7f2      	b.n	80043f0 <__sinit+0xc>
 800440a:	bf00      	nop
 800440c:	08004351 	.word	0x08004351
 8004410:	200002c8 	.word	0x200002c8

08004414 <_fwalk_sglue>:
 8004414:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004418:	4607      	mov	r7, r0
 800441a:	4688      	mov	r8, r1
 800441c:	4614      	mov	r4, r2
 800441e:	2600      	movs	r6, #0
 8004420:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004424:	f1b9 0901 	subs.w	r9, r9, #1
 8004428:	d505      	bpl.n	8004436 <_fwalk_sglue+0x22>
 800442a:	6824      	ldr	r4, [r4, #0]
 800442c:	2c00      	cmp	r4, #0
 800442e:	d1f7      	bne.n	8004420 <_fwalk_sglue+0xc>
 8004430:	4630      	mov	r0, r6
 8004432:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004436:	89ab      	ldrh	r3, [r5, #12]
 8004438:	2b01      	cmp	r3, #1
 800443a:	d907      	bls.n	800444c <_fwalk_sglue+0x38>
 800443c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004440:	3301      	adds	r3, #1
 8004442:	d003      	beq.n	800444c <_fwalk_sglue+0x38>
 8004444:	4629      	mov	r1, r5
 8004446:	4638      	mov	r0, r7
 8004448:	47c0      	blx	r8
 800444a:	4306      	orrs	r6, r0
 800444c:	3568      	adds	r5, #104	@ 0x68
 800444e:	e7e9      	b.n	8004424 <_fwalk_sglue+0x10>

08004450 <iprintf>:
 8004450:	b40f      	push	{r0, r1, r2, r3}
 8004452:	b507      	push	{r0, r1, r2, lr}
 8004454:	4906      	ldr	r1, [pc, #24]	@ (8004470 <iprintf+0x20>)
 8004456:	ab04      	add	r3, sp, #16
 8004458:	6808      	ldr	r0, [r1, #0]
 800445a:	f853 2b04 	ldr.w	r2, [r3], #4
 800445e:	6881      	ldr	r1, [r0, #8]
 8004460:	9301      	str	r3, [sp, #4]
 8004462:	f000 fb5d 	bl	8004b20 <_vfiprintf_r>
 8004466:	b003      	add	sp, #12
 8004468:	f85d eb04 	ldr.w	lr, [sp], #4
 800446c:	b004      	add	sp, #16
 800446e:	4770      	bx	lr
 8004470:	20000018 	.word	0x20000018

08004474 <_puts_r>:
 8004474:	6a03      	ldr	r3, [r0, #32]
 8004476:	b570      	push	{r4, r5, r6, lr}
 8004478:	6884      	ldr	r4, [r0, #8]
 800447a:	4605      	mov	r5, r0
 800447c:	460e      	mov	r6, r1
 800447e:	b90b      	cbnz	r3, 8004484 <_puts_r+0x10>
 8004480:	f7ff ffb0 	bl	80043e4 <__sinit>
 8004484:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004486:	07db      	lsls	r3, r3, #31
 8004488:	d405      	bmi.n	8004496 <_puts_r+0x22>
 800448a:	89a3      	ldrh	r3, [r4, #12]
 800448c:	0598      	lsls	r0, r3, #22
 800448e:	d402      	bmi.n	8004496 <_puts_r+0x22>
 8004490:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004492:	f000 f9fa 	bl	800488a <__retarget_lock_acquire_recursive>
 8004496:	89a3      	ldrh	r3, [r4, #12]
 8004498:	0719      	lsls	r1, r3, #28
 800449a:	d502      	bpl.n	80044a2 <_puts_r+0x2e>
 800449c:	6923      	ldr	r3, [r4, #16]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d135      	bne.n	800450e <_puts_r+0x9a>
 80044a2:	4621      	mov	r1, r4
 80044a4:	4628      	mov	r0, r5
 80044a6:	f000 f8c5 	bl	8004634 <__swsetup_r>
 80044aa:	b380      	cbz	r0, 800450e <_puts_r+0x9a>
 80044ac:	f04f 35ff 	mov.w	r5, #4294967295
 80044b0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80044b2:	07da      	lsls	r2, r3, #31
 80044b4:	d405      	bmi.n	80044c2 <_puts_r+0x4e>
 80044b6:	89a3      	ldrh	r3, [r4, #12]
 80044b8:	059b      	lsls	r3, r3, #22
 80044ba:	d402      	bmi.n	80044c2 <_puts_r+0x4e>
 80044bc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80044be:	f000 f9e5 	bl	800488c <__retarget_lock_release_recursive>
 80044c2:	4628      	mov	r0, r5
 80044c4:	bd70      	pop	{r4, r5, r6, pc}
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	da04      	bge.n	80044d4 <_puts_r+0x60>
 80044ca:	69a2      	ldr	r2, [r4, #24]
 80044cc:	429a      	cmp	r2, r3
 80044ce:	dc17      	bgt.n	8004500 <_puts_r+0x8c>
 80044d0:	290a      	cmp	r1, #10
 80044d2:	d015      	beq.n	8004500 <_puts_r+0x8c>
 80044d4:	6823      	ldr	r3, [r4, #0]
 80044d6:	1c5a      	adds	r2, r3, #1
 80044d8:	6022      	str	r2, [r4, #0]
 80044da:	7019      	strb	r1, [r3, #0]
 80044dc:	68a3      	ldr	r3, [r4, #8]
 80044de:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80044e2:	3b01      	subs	r3, #1
 80044e4:	60a3      	str	r3, [r4, #8]
 80044e6:	2900      	cmp	r1, #0
 80044e8:	d1ed      	bne.n	80044c6 <_puts_r+0x52>
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	da11      	bge.n	8004512 <_puts_r+0x9e>
 80044ee:	4622      	mov	r2, r4
 80044f0:	210a      	movs	r1, #10
 80044f2:	4628      	mov	r0, r5
 80044f4:	f000 f85f 	bl	80045b6 <__swbuf_r>
 80044f8:	3001      	adds	r0, #1
 80044fa:	d0d7      	beq.n	80044ac <_puts_r+0x38>
 80044fc:	250a      	movs	r5, #10
 80044fe:	e7d7      	b.n	80044b0 <_puts_r+0x3c>
 8004500:	4622      	mov	r2, r4
 8004502:	4628      	mov	r0, r5
 8004504:	f000 f857 	bl	80045b6 <__swbuf_r>
 8004508:	3001      	adds	r0, #1
 800450a:	d1e7      	bne.n	80044dc <_puts_r+0x68>
 800450c:	e7ce      	b.n	80044ac <_puts_r+0x38>
 800450e:	3e01      	subs	r6, #1
 8004510:	e7e4      	b.n	80044dc <_puts_r+0x68>
 8004512:	6823      	ldr	r3, [r4, #0]
 8004514:	1c5a      	adds	r2, r3, #1
 8004516:	6022      	str	r2, [r4, #0]
 8004518:	220a      	movs	r2, #10
 800451a:	701a      	strb	r2, [r3, #0]
 800451c:	e7ee      	b.n	80044fc <_puts_r+0x88>
	...

08004520 <puts>:
 8004520:	4b02      	ldr	r3, [pc, #8]	@ (800452c <puts+0xc>)
 8004522:	4601      	mov	r1, r0
 8004524:	6818      	ldr	r0, [r3, #0]
 8004526:	f7ff bfa5 	b.w	8004474 <_puts_r>
 800452a:	bf00      	nop
 800452c:	20000018 	.word	0x20000018

08004530 <__sread>:
 8004530:	b510      	push	{r4, lr}
 8004532:	460c      	mov	r4, r1
 8004534:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004538:	f000 f958 	bl	80047ec <_read_r>
 800453c:	2800      	cmp	r0, #0
 800453e:	bfab      	itete	ge
 8004540:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004542:	89a3      	ldrhlt	r3, [r4, #12]
 8004544:	181b      	addge	r3, r3, r0
 8004546:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800454a:	bfac      	ite	ge
 800454c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800454e:	81a3      	strhlt	r3, [r4, #12]
 8004550:	bd10      	pop	{r4, pc}

08004552 <__swrite>:
 8004552:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004556:	461f      	mov	r7, r3
 8004558:	898b      	ldrh	r3, [r1, #12]
 800455a:	05db      	lsls	r3, r3, #23
 800455c:	4605      	mov	r5, r0
 800455e:	460c      	mov	r4, r1
 8004560:	4616      	mov	r6, r2
 8004562:	d505      	bpl.n	8004570 <__swrite+0x1e>
 8004564:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004568:	2302      	movs	r3, #2
 800456a:	2200      	movs	r2, #0
 800456c:	f000 f92c 	bl	80047c8 <_lseek_r>
 8004570:	89a3      	ldrh	r3, [r4, #12]
 8004572:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004576:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800457a:	81a3      	strh	r3, [r4, #12]
 800457c:	4632      	mov	r2, r6
 800457e:	463b      	mov	r3, r7
 8004580:	4628      	mov	r0, r5
 8004582:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004586:	f000 b943 	b.w	8004810 <_write_r>

0800458a <__sseek>:
 800458a:	b510      	push	{r4, lr}
 800458c:	460c      	mov	r4, r1
 800458e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004592:	f000 f919 	bl	80047c8 <_lseek_r>
 8004596:	1c43      	adds	r3, r0, #1
 8004598:	89a3      	ldrh	r3, [r4, #12]
 800459a:	bf15      	itete	ne
 800459c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800459e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80045a2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80045a6:	81a3      	strheq	r3, [r4, #12]
 80045a8:	bf18      	it	ne
 80045aa:	81a3      	strhne	r3, [r4, #12]
 80045ac:	bd10      	pop	{r4, pc}

080045ae <__sclose>:
 80045ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80045b2:	f000 b8f9 	b.w	80047a8 <_close_r>

080045b6 <__swbuf_r>:
 80045b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045b8:	460e      	mov	r6, r1
 80045ba:	4614      	mov	r4, r2
 80045bc:	4605      	mov	r5, r0
 80045be:	b118      	cbz	r0, 80045c8 <__swbuf_r+0x12>
 80045c0:	6a03      	ldr	r3, [r0, #32]
 80045c2:	b90b      	cbnz	r3, 80045c8 <__swbuf_r+0x12>
 80045c4:	f7ff ff0e 	bl	80043e4 <__sinit>
 80045c8:	69a3      	ldr	r3, [r4, #24]
 80045ca:	60a3      	str	r3, [r4, #8]
 80045cc:	89a3      	ldrh	r3, [r4, #12]
 80045ce:	071a      	lsls	r2, r3, #28
 80045d0:	d501      	bpl.n	80045d6 <__swbuf_r+0x20>
 80045d2:	6923      	ldr	r3, [r4, #16]
 80045d4:	b943      	cbnz	r3, 80045e8 <__swbuf_r+0x32>
 80045d6:	4621      	mov	r1, r4
 80045d8:	4628      	mov	r0, r5
 80045da:	f000 f82b 	bl	8004634 <__swsetup_r>
 80045de:	b118      	cbz	r0, 80045e8 <__swbuf_r+0x32>
 80045e0:	f04f 37ff 	mov.w	r7, #4294967295
 80045e4:	4638      	mov	r0, r7
 80045e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80045e8:	6823      	ldr	r3, [r4, #0]
 80045ea:	6922      	ldr	r2, [r4, #16]
 80045ec:	1a98      	subs	r0, r3, r2
 80045ee:	6963      	ldr	r3, [r4, #20]
 80045f0:	b2f6      	uxtb	r6, r6
 80045f2:	4283      	cmp	r3, r0
 80045f4:	4637      	mov	r7, r6
 80045f6:	dc05      	bgt.n	8004604 <__swbuf_r+0x4e>
 80045f8:	4621      	mov	r1, r4
 80045fa:	4628      	mov	r0, r5
 80045fc:	f000 fdb8 	bl	8005170 <_fflush_r>
 8004600:	2800      	cmp	r0, #0
 8004602:	d1ed      	bne.n	80045e0 <__swbuf_r+0x2a>
 8004604:	68a3      	ldr	r3, [r4, #8]
 8004606:	3b01      	subs	r3, #1
 8004608:	60a3      	str	r3, [r4, #8]
 800460a:	6823      	ldr	r3, [r4, #0]
 800460c:	1c5a      	adds	r2, r3, #1
 800460e:	6022      	str	r2, [r4, #0]
 8004610:	701e      	strb	r6, [r3, #0]
 8004612:	6962      	ldr	r2, [r4, #20]
 8004614:	1c43      	adds	r3, r0, #1
 8004616:	429a      	cmp	r2, r3
 8004618:	d004      	beq.n	8004624 <__swbuf_r+0x6e>
 800461a:	89a3      	ldrh	r3, [r4, #12]
 800461c:	07db      	lsls	r3, r3, #31
 800461e:	d5e1      	bpl.n	80045e4 <__swbuf_r+0x2e>
 8004620:	2e0a      	cmp	r6, #10
 8004622:	d1df      	bne.n	80045e4 <__swbuf_r+0x2e>
 8004624:	4621      	mov	r1, r4
 8004626:	4628      	mov	r0, r5
 8004628:	f000 fda2 	bl	8005170 <_fflush_r>
 800462c:	2800      	cmp	r0, #0
 800462e:	d0d9      	beq.n	80045e4 <__swbuf_r+0x2e>
 8004630:	e7d6      	b.n	80045e0 <__swbuf_r+0x2a>
	...

08004634 <__swsetup_r>:
 8004634:	b538      	push	{r3, r4, r5, lr}
 8004636:	4b29      	ldr	r3, [pc, #164]	@ (80046dc <__swsetup_r+0xa8>)
 8004638:	4605      	mov	r5, r0
 800463a:	6818      	ldr	r0, [r3, #0]
 800463c:	460c      	mov	r4, r1
 800463e:	b118      	cbz	r0, 8004648 <__swsetup_r+0x14>
 8004640:	6a03      	ldr	r3, [r0, #32]
 8004642:	b90b      	cbnz	r3, 8004648 <__swsetup_r+0x14>
 8004644:	f7ff fece 	bl	80043e4 <__sinit>
 8004648:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800464c:	0719      	lsls	r1, r3, #28
 800464e:	d422      	bmi.n	8004696 <__swsetup_r+0x62>
 8004650:	06da      	lsls	r2, r3, #27
 8004652:	d407      	bmi.n	8004664 <__swsetup_r+0x30>
 8004654:	2209      	movs	r2, #9
 8004656:	602a      	str	r2, [r5, #0]
 8004658:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800465c:	81a3      	strh	r3, [r4, #12]
 800465e:	f04f 30ff 	mov.w	r0, #4294967295
 8004662:	e033      	b.n	80046cc <__swsetup_r+0x98>
 8004664:	0758      	lsls	r0, r3, #29
 8004666:	d512      	bpl.n	800468e <__swsetup_r+0x5a>
 8004668:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800466a:	b141      	cbz	r1, 800467e <__swsetup_r+0x4a>
 800466c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004670:	4299      	cmp	r1, r3
 8004672:	d002      	beq.n	800467a <__swsetup_r+0x46>
 8004674:	4628      	mov	r0, r5
 8004676:	f000 f929 	bl	80048cc <_free_r>
 800467a:	2300      	movs	r3, #0
 800467c:	6363      	str	r3, [r4, #52]	@ 0x34
 800467e:	89a3      	ldrh	r3, [r4, #12]
 8004680:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8004684:	81a3      	strh	r3, [r4, #12]
 8004686:	2300      	movs	r3, #0
 8004688:	6063      	str	r3, [r4, #4]
 800468a:	6923      	ldr	r3, [r4, #16]
 800468c:	6023      	str	r3, [r4, #0]
 800468e:	89a3      	ldrh	r3, [r4, #12]
 8004690:	f043 0308 	orr.w	r3, r3, #8
 8004694:	81a3      	strh	r3, [r4, #12]
 8004696:	6923      	ldr	r3, [r4, #16]
 8004698:	b94b      	cbnz	r3, 80046ae <__swsetup_r+0x7a>
 800469a:	89a3      	ldrh	r3, [r4, #12]
 800469c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80046a0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80046a4:	d003      	beq.n	80046ae <__swsetup_r+0x7a>
 80046a6:	4621      	mov	r1, r4
 80046a8:	4628      	mov	r0, r5
 80046aa:	f000 fdc1 	bl	8005230 <__smakebuf_r>
 80046ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80046b2:	f013 0201 	ands.w	r2, r3, #1
 80046b6:	d00a      	beq.n	80046ce <__swsetup_r+0x9a>
 80046b8:	2200      	movs	r2, #0
 80046ba:	60a2      	str	r2, [r4, #8]
 80046bc:	6962      	ldr	r2, [r4, #20]
 80046be:	4252      	negs	r2, r2
 80046c0:	61a2      	str	r2, [r4, #24]
 80046c2:	6922      	ldr	r2, [r4, #16]
 80046c4:	b942      	cbnz	r2, 80046d8 <__swsetup_r+0xa4>
 80046c6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80046ca:	d1c5      	bne.n	8004658 <__swsetup_r+0x24>
 80046cc:	bd38      	pop	{r3, r4, r5, pc}
 80046ce:	0799      	lsls	r1, r3, #30
 80046d0:	bf58      	it	pl
 80046d2:	6962      	ldrpl	r2, [r4, #20]
 80046d4:	60a2      	str	r2, [r4, #8]
 80046d6:	e7f4      	b.n	80046c2 <__swsetup_r+0x8e>
 80046d8:	2000      	movs	r0, #0
 80046da:	e7f7      	b.n	80046cc <__swsetup_r+0x98>
 80046dc:	20000018 	.word	0x20000018

080046e0 <memset>:
 80046e0:	4402      	add	r2, r0
 80046e2:	4603      	mov	r3, r0
 80046e4:	4293      	cmp	r3, r2
 80046e6:	d100      	bne.n	80046ea <memset+0xa>
 80046e8:	4770      	bx	lr
 80046ea:	f803 1b01 	strb.w	r1, [r3], #1
 80046ee:	e7f9      	b.n	80046e4 <memset+0x4>

080046f0 <strtok>:
 80046f0:	4b16      	ldr	r3, [pc, #88]	@ (800474c <strtok+0x5c>)
 80046f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80046f6:	681f      	ldr	r7, [r3, #0]
 80046f8:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 80046fa:	4605      	mov	r5, r0
 80046fc:	460e      	mov	r6, r1
 80046fe:	b9ec      	cbnz	r4, 800473c <strtok+0x4c>
 8004700:	2050      	movs	r0, #80	@ 0x50
 8004702:	f000 f92d 	bl	8004960 <malloc>
 8004706:	4602      	mov	r2, r0
 8004708:	6478      	str	r0, [r7, #68]	@ 0x44
 800470a:	b920      	cbnz	r0, 8004716 <strtok+0x26>
 800470c:	4b10      	ldr	r3, [pc, #64]	@ (8004750 <strtok+0x60>)
 800470e:	4811      	ldr	r0, [pc, #68]	@ (8004754 <strtok+0x64>)
 8004710:	215b      	movs	r1, #91	@ 0x5b
 8004712:	f000 f8bd 	bl	8004890 <__assert_func>
 8004716:	e9c0 4400 	strd	r4, r4, [r0]
 800471a:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800471e:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8004722:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 8004726:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 800472a:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 800472e:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 8004732:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 8004736:	6184      	str	r4, [r0, #24]
 8004738:	7704      	strb	r4, [r0, #28]
 800473a:	6244      	str	r4, [r0, #36]	@ 0x24
 800473c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800473e:	4631      	mov	r1, r6
 8004740:	4628      	mov	r0, r5
 8004742:	2301      	movs	r3, #1
 8004744:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004748:	f000 b806 	b.w	8004758 <__strtok_r>
 800474c:	20000018 	.word	0x20000018
 8004750:	0800545c 	.word	0x0800545c
 8004754:	08005473 	.word	0x08005473

08004758 <__strtok_r>:
 8004758:	b5f0      	push	{r4, r5, r6, r7, lr}
 800475a:	4604      	mov	r4, r0
 800475c:	b908      	cbnz	r0, 8004762 <__strtok_r+0xa>
 800475e:	6814      	ldr	r4, [r2, #0]
 8004760:	b144      	cbz	r4, 8004774 <__strtok_r+0x1c>
 8004762:	4620      	mov	r0, r4
 8004764:	f814 5b01 	ldrb.w	r5, [r4], #1
 8004768:	460f      	mov	r7, r1
 800476a:	f817 6b01 	ldrb.w	r6, [r7], #1
 800476e:	b91e      	cbnz	r6, 8004778 <__strtok_r+0x20>
 8004770:	b965      	cbnz	r5, 800478c <__strtok_r+0x34>
 8004772:	6015      	str	r5, [r2, #0]
 8004774:	2000      	movs	r0, #0
 8004776:	e005      	b.n	8004784 <__strtok_r+0x2c>
 8004778:	42b5      	cmp	r5, r6
 800477a:	d1f6      	bne.n	800476a <__strtok_r+0x12>
 800477c:	2b00      	cmp	r3, #0
 800477e:	d1f0      	bne.n	8004762 <__strtok_r+0xa>
 8004780:	6014      	str	r4, [r2, #0]
 8004782:	7003      	strb	r3, [r0, #0]
 8004784:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004786:	461c      	mov	r4, r3
 8004788:	e00c      	b.n	80047a4 <__strtok_r+0x4c>
 800478a:	b91d      	cbnz	r5, 8004794 <__strtok_r+0x3c>
 800478c:	4627      	mov	r7, r4
 800478e:	f814 3b01 	ldrb.w	r3, [r4], #1
 8004792:	460e      	mov	r6, r1
 8004794:	f816 5b01 	ldrb.w	r5, [r6], #1
 8004798:	42ab      	cmp	r3, r5
 800479a:	d1f6      	bne.n	800478a <__strtok_r+0x32>
 800479c:	2b00      	cmp	r3, #0
 800479e:	d0f2      	beq.n	8004786 <__strtok_r+0x2e>
 80047a0:	2300      	movs	r3, #0
 80047a2:	703b      	strb	r3, [r7, #0]
 80047a4:	6014      	str	r4, [r2, #0]
 80047a6:	e7ed      	b.n	8004784 <__strtok_r+0x2c>

080047a8 <_close_r>:
 80047a8:	b538      	push	{r3, r4, r5, lr}
 80047aa:	4d06      	ldr	r5, [pc, #24]	@ (80047c4 <_close_r+0x1c>)
 80047ac:	2300      	movs	r3, #0
 80047ae:	4604      	mov	r4, r0
 80047b0:	4608      	mov	r0, r1
 80047b2:	602b      	str	r3, [r5, #0]
 80047b4:	f7fc fd8c 	bl	80012d0 <_close>
 80047b8:	1c43      	adds	r3, r0, #1
 80047ba:	d102      	bne.n	80047c2 <_close_r+0x1a>
 80047bc:	682b      	ldr	r3, [r5, #0]
 80047be:	b103      	cbz	r3, 80047c2 <_close_r+0x1a>
 80047c0:	6023      	str	r3, [r4, #0]
 80047c2:	bd38      	pop	{r3, r4, r5, pc}
 80047c4:	200002cc 	.word	0x200002cc

080047c8 <_lseek_r>:
 80047c8:	b538      	push	{r3, r4, r5, lr}
 80047ca:	4d07      	ldr	r5, [pc, #28]	@ (80047e8 <_lseek_r+0x20>)
 80047cc:	4604      	mov	r4, r0
 80047ce:	4608      	mov	r0, r1
 80047d0:	4611      	mov	r1, r2
 80047d2:	2200      	movs	r2, #0
 80047d4:	602a      	str	r2, [r5, #0]
 80047d6:	461a      	mov	r2, r3
 80047d8:	f7fc fda1 	bl	800131e <_lseek>
 80047dc:	1c43      	adds	r3, r0, #1
 80047de:	d102      	bne.n	80047e6 <_lseek_r+0x1e>
 80047e0:	682b      	ldr	r3, [r5, #0]
 80047e2:	b103      	cbz	r3, 80047e6 <_lseek_r+0x1e>
 80047e4:	6023      	str	r3, [r4, #0]
 80047e6:	bd38      	pop	{r3, r4, r5, pc}
 80047e8:	200002cc 	.word	0x200002cc

080047ec <_read_r>:
 80047ec:	b538      	push	{r3, r4, r5, lr}
 80047ee:	4d07      	ldr	r5, [pc, #28]	@ (800480c <_read_r+0x20>)
 80047f0:	4604      	mov	r4, r0
 80047f2:	4608      	mov	r0, r1
 80047f4:	4611      	mov	r1, r2
 80047f6:	2200      	movs	r2, #0
 80047f8:	602a      	str	r2, [r5, #0]
 80047fa:	461a      	mov	r2, r3
 80047fc:	f7fc fd2f 	bl	800125e <_read>
 8004800:	1c43      	adds	r3, r0, #1
 8004802:	d102      	bne.n	800480a <_read_r+0x1e>
 8004804:	682b      	ldr	r3, [r5, #0]
 8004806:	b103      	cbz	r3, 800480a <_read_r+0x1e>
 8004808:	6023      	str	r3, [r4, #0]
 800480a:	bd38      	pop	{r3, r4, r5, pc}
 800480c:	200002cc 	.word	0x200002cc

08004810 <_write_r>:
 8004810:	b538      	push	{r3, r4, r5, lr}
 8004812:	4d07      	ldr	r5, [pc, #28]	@ (8004830 <_write_r+0x20>)
 8004814:	4604      	mov	r4, r0
 8004816:	4608      	mov	r0, r1
 8004818:	4611      	mov	r1, r2
 800481a:	2200      	movs	r2, #0
 800481c:	602a      	str	r2, [r5, #0]
 800481e:	461a      	mov	r2, r3
 8004820:	f7fc fd3a 	bl	8001298 <_write>
 8004824:	1c43      	adds	r3, r0, #1
 8004826:	d102      	bne.n	800482e <_write_r+0x1e>
 8004828:	682b      	ldr	r3, [r5, #0]
 800482a:	b103      	cbz	r3, 800482e <_write_r+0x1e>
 800482c:	6023      	str	r3, [r4, #0]
 800482e:	bd38      	pop	{r3, r4, r5, pc}
 8004830:	200002cc 	.word	0x200002cc

08004834 <__errno>:
 8004834:	4b01      	ldr	r3, [pc, #4]	@ (800483c <__errno+0x8>)
 8004836:	6818      	ldr	r0, [r3, #0]
 8004838:	4770      	bx	lr
 800483a:	bf00      	nop
 800483c:	20000018 	.word	0x20000018

08004840 <__libc_init_array>:
 8004840:	b570      	push	{r4, r5, r6, lr}
 8004842:	4d0d      	ldr	r5, [pc, #52]	@ (8004878 <__libc_init_array+0x38>)
 8004844:	4c0d      	ldr	r4, [pc, #52]	@ (800487c <__libc_init_array+0x3c>)
 8004846:	1b64      	subs	r4, r4, r5
 8004848:	10a4      	asrs	r4, r4, #2
 800484a:	2600      	movs	r6, #0
 800484c:	42a6      	cmp	r6, r4
 800484e:	d109      	bne.n	8004864 <__libc_init_array+0x24>
 8004850:	4d0b      	ldr	r5, [pc, #44]	@ (8004880 <__libc_init_array+0x40>)
 8004852:	4c0c      	ldr	r4, [pc, #48]	@ (8004884 <__libc_init_array+0x44>)
 8004854:	f000 fda6 	bl	80053a4 <_init>
 8004858:	1b64      	subs	r4, r4, r5
 800485a:	10a4      	asrs	r4, r4, #2
 800485c:	2600      	movs	r6, #0
 800485e:	42a6      	cmp	r6, r4
 8004860:	d105      	bne.n	800486e <__libc_init_array+0x2e>
 8004862:	bd70      	pop	{r4, r5, r6, pc}
 8004864:	f855 3b04 	ldr.w	r3, [r5], #4
 8004868:	4798      	blx	r3
 800486a:	3601      	adds	r6, #1
 800486c:	e7ee      	b.n	800484c <__libc_init_array+0xc>
 800486e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004872:	4798      	blx	r3
 8004874:	3601      	adds	r6, #1
 8004876:	e7f2      	b.n	800485e <__libc_init_array+0x1e>
 8004878:	08005544 	.word	0x08005544
 800487c:	08005544 	.word	0x08005544
 8004880:	08005544 	.word	0x08005544
 8004884:	08005548 	.word	0x08005548

08004888 <__retarget_lock_init_recursive>:
 8004888:	4770      	bx	lr

0800488a <__retarget_lock_acquire_recursive>:
 800488a:	4770      	bx	lr

0800488c <__retarget_lock_release_recursive>:
 800488c:	4770      	bx	lr
	...

08004890 <__assert_func>:
 8004890:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004892:	4614      	mov	r4, r2
 8004894:	461a      	mov	r2, r3
 8004896:	4b09      	ldr	r3, [pc, #36]	@ (80048bc <__assert_func+0x2c>)
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	4605      	mov	r5, r0
 800489c:	68d8      	ldr	r0, [r3, #12]
 800489e:	b14c      	cbz	r4, 80048b4 <__assert_func+0x24>
 80048a0:	4b07      	ldr	r3, [pc, #28]	@ (80048c0 <__assert_func+0x30>)
 80048a2:	9100      	str	r1, [sp, #0]
 80048a4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80048a8:	4906      	ldr	r1, [pc, #24]	@ (80048c4 <__assert_func+0x34>)
 80048aa:	462b      	mov	r3, r5
 80048ac:	f000 fc88 	bl	80051c0 <fiprintf>
 80048b0:	f000 fd2c 	bl	800530c <abort>
 80048b4:	4b04      	ldr	r3, [pc, #16]	@ (80048c8 <__assert_func+0x38>)
 80048b6:	461c      	mov	r4, r3
 80048b8:	e7f3      	b.n	80048a2 <__assert_func+0x12>
 80048ba:	bf00      	nop
 80048bc:	20000018 	.word	0x20000018
 80048c0:	080054cd 	.word	0x080054cd
 80048c4:	080054da 	.word	0x080054da
 80048c8:	08005508 	.word	0x08005508

080048cc <_free_r>:
 80048cc:	b538      	push	{r3, r4, r5, lr}
 80048ce:	4605      	mov	r5, r0
 80048d0:	2900      	cmp	r1, #0
 80048d2:	d041      	beq.n	8004958 <_free_r+0x8c>
 80048d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80048d8:	1f0c      	subs	r4, r1, #4
 80048da:	2b00      	cmp	r3, #0
 80048dc:	bfb8      	it	lt
 80048de:	18e4      	addlt	r4, r4, r3
 80048e0:	f000 f8e8 	bl	8004ab4 <__malloc_lock>
 80048e4:	4a1d      	ldr	r2, [pc, #116]	@ (800495c <_free_r+0x90>)
 80048e6:	6813      	ldr	r3, [r2, #0]
 80048e8:	b933      	cbnz	r3, 80048f8 <_free_r+0x2c>
 80048ea:	6063      	str	r3, [r4, #4]
 80048ec:	6014      	str	r4, [r2, #0]
 80048ee:	4628      	mov	r0, r5
 80048f0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80048f4:	f000 b8e4 	b.w	8004ac0 <__malloc_unlock>
 80048f8:	42a3      	cmp	r3, r4
 80048fa:	d908      	bls.n	800490e <_free_r+0x42>
 80048fc:	6820      	ldr	r0, [r4, #0]
 80048fe:	1821      	adds	r1, r4, r0
 8004900:	428b      	cmp	r3, r1
 8004902:	bf01      	itttt	eq
 8004904:	6819      	ldreq	r1, [r3, #0]
 8004906:	685b      	ldreq	r3, [r3, #4]
 8004908:	1809      	addeq	r1, r1, r0
 800490a:	6021      	streq	r1, [r4, #0]
 800490c:	e7ed      	b.n	80048ea <_free_r+0x1e>
 800490e:	461a      	mov	r2, r3
 8004910:	685b      	ldr	r3, [r3, #4]
 8004912:	b10b      	cbz	r3, 8004918 <_free_r+0x4c>
 8004914:	42a3      	cmp	r3, r4
 8004916:	d9fa      	bls.n	800490e <_free_r+0x42>
 8004918:	6811      	ldr	r1, [r2, #0]
 800491a:	1850      	adds	r0, r2, r1
 800491c:	42a0      	cmp	r0, r4
 800491e:	d10b      	bne.n	8004938 <_free_r+0x6c>
 8004920:	6820      	ldr	r0, [r4, #0]
 8004922:	4401      	add	r1, r0
 8004924:	1850      	adds	r0, r2, r1
 8004926:	4283      	cmp	r3, r0
 8004928:	6011      	str	r1, [r2, #0]
 800492a:	d1e0      	bne.n	80048ee <_free_r+0x22>
 800492c:	6818      	ldr	r0, [r3, #0]
 800492e:	685b      	ldr	r3, [r3, #4]
 8004930:	6053      	str	r3, [r2, #4]
 8004932:	4408      	add	r0, r1
 8004934:	6010      	str	r0, [r2, #0]
 8004936:	e7da      	b.n	80048ee <_free_r+0x22>
 8004938:	d902      	bls.n	8004940 <_free_r+0x74>
 800493a:	230c      	movs	r3, #12
 800493c:	602b      	str	r3, [r5, #0]
 800493e:	e7d6      	b.n	80048ee <_free_r+0x22>
 8004940:	6820      	ldr	r0, [r4, #0]
 8004942:	1821      	adds	r1, r4, r0
 8004944:	428b      	cmp	r3, r1
 8004946:	bf04      	itt	eq
 8004948:	6819      	ldreq	r1, [r3, #0]
 800494a:	685b      	ldreq	r3, [r3, #4]
 800494c:	6063      	str	r3, [r4, #4]
 800494e:	bf04      	itt	eq
 8004950:	1809      	addeq	r1, r1, r0
 8004952:	6021      	streq	r1, [r4, #0]
 8004954:	6054      	str	r4, [r2, #4]
 8004956:	e7ca      	b.n	80048ee <_free_r+0x22>
 8004958:	bd38      	pop	{r3, r4, r5, pc}
 800495a:	bf00      	nop
 800495c:	200002d8 	.word	0x200002d8

08004960 <malloc>:
 8004960:	4b02      	ldr	r3, [pc, #8]	@ (800496c <malloc+0xc>)
 8004962:	4601      	mov	r1, r0
 8004964:	6818      	ldr	r0, [r3, #0]
 8004966:	f000 b825 	b.w	80049b4 <_malloc_r>
 800496a:	bf00      	nop
 800496c:	20000018 	.word	0x20000018

08004970 <sbrk_aligned>:
 8004970:	b570      	push	{r4, r5, r6, lr}
 8004972:	4e0f      	ldr	r6, [pc, #60]	@ (80049b0 <sbrk_aligned+0x40>)
 8004974:	460c      	mov	r4, r1
 8004976:	6831      	ldr	r1, [r6, #0]
 8004978:	4605      	mov	r5, r0
 800497a:	b911      	cbnz	r1, 8004982 <sbrk_aligned+0x12>
 800497c:	f000 fcb6 	bl	80052ec <_sbrk_r>
 8004980:	6030      	str	r0, [r6, #0]
 8004982:	4621      	mov	r1, r4
 8004984:	4628      	mov	r0, r5
 8004986:	f000 fcb1 	bl	80052ec <_sbrk_r>
 800498a:	1c43      	adds	r3, r0, #1
 800498c:	d103      	bne.n	8004996 <sbrk_aligned+0x26>
 800498e:	f04f 34ff 	mov.w	r4, #4294967295
 8004992:	4620      	mov	r0, r4
 8004994:	bd70      	pop	{r4, r5, r6, pc}
 8004996:	1cc4      	adds	r4, r0, #3
 8004998:	f024 0403 	bic.w	r4, r4, #3
 800499c:	42a0      	cmp	r0, r4
 800499e:	d0f8      	beq.n	8004992 <sbrk_aligned+0x22>
 80049a0:	1a21      	subs	r1, r4, r0
 80049a2:	4628      	mov	r0, r5
 80049a4:	f000 fca2 	bl	80052ec <_sbrk_r>
 80049a8:	3001      	adds	r0, #1
 80049aa:	d1f2      	bne.n	8004992 <sbrk_aligned+0x22>
 80049ac:	e7ef      	b.n	800498e <sbrk_aligned+0x1e>
 80049ae:	bf00      	nop
 80049b0:	200002d4 	.word	0x200002d4

080049b4 <_malloc_r>:
 80049b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80049b8:	1ccd      	adds	r5, r1, #3
 80049ba:	f025 0503 	bic.w	r5, r5, #3
 80049be:	3508      	adds	r5, #8
 80049c0:	2d0c      	cmp	r5, #12
 80049c2:	bf38      	it	cc
 80049c4:	250c      	movcc	r5, #12
 80049c6:	2d00      	cmp	r5, #0
 80049c8:	4606      	mov	r6, r0
 80049ca:	db01      	blt.n	80049d0 <_malloc_r+0x1c>
 80049cc:	42a9      	cmp	r1, r5
 80049ce:	d904      	bls.n	80049da <_malloc_r+0x26>
 80049d0:	230c      	movs	r3, #12
 80049d2:	6033      	str	r3, [r6, #0]
 80049d4:	2000      	movs	r0, #0
 80049d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80049da:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004ab0 <_malloc_r+0xfc>
 80049de:	f000 f869 	bl	8004ab4 <__malloc_lock>
 80049e2:	f8d8 3000 	ldr.w	r3, [r8]
 80049e6:	461c      	mov	r4, r3
 80049e8:	bb44      	cbnz	r4, 8004a3c <_malloc_r+0x88>
 80049ea:	4629      	mov	r1, r5
 80049ec:	4630      	mov	r0, r6
 80049ee:	f7ff ffbf 	bl	8004970 <sbrk_aligned>
 80049f2:	1c43      	adds	r3, r0, #1
 80049f4:	4604      	mov	r4, r0
 80049f6:	d158      	bne.n	8004aaa <_malloc_r+0xf6>
 80049f8:	f8d8 4000 	ldr.w	r4, [r8]
 80049fc:	4627      	mov	r7, r4
 80049fe:	2f00      	cmp	r7, #0
 8004a00:	d143      	bne.n	8004a8a <_malloc_r+0xd6>
 8004a02:	2c00      	cmp	r4, #0
 8004a04:	d04b      	beq.n	8004a9e <_malloc_r+0xea>
 8004a06:	6823      	ldr	r3, [r4, #0]
 8004a08:	4639      	mov	r1, r7
 8004a0a:	4630      	mov	r0, r6
 8004a0c:	eb04 0903 	add.w	r9, r4, r3
 8004a10:	f000 fc6c 	bl	80052ec <_sbrk_r>
 8004a14:	4581      	cmp	r9, r0
 8004a16:	d142      	bne.n	8004a9e <_malloc_r+0xea>
 8004a18:	6821      	ldr	r1, [r4, #0]
 8004a1a:	1a6d      	subs	r5, r5, r1
 8004a1c:	4629      	mov	r1, r5
 8004a1e:	4630      	mov	r0, r6
 8004a20:	f7ff ffa6 	bl	8004970 <sbrk_aligned>
 8004a24:	3001      	adds	r0, #1
 8004a26:	d03a      	beq.n	8004a9e <_malloc_r+0xea>
 8004a28:	6823      	ldr	r3, [r4, #0]
 8004a2a:	442b      	add	r3, r5
 8004a2c:	6023      	str	r3, [r4, #0]
 8004a2e:	f8d8 3000 	ldr.w	r3, [r8]
 8004a32:	685a      	ldr	r2, [r3, #4]
 8004a34:	bb62      	cbnz	r2, 8004a90 <_malloc_r+0xdc>
 8004a36:	f8c8 7000 	str.w	r7, [r8]
 8004a3a:	e00f      	b.n	8004a5c <_malloc_r+0xa8>
 8004a3c:	6822      	ldr	r2, [r4, #0]
 8004a3e:	1b52      	subs	r2, r2, r5
 8004a40:	d420      	bmi.n	8004a84 <_malloc_r+0xd0>
 8004a42:	2a0b      	cmp	r2, #11
 8004a44:	d917      	bls.n	8004a76 <_malloc_r+0xc2>
 8004a46:	1961      	adds	r1, r4, r5
 8004a48:	42a3      	cmp	r3, r4
 8004a4a:	6025      	str	r5, [r4, #0]
 8004a4c:	bf18      	it	ne
 8004a4e:	6059      	strne	r1, [r3, #4]
 8004a50:	6863      	ldr	r3, [r4, #4]
 8004a52:	bf08      	it	eq
 8004a54:	f8c8 1000 	streq.w	r1, [r8]
 8004a58:	5162      	str	r2, [r4, r5]
 8004a5a:	604b      	str	r3, [r1, #4]
 8004a5c:	4630      	mov	r0, r6
 8004a5e:	f000 f82f 	bl	8004ac0 <__malloc_unlock>
 8004a62:	f104 000b 	add.w	r0, r4, #11
 8004a66:	1d23      	adds	r3, r4, #4
 8004a68:	f020 0007 	bic.w	r0, r0, #7
 8004a6c:	1ac2      	subs	r2, r0, r3
 8004a6e:	bf1c      	itt	ne
 8004a70:	1a1b      	subne	r3, r3, r0
 8004a72:	50a3      	strne	r3, [r4, r2]
 8004a74:	e7af      	b.n	80049d6 <_malloc_r+0x22>
 8004a76:	6862      	ldr	r2, [r4, #4]
 8004a78:	42a3      	cmp	r3, r4
 8004a7a:	bf0c      	ite	eq
 8004a7c:	f8c8 2000 	streq.w	r2, [r8]
 8004a80:	605a      	strne	r2, [r3, #4]
 8004a82:	e7eb      	b.n	8004a5c <_malloc_r+0xa8>
 8004a84:	4623      	mov	r3, r4
 8004a86:	6864      	ldr	r4, [r4, #4]
 8004a88:	e7ae      	b.n	80049e8 <_malloc_r+0x34>
 8004a8a:	463c      	mov	r4, r7
 8004a8c:	687f      	ldr	r7, [r7, #4]
 8004a8e:	e7b6      	b.n	80049fe <_malloc_r+0x4a>
 8004a90:	461a      	mov	r2, r3
 8004a92:	685b      	ldr	r3, [r3, #4]
 8004a94:	42a3      	cmp	r3, r4
 8004a96:	d1fb      	bne.n	8004a90 <_malloc_r+0xdc>
 8004a98:	2300      	movs	r3, #0
 8004a9a:	6053      	str	r3, [r2, #4]
 8004a9c:	e7de      	b.n	8004a5c <_malloc_r+0xa8>
 8004a9e:	230c      	movs	r3, #12
 8004aa0:	6033      	str	r3, [r6, #0]
 8004aa2:	4630      	mov	r0, r6
 8004aa4:	f000 f80c 	bl	8004ac0 <__malloc_unlock>
 8004aa8:	e794      	b.n	80049d4 <_malloc_r+0x20>
 8004aaa:	6005      	str	r5, [r0, #0]
 8004aac:	e7d6      	b.n	8004a5c <_malloc_r+0xa8>
 8004aae:	bf00      	nop
 8004ab0:	200002d8 	.word	0x200002d8

08004ab4 <__malloc_lock>:
 8004ab4:	4801      	ldr	r0, [pc, #4]	@ (8004abc <__malloc_lock+0x8>)
 8004ab6:	f7ff bee8 	b.w	800488a <__retarget_lock_acquire_recursive>
 8004aba:	bf00      	nop
 8004abc:	200002d0 	.word	0x200002d0

08004ac0 <__malloc_unlock>:
 8004ac0:	4801      	ldr	r0, [pc, #4]	@ (8004ac8 <__malloc_unlock+0x8>)
 8004ac2:	f7ff bee3 	b.w	800488c <__retarget_lock_release_recursive>
 8004ac6:	bf00      	nop
 8004ac8:	200002d0 	.word	0x200002d0

08004acc <__sfputc_r>:
 8004acc:	6893      	ldr	r3, [r2, #8]
 8004ace:	3b01      	subs	r3, #1
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	b410      	push	{r4}
 8004ad4:	6093      	str	r3, [r2, #8]
 8004ad6:	da08      	bge.n	8004aea <__sfputc_r+0x1e>
 8004ad8:	6994      	ldr	r4, [r2, #24]
 8004ada:	42a3      	cmp	r3, r4
 8004adc:	db01      	blt.n	8004ae2 <__sfputc_r+0x16>
 8004ade:	290a      	cmp	r1, #10
 8004ae0:	d103      	bne.n	8004aea <__sfputc_r+0x1e>
 8004ae2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004ae6:	f7ff bd66 	b.w	80045b6 <__swbuf_r>
 8004aea:	6813      	ldr	r3, [r2, #0]
 8004aec:	1c58      	adds	r0, r3, #1
 8004aee:	6010      	str	r0, [r2, #0]
 8004af0:	7019      	strb	r1, [r3, #0]
 8004af2:	4608      	mov	r0, r1
 8004af4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004af8:	4770      	bx	lr

08004afa <__sfputs_r>:
 8004afa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004afc:	4606      	mov	r6, r0
 8004afe:	460f      	mov	r7, r1
 8004b00:	4614      	mov	r4, r2
 8004b02:	18d5      	adds	r5, r2, r3
 8004b04:	42ac      	cmp	r4, r5
 8004b06:	d101      	bne.n	8004b0c <__sfputs_r+0x12>
 8004b08:	2000      	movs	r0, #0
 8004b0a:	e007      	b.n	8004b1c <__sfputs_r+0x22>
 8004b0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004b10:	463a      	mov	r2, r7
 8004b12:	4630      	mov	r0, r6
 8004b14:	f7ff ffda 	bl	8004acc <__sfputc_r>
 8004b18:	1c43      	adds	r3, r0, #1
 8004b1a:	d1f3      	bne.n	8004b04 <__sfputs_r+0xa>
 8004b1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004b20 <_vfiprintf_r>:
 8004b20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b24:	460d      	mov	r5, r1
 8004b26:	b09d      	sub	sp, #116	@ 0x74
 8004b28:	4614      	mov	r4, r2
 8004b2a:	4698      	mov	r8, r3
 8004b2c:	4606      	mov	r6, r0
 8004b2e:	b118      	cbz	r0, 8004b38 <_vfiprintf_r+0x18>
 8004b30:	6a03      	ldr	r3, [r0, #32]
 8004b32:	b90b      	cbnz	r3, 8004b38 <_vfiprintf_r+0x18>
 8004b34:	f7ff fc56 	bl	80043e4 <__sinit>
 8004b38:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004b3a:	07d9      	lsls	r1, r3, #31
 8004b3c:	d405      	bmi.n	8004b4a <_vfiprintf_r+0x2a>
 8004b3e:	89ab      	ldrh	r3, [r5, #12]
 8004b40:	059a      	lsls	r2, r3, #22
 8004b42:	d402      	bmi.n	8004b4a <_vfiprintf_r+0x2a>
 8004b44:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004b46:	f7ff fea0 	bl	800488a <__retarget_lock_acquire_recursive>
 8004b4a:	89ab      	ldrh	r3, [r5, #12]
 8004b4c:	071b      	lsls	r3, r3, #28
 8004b4e:	d501      	bpl.n	8004b54 <_vfiprintf_r+0x34>
 8004b50:	692b      	ldr	r3, [r5, #16]
 8004b52:	b99b      	cbnz	r3, 8004b7c <_vfiprintf_r+0x5c>
 8004b54:	4629      	mov	r1, r5
 8004b56:	4630      	mov	r0, r6
 8004b58:	f7ff fd6c 	bl	8004634 <__swsetup_r>
 8004b5c:	b170      	cbz	r0, 8004b7c <_vfiprintf_r+0x5c>
 8004b5e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004b60:	07dc      	lsls	r4, r3, #31
 8004b62:	d504      	bpl.n	8004b6e <_vfiprintf_r+0x4e>
 8004b64:	f04f 30ff 	mov.w	r0, #4294967295
 8004b68:	b01d      	add	sp, #116	@ 0x74
 8004b6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b6e:	89ab      	ldrh	r3, [r5, #12]
 8004b70:	0598      	lsls	r0, r3, #22
 8004b72:	d4f7      	bmi.n	8004b64 <_vfiprintf_r+0x44>
 8004b74:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004b76:	f7ff fe89 	bl	800488c <__retarget_lock_release_recursive>
 8004b7a:	e7f3      	b.n	8004b64 <_vfiprintf_r+0x44>
 8004b7c:	2300      	movs	r3, #0
 8004b7e:	9309      	str	r3, [sp, #36]	@ 0x24
 8004b80:	2320      	movs	r3, #32
 8004b82:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004b86:	f8cd 800c 	str.w	r8, [sp, #12]
 8004b8a:	2330      	movs	r3, #48	@ 0x30
 8004b8c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8004d3c <_vfiprintf_r+0x21c>
 8004b90:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004b94:	f04f 0901 	mov.w	r9, #1
 8004b98:	4623      	mov	r3, r4
 8004b9a:	469a      	mov	sl, r3
 8004b9c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004ba0:	b10a      	cbz	r2, 8004ba6 <_vfiprintf_r+0x86>
 8004ba2:	2a25      	cmp	r2, #37	@ 0x25
 8004ba4:	d1f9      	bne.n	8004b9a <_vfiprintf_r+0x7a>
 8004ba6:	ebba 0b04 	subs.w	fp, sl, r4
 8004baa:	d00b      	beq.n	8004bc4 <_vfiprintf_r+0xa4>
 8004bac:	465b      	mov	r3, fp
 8004bae:	4622      	mov	r2, r4
 8004bb0:	4629      	mov	r1, r5
 8004bb2:	4630      	mov	r0, r6
 8004bb4:	f7ff ffa1 	bl	8004afa <__sfputs_r>
 8004bb8:	3001      	adds	r0, #1
 8004bba:	f000 80a7 	beq.w	8004d0c <_vfiprintf_r+0x1ec>
 8004bbe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004bc0:	445a      	add	r2, fp
 8004bc2:	9209      	str	r2, [sp, #36]	@ 0x24
 8004bc4:	f89a 3000 	ldrb.w	r3, [sl]
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	f000 809f 	beq.w	8004d0c <_vfiprintf_r+0x1ec>
 8004bce:	2300      	movs	r3, #0
 8004bd0:	f04f 32ff 	mov.w	r2, #4294967295
 8004bd4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004bd8:	f10a 0a01 	add.w	sl, sl, #1
 8004bdc:	9304      	str	r3, [sp, #16]
 8004bde:	9307      	str	r3, [sp, #28]
 8004be0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004be4:	931a      	str	r3, [sp, #104]	@ 0x68
 8004be6:	4654      	mov	r4, sl
 8004be8:	2205      	movs	r2, #5
 8004bea:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004bee:	4853      	ldr	r0, [pc, #332]	@ (8004d3c <_vfiprintf_r+0x21c>)
 8004bf0:	f7fb fafe 	bl	80001f0 <memchr>
 8004bf4:	9a04      	ldr	r2, [sp, #16]
 8004bf6:	b9d8      	cbnz	r0, 8004c30 <_vfiprintf_r+0x110>
 8004bf8:	06d1      	lsls	r1, r2, #27
 8004bfa:	bf44      	itt	mi
 8004bfc:	2320      	movmi	r3, #32
 8004bfe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004c02:	0713      	lsls	r3, r2, #28
 8004c04:	bf44      	itt	mi
 8004c06:	232b      	movmi	r3, #43	@ 0x2b
 8004c08:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004c0c:	f89a 3000 	ldrb.w	r3, [sl]
 8004c10:	2b2a      	cmp	r3, #42	@ 0x2a
 8004c12:	d015      	beq.n	8004c40 <_vfiprintf_r+0x120>
 8004c14:	9a07      	ldr	r2, [sp, #28]
 8004c16:	4654      	mov	r4, sl
 8004c18:	2000      	movs	r0, #0
 8004c1a:	f04f 0c0a 	mov.w	ip, #10
 8004c1e:	4621      	mov	r1, r4
 8004c20:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004c24:	3b30      	subs	r3, #48	@ 0x30
 8004c26:	2b09      	cmp	r3, #9
 8004c28:	d94b      	bls.n	8004cc2 <_vfiprintf_r+0x1a2>
 8004c2a:	b1b0      	cbz	r0, 8004c5a <_vfiprintf_r+0x13a>
 8004c2c:	9207      	str	r2, [sp, #28]
 8004c2e:	e014      	b.n	8004c5a <_vfiprintf_r+0x13a>
 8004c30:	eba0 0308 	sub.w	r3, r0, r8
 8004c34:	fa09 f303 	lsl.w	r3, r9, r3
 8004c38:	4313      	orrs	r3, r2
 8004c3a:	9304      	str	r3, [sp, #16]
 8004c3c:	46a2      	mov	sl, r4
 8004c3e:	e7d2      	b.n	8004be6 <_vfiprintf_r+0xc6>
 8004c40:	9b03      	ldr	r3, [sp, #12]
 8004c42:	1d19      	adds	r1, r3, #4
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	9103      	str	r1, [sp, #12]
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	bfbb      	ittet	lt
 8004c4c:	425b      	neglt	r3, r3
 8004c4e:	f042 0202 	orrlt.w	r2, r2, #2
 8004c52:	9307      	strge	r3, [sp, #28]
 8004c54:	9307      	strlt	r3, [sp, #28]
 8004c56:	bfb8      	it	lt
 8004c58:	9204      	strlt	r2, [sp, #16]
 8004c5a:	7823      	ldrb	r3, [r4, #0]
 8004c5c:	2b2e      	cmp	r3, #46	@ 0x2e
 8004c5e:	d10a      	bne.n	8004c76 <_vfiprintf_r+0x156>
 8004c60:	7863      	ldrb	r3, [r4, #1]
 8004c62:	2b2a      	cmp	r3, #42	@ 0x2a
 8004c64:	d132      	bne.n	8004ccc <_vfiprintf_r+0x1ac>
 8004c66:	9b03      	ldr	r3, [sp, #12]
 8004c68:	1d1a      	adds	r2, r3, #4
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	9203      	str	r2, [sp, #12]
 8004c6e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004c72:	3402      	adds	r4, #2
 8004c74:	9305      	str	r3, [sp, #20]
 8004c76:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8004d4c <_vfiprintf_r+0x22c>
 8004c7a:	7821      	ldrb	r1, [r4, #0]
 8004c7c:	2203      	movs	r2, #3
 8004c7e:	4650      	mov	r0, sl
 8004c80:	f7fb fab6 	bl	80001f0 <memchr>
 8004c84:	b138      	cbz	r0, 8004c96 <_vfiprintf_r+0x176>
 8004c86:	9b04      	ldr	r3, [sp, #16]
 8004c88:	eba0 000a 	sub.w	r0, r0, sl
 8004c8c:	2240      	movs	r2, #64	@ 0x40
 8004c8e:	4082      	lsls	r2, r0
 8004c90:	4313      	orrs	r3, r2
 8004c92:	3401      	adds	r4, #1
 8004c94:	9304      	str	r3, [sp, #16]
 8004c96:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004c9a:	4829      	ldr	r0, [pc, #164]	@ (8004d40 <_vfiprintf_r+0x220>)
 8004c9c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004ca0:	2206      	movs	r2, #6
 8004ca2:	f7fb faa5 	bl	80001f0 <memchr>
 8004ca6:	2800      	cmp	r0, #0
 8004ca8:	d03f      	beq.n	8004d2a <_vfiprintf_r+0x20a>
 8004caa:	4b26      	ldr	r3, [pc, #152]	@ (8004d44 <_vfiprintf_r+0x224>)
 8004cac:	bb1b      	cbnz	r3, 8004cf6 <_vfiprintf_r+0x1d6>
 8004cae:	9b03      	ldr	r3, [sp, #12]
 8004cb0:	3307      	adds	r3, #7
 8004cb2:	f023 0307 	bic.w	r3, r3, #7
 8004cb6:	3308      	adds	r3, #8
 8004cb8:	9303      	str	r3, [sp, #12]
 8004cba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004cbc:	443b      	add	r3, r7
 8004cbe:	9309      	str	r3, [sp, #36]	@ 0x24
 8004cc0:	e76a      	b.n	8004b98 <_vfiprintf_r+0x78>
 8004cc2:	fb0c 3202 	mla	r2, ip, r2, r3
 8004cc6:	460c      	mov	r4, r1
 8004cc8:	2001      	movs	r0, #1
 8004cca:	e7a8      	b.n	8004c1e <_vfiprintf_r+0xfe>
 8004ccc:	2300      	movs	r3, #0
 8004cce:	3401      	adds	r4, #1
 8004cd0:	9305      	str	r3, [sp, #20]
 8004cd2:	4619      	mov	r1, r3
 8004cd4:	f04f 0c0a 	mov.w	ip, #10
 8004cd8:	4620      	mov	r0, r4
 8004cda:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004cde:	3a30      	subs	r2, #48	@ 0x30
 8004ce0:	2a09      	cmp	r2, #9
 8004ce2:	d903      	bls.n	8004cec <_vfiprintf_r+0x1cc>
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d0c6      	beq.n	8004c76 <_vfiprintf_r+0x156>
 8004ce8:	9105      	str	r1, [sp, #20]
 8004cea:	e7c4      	b.n	8004c76 <_vfiprintf_r+0x156>
 8004cec:	fb0c 2101 	mla	r1, ip, r1, r2
 8004cf0:	4604      	mov	r4, r0
 8004cf2:	2301      	movs	r3, #1
 8004cf4:	e7f0      	b.n	8004cd8 <_vfiprintf_r+0x1b8>
 8004cf6:	ab03      	add	r3, sp, #12
 8004cf8:	9300      	str	r3, [sp, #0]
 8004cfa:	462a      	mov	r2, r5
 8004cfc:	4b12      	ldr	r3, [pc, #72]	@ (8004d48 <_vfiprintf_r+0x228>)
 8004cfe:	a904      	add	r1, sp, #16
 8004d00:	4630      	mov	r0, r6
 8004d02:	f3af 8000 	nop.w
 8004d06:	4607      	mov	r7, r0
 8004d08:	1c78      	adds	r0, r7, #1
 8004d0a:	d1d6      	bne.n	8004cba <_vfiprintf_r+0x19a>
 8004d0c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004d0e:	07d9      	lsls	r1, r3, #31
 8004d10:	d405      	bmi.n	8004d1e <_vfiprintf_r+0x1fe>
 8004d12:	89ab      	ldrh	r3, [r5, #12]
 8004d14:	059a      	lsls	r2, r3, #22
 8004d16:	d402      	bmi.n	8004d1e <_vfiprintf_r+0x1fe>
 8004d18:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004d1a:	f7ff fdb7 	bl	800488c <__retarget_lock_release_recursive>
 8004d1e:	89ab      	ldrh	r3, [r5, #12]
 8004d20:	065b      	lsls	r3, r3, #25
 8004d22:	f53f af1f 	bmi.w	8004b64 <_vfiprintf_r+0x44>
 8004d26:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004d28:	e71e      	b.n	8004b68 <_vfiprintf_r+0x48>
 8004d2a:	ab03      	add	r3, sp, #12
 8004d2c:	9300      	str	r3, [sp, #0]
 8004d2e:	462a      	mov	r2, r5
 8004d30:	4b05      	ldr	r3, [pc, #20]	@ (8004d48 <_vfiprintf_r+0x228>)
 8004d32:	a904      	add	r1, sp, #16
 8004d34:	4630      	mov	r0, r6
 8004d36:	f000 f879 	bl	8004e2c <_printf_i>
 8004d3a:	e7e4      	b.n	8004d06 <_vfiprintf_r+0x1e6>
 8004d3c:	08005509 	.word	0x08005509
 8004d40:	08005513 	.word	0x08005513
 8004d44:	00000000 	.word	0x00000000
 8004d48:	08004afb 	.word	0x08004afb
 8004d4c:	0800550f 	.word	0x0800550f

08004d50 <_printf_common>:
 8004d50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004d54:	4616      	mov	r6, r2
 8004d56:	4698      	mov	r8, r3
 8004d58:	688a      	ldr	r2, [r1, #8]
 8004d5a:	690b      	ldr	r3, [r1, #16]
 8004d5c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004d60:	4293      	cmp	r3, r2
 8004d62:	bfb8      	it	lt
 8004d64:	4613      	movlt	r3, r2
 8004d66:	6033      	str	r3, [r6, #0]
 8004d68:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004d6c:	4607      	mov	r7, r0
 8004d6e:	460c      	mov	r4, r1
 8004d70:	b10a      	cbz	r2, 8004d76 <_printf_common+0x26>
 8004d72:	3301      	adds	r3, #1
 8004d74:	6033      	str	r3, [r6, #0]
 8004d76:	6823      	ldr	r3, [r4, #0]
 8004d78:	0699      	lsls	r1, r3, #26
 8004d7a:	bf42      	ittt	mi
 8004d7c:	6833      	ldrmi	r3, [r6, #0]
 8004d7e:	3302      	addmi	r3, #2
 8004d80:	6033      	strmi	r3, [r6, #0]
 8004d82:	6825      	ldr	r5, [r4, #0]
 8004d84:	f015 0506 	ands.w	r5, r5, #6
 8004d88:	d106      	bne.n	8004d98 <_printf_common+0x48>
 8004d8a:	f104 0a19 	add.w	sl, r4, #25
 8004d8e:	68e3      	ldr	r3, [r4, #12]
 8004d90:	6832      	ldr	r2, [r6, #0]
 8004d92:	1a9b      	subs	r3, r3, r2
 8004d94:	42ab      	cmp	r3, r5
 8004d96:	dc26      	bgt.n	8004de6 <_printf_common+0x96>
 8004d98:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004d9c:	6822      	ldr	r2, [r4, #0]
 8004d9e:	3b00      	subs	r3, #0
 8004da0:	bf18      	it	ne
 8004da2:	2301      	movne	r3, #1
 8004da4:	0692      	lsls	r2, r2, #26
 8004da6:	d42b      	bmi.n	8004e00 <_printf_common+0xb0>
 8004da8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004dac:	4641      	mov	r1, r8
 8004dae:	4638      	mov	r0, r7
 8004db0:	47c8      	blx	r9
 8004db2:	3001      	adds	r0, #1
 8004db4:	d01e      	beq.n	8004df4 <_printf_common+0xa4>
 8004db6:	6823      	ldr	r3, [r4, #0]
 8004db8:	6922      	ldr	r2, [r4, #16]
 8004dba:	f003 0306 	and.w	r3, r3, #6
 8004dbe:	2b04      	cmp	r3, #4
 8004dc0:	bf02      	ittt	eq
 8004dc2:	68e5      	ldreq	r5, [r4, #12]
 8004dc4:	6833      	ldreq	r3, [r6, #0]
 8004dc6:	1aed      	subeq	r5, r5, r3
 8004dc8:	68a3      	ldr	r3, [r4, #8]
 8004dca:	bf0c      	ite	eq
 8004dcc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004dd0:	2500      	movne	r5, #0
 8004dd2:	4293      	cmp	r3, r2
 8004dd4:	bfc4      	itt	gt
 8004dd6:	1a9b      	subgt	r3, r3, r2
 8004dd8:	18ed      	addgt	r5, r5, r3
 8004dda:	2600      	movs	r6, #0
 8004ddc:	341a      	adds	r4, #26
 8004dde:	42b5      	cmp	r5, r6
 8004de0:	d11a      	bne.n	8004e18 <_printf_common+0xc8>
 8004de2:	2000      	movs	r0, #0
 8004de4:	e008      	b.n	8004df8 <_printf_common+0xa8>
 8004de6:	2301      	movs	r3, #1
 8004de8:	4652      	mov	r2, sl
 8004dea:	4641      	mov	r1, r8
 8004dec:	4638      	mov	r0, r7
 8004dee:	47c8      	blx	r9
 8004df0:	3001      	adds	r0, #1
 8004df2:	d103      	bne.n	8004dfc <_printf_common+0xac>
 8004df4:	f04f 30ff 	mov.w	r0, #4294967295
 8004df8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004dfc:	3501      	adds	r5, #1
 8004dfe:	e7c6      	b.n	8004d8e <_printf_common+0x3e>
 8004e00:	18e1      	adds	r1, r4, r3
 8004e02:	1c5a      	adds	r2, r3, #1
 8004e04:	2030      	movs	r0, #48	@ 0x30
 8004e06:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004e0a:	4422      	add	r2, r4
 8004e0c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004e10:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004e14:	3302      	adds	r3, #2
 8004e16:	e7c7      	b.n	8004da8 <_printf_common+0x58>
 8004e18:	2301      	movs	r3, #1
 8004e1a:	4622      	mov	r2, r4
 8004e1c:	4641      	mov	r1, r8
 8004e1e:	4638      	mov	r0, r7
 8004e20:	47c8      	blx	r9
 8004e22:	3001      	adds	r0, #1
 8004e24:	d0e6      	beq.n	8004df4 <_printf_common+0xa4>
 8004e26:	3601      	adds	r6, #1
 8004e28:	e7d9      	b.n	8004dde <_printf_common+0x8e>
	...

08004e2c <_printf_i>:
 8004e2c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004e30:	7e0f      	ldrb	r7, [r1, #24]
 8004e32:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004e34:	2f78      	cmp	r7, #120	@ 0x78
 8004e36:	4691      	mov	r9, r2
 8004e38:	4680      	mov	r8, r0
 8004e3a:	460c      	mov	r4, r1
 8004e3c:	469a      	mov	sl, r3
 8004e3e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004e42:	d807      	bhi.n	8004e54 <_printf_i+0x28>
 8004e44:	2f62      	cmp	r7, #98	@ 0x62
 8004e46:	d80a      	bhi.n	8004e5e <_printf_i+0x32>
 8004e48:	2f00      	cmp	r7, #0
 8004e4a:	f000 80d1 	beq.w	8004ff0 <_printf_i+0x1c4>
 8004e4e:	2f58      	cmp	r7, #88	@ 0x58
 8004e50:	f000 80b8 	beq.w	8004fc4 <_printf_i+0x198>
 8004e54:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004e58:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004e5c:	e03a      	b.n	8004ed4 <_printf_i+0xa8>
 8004e5e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004e62:	2b15      	cmp	r3, #21
 8004e64:	d8f6      	bhi.n	8004e54 <_printf_i+0x28>
 8004e66:	a101      	add	r1, pc, #4	@ (adr r1, 8004e6c <_printf_i+0x40>)
 8004e68:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004e6c:	08004ec5 	.word	0x08004ec5
 8004e70:	08004ed9 	.word	0x08004ed9
 8004e74:	08004e55 	.word	0x08004e55
 8004e78:	08004e55 	.word	0x08004e55
 8004e7c:	08004e55 	.word	0x08004e55
 8004e80:	08004e55 	.word	0x08004e55
 8004e84:	08004ed9 	.word	0x08004ed9
 8004e88:	08004e55 	.word	0x08004e55
 8004e8c:	08004e55 	.word	0x08004e55
 8004e90:	08004e55 	.word	0x08004e55
 8004e94:	08004e55 	.word	0x08004e55
 8004e98:	08004fd7 	.word	0x08004fd7
 8004e9c:	08004f03 	.word	0x08004f03
 8004ea0:	08004f91 	.word	0x08004f91
 8004ea4:	08004e55 	.word	0x08004e55
 8004ea8:	08004e55 	.word	0x08004e55
 8004eac:	08004ff9 	.word	0x08004ff9
 8004eb0:	08004e55 	.word	0x08004e55
 8004eb4:	08004f03 	.word	0x08004f03
 8004eb8:	08004e55 	.word	0x08004e55
 8004ebc:	08004e55 	.word	0x08004e55
 8004ec0:	08004f99 	.word	0x08004f99
 8004ec4:	6833      	ldr	r3, [r6, #0]
 8004ec6:	1d1a      	adds	r2, r3, #4
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	6032      	str	r2, [r6, #0]
 8004ecc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004ed0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004ed4:	2301      	movs	r3, #1
 8004ed6:	e09c      	b.n	8005012 <_printf_i+0x1e6>
 8004ed8:	6833      	ldr	r3, [r6, #0]
 8004eda:	6820      	ldr	r0, [r4, #0]
 8004edc:	1d19      	adds	r1, r3, #4
 8004ede:	6031      	str	r1, [r6, #0]
 8004ee0:	0606      	lsls	r6, r0, #24
 8004ee2:	d501      	bpl.n	8004ee8 <_printf_i+0xbc>
 8004ee4:	681d      	ldr	r5, [r3, #0]
 8004ee6:	e003      	b.n	8004ef0 <_printf_i+0xc4>
 8004ee8:	0645      	lsls	r5, r0, #25
 8004eea:	d5fb      	bpl.n	8004ee4 <_printf_i+0xb8>
 8004eec:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004ef0:	2d00      	cmp	r5, #0
 8004ef2:	da03      	bge.n	8004efc <_printf_i+0xd0>
 8004ef4:	232d      	movs	r3, #45	@ 0x2d
 8004ef6:	426d      	negs	r5, r5
 8004ef8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004efc:	4858      	ldr	r0, [pc, #352]	@ (8005060 <_printf_i+0x234>)
 8004efe:	230a      	movs	r3, #10
 8004f00:	e011      	b.n	8004f26 <_printf_i+0xfa>
 8004f02:	6821      	ldr	r1, [r4, #0]
 8004f04:	6833      	ldr	r3, [r6, #0]
 8004f06:	0608      	lsls	r0, r1, #24
 8004f08:	f853 5b04 	ldr.w	r5, [r3], #4
 8004f0c:	d402      	bmi.n	8004f14 <_printf_i+0xe8>
 8004f0e:	0649      	lsls	r1, r1, #25
 8004f10:	bf48      	it	mi
 8004f12:	b2ad      	uxthmi	r5, r5
 8004f14:	2f6f      	cmp	r7, #111	@ 0x6f
 8004f16:	4852      	ldr	r0, [pc, #328]	@ (8005060 <_printf_i+0x234>)
 8004f18:	6033      	str	r3, [r6, #0]
 8004f1a:	bf14      	ite	ne
 8004f1c:	230a      	movne	r3, #10
 8004f1e:	2308      	moveq	r3, #8
 8004f20:	2100      	movs	r1, #0
 8004f22:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004f26:	6866      	ldr	r6, [r4, #4]
 8004f28:	60a6      	str	r6, [r4, #8]
 8004f2a:	2e00      	cmp	r6, #0
 8004f2c:	db05      	blt.n	8004f3a <_printf_i+0x10e>
 8004f2e:	6821      	ldr	r1, [r4, #0]
 8004f30:	432e      	orrs	r6, r5
 8004f32:	f021 0104 	bic.w	r1, r1, #4
 8004f36:	6021      	str	r1, [r4, #0]
 8004f38:	d04b      	beq.n	8004fd2 <_printf_i+0x1a6>
 8004f3a:	4616      	mov	r6, r2
 8004f3c:	fbb5 f1f3 	udiv	r1, r5, r3
 8004f40:	fb03 5711 	mls	r7, r3, r1, r5
 8004f44:	5dc7      	ldrb	r7, [r0, r7]
 8004f46:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004f4a:	462f      	mov	r7, r5
 8004f4c:	42bb      	cmp	r3, r7
 8004f4e:	460d      	mov	r5, r1
 8004f50:	d9f4      	bls.n	8004f3c <_printf_i+0x110>
 8004f52:	2b08      	cmp	r3, #8
 8004f54:	d10b      	bne.n	8004f6e <_printf_i+0x142>
 8004f56:	6823      	ldr	r3, [r4, #0]
 8004f58:	07df      	lsls	r7, r3, #31
 8004f5a:	d508      	bpl.n	8004f6e <_printf_i+0x142>
 8004f5c:	6923      	ldr	r3, [r4, #16]
 8004f5e:	6861      	ldr	r1, [r4, #4]
 8004f60:	4299      	cmp	r1, r3
 8004f62:	bfde      	ittt	le
 8004f64:	2330      	movle	r3, #48	@ 0x30
 8004f66:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004f6a:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004f6e:	1b92      	subs	r2, r2, r6
 8004f70:	6122      	str	r2, [r4, #16]
 8004f72:	f8cd a000 	str.w	sl, [sp]
 8004f76:	464b      	mov	r3, r9
 8004f78:	aa03      	add	r2, sp, #12
 8004f7a:	4621      	mov	r1, r4
 8004f7c:	4640      	mov	r0, r8
 8004f7e:	f7ff fee7 	bl	8004d50 <_printf_common>
 8004f82:	3001      	adds	r0, #1
 8004f84:	d14a      	bne.n	800501c <_printf_i+0x1f0>
 8004f86:	f04f 30ff 	mov.w	r0, #4294967295
 8004f8a:	b004      	add	sp, #16
 8004f8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f90:	6823      	ldr	r3, [r4, #0]
 8004f92:	f043 0320 	orr.w	r3, r3, #32
 8004f96:	6023      	str	r3, [r4, #0]
 8004f98:	4832      	ldr	r0, [pc, #200]	@ (8005064 <_printf_i+0x238>)
 8004f9a:	2778      	movs	r7, #120	@ 0x78
 8004f9c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004fa0:	6823      	ldr	r3, [r4, #0]
 8004fa2:	6831      	ldr	r1, [r6, #0]
 8004fa4:	061f      	lsls	r7, r3, #24
 8004fa6:	f851 5b04 	ldr.w	r5, [r1], #4
 8004faa:	d402      	bmi.n	8004fb2 <_printf_i+0x186>
 8004fac:	065f      	lsls	r7, r3, #25
 8004fae:	bf48      	it	mi
 8004fb0:	b2ad      	uxthmi	r5, r5
 8004fb2:	6031      	str	r1, [r6, #0]
 8004fb4:	07d9      	lsls	r1, r3, #31
 8004fb6:	bf44      	itt	mi
 8004fb8:	f043 0320 	orrmi.w	r3, r3, #32
 8004fbc:	6023      	strmi	r3, [r4, #0]
 8004fbe:	b11d      	cbz	r5, 8004fc8 <_printf_i+0x19c>
 8004fc0:	2310      	movs	r3, #16
 8004fc2:	e7ad      	b.n	8004f20 <_printf_i+0xf4>
 8004fc4:	4826      	ldr	r0, [pc, #152]	@ (8005060 <_printf_i+0x234>)
 8004fc6:	e7e9      	b.n	8004f9c <_printf_i+0x170>
 8004fc8:	6823      	ldr	r3, [r4, #0]
 8004fca:	f023 0320 	bic.w	r3, r3, #32
 8004fce:	6023      	str	r3, [r4, #0]
 8004fd0:	e7f6      	b.n	8004fc0 <_printf_i+0x194>
 8004fd2:	4616      	mov	r6, r2
 8004fd4:	e7bd      	b.n	8004f52 <_printf_i+0x126>
 8004fd6:	6833      	ldr	r3, [r6, #0]
 8004fd8:	6825      	ldr	r5, [r4, #0]
 8004fda:	6961      	ldr	r1, [r4, #20]
 8004fdc:	1d18      	adds	r0, r3, #4
 8004fde:	6030      	str	r0, [r6, #0]
 8004fe0:	062e      	lsls	r6, r5, #24
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	d501      	bpl.n	8004fea <_printf_i+0x1be>
 8004fe6:	6019      	str	r1, [r3, #0]
 8004fe8:	e002      	b.n	8004ff0 <_printf_i+0x1c4>
 8004fea:	0668      	lsls	r0, r5, #25
 8004fec:	d5fb      	bpl.n	8004fe6 <_printf_i+0x1ba>
 8004fee:	8019      	strh	r1, [r3, #0]
 8004ff0:	2300      	movs	r3, #0
 8004ff2:	6123      	str	r3, [r4, #16]
 8004ff4:	4616      	mov	r6, r2
 8004ff6:	e7bc      	b.n	8004f72 <_printf_i+0x146>
 8004ff8:	6833      	ldr	r3, [r6, #0]
 8004ffa:	1d1a      	adds	r2, r3, #4
 8004ffc:	6032      	str	r2, [r6, #0]
 8004ffe:	681e      	ldr	r6, [r3, #0]
 8005000:	6862      	ldr	r2, [r4, #4]
 8005002:	2100      	movs	r1, #0
 8005004:	4630      	mov	r0, r6
 8005006:	f7fb f8f3 	bl	80001f0 <memchr>
 800500a:	b108      	cbz	r0, 8005010 <_printf_i+0x1e4>
 800500c:	1b80      	subs	r0, r0, r6
 800500e:	6060      	str	r0, [r4, #4]
 8005010:	6863      	ldr	r3, [r4, #4]
 8005012:	6123      	str	r3, [r4, #16]
 8005014:	2300      	movs	r3, #0
 8005016:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800501a:	e7aa      	b.n	8004f72 <_printf_i+0x146>
 800501c:	6923      	ldr	r3, [r4, #16]
 800501e:	4632      	mov	r2, r6
 8005020:	4649      	mov	r1, r9
 8005022:	4640      	mov	r0, r8
 8005024:	47d0      	blx	sl
 8005026:	3001      	adds	r0, #1
 8005028:	d0ad      	beq.n	8004f86 <_printf_i+0x15a>
 800502a:	6823      	ldr	r3, [r4, #0]
 800502c:	079b      	lsls	r3, r3, #30
 800502e:	d413      	bmi.n	8005058 <_printf_i+0x22c>
 8005030:	68e0      	ldr	r0, [r4, #12]
 8005032:	9b03      	ldr	r3, [sp, #12]
 8005034:	4298      	cmp	r0, r3
 8005036:	bfb8      	it	lt
 8005038:	4618      	movlt	r0, r3
 800503a:	e7a6      	b.n	8004f8a <_printf_i+0x15e>
 800503c:	2301      	movs	r3, #1
 800503e:	4632      	mov	r2, r6
 8005040:	4649      	mov	r1, r9
 8005042:	4640      	mov	r0, r8
 8005044:	47d0      	blx	sl
 8005046:	3001      	adds	r0, #1
 8005048:	d09d      	beq.n	8004f86 <_printf_i+0x15a>
 800504a:	3501      	adds	r5, #1
 800504c:	68e3      	ldr	r3, [r4, #12]
 800504e:	9903      	ldr	r1, [sp, #12]
 8005050:	1a5b      	subs	r3, r3, r1
 8005052:	42ab      	cmp	r3, r5
 8005054:	dcf2      	bgt.n	800503c <_printf_i+0x210>
 8005056:	e7eb      	b.n	8005030 <_printf_i+0x204>
 8005058:	2500      	movs	r5, #0
 800505a:	f104 0619 	add.w	r6, r4, #25
 800505e:	e7f5      	b.n	800504c <_printf_i+0x220>
 8005060:	0800551a 	.word	0x0800551a
 8005064:	0800552b 	.word	0x0800552b

08005068 <__sflush_r>:
 8005068:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800506c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005070:	0716      	lsls	r6, r2, #28
 8005072:	4605      	mov	r5, r0
 8005074:	460c      	mov	r4, r1
 8005076:	d454      	bmi.n	8005122 <__sflush_r+0xba>
 8005078:	684b      	ldr	r3, [r1, #4]
 800507a:	2b00      	cmp	r3, #0
 800507c:	dc02      	bgt.n	8005084 <__sflush_r+0x1c>
 800507e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8005080:	2b00      	cmp	r3, #0
 8005082:	dd48      	ble.n	8005116 <__sflush_r+0xae>
 8005084:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005086:	2e00      	cmp	r6, #0
 8005088:	d045      	beq.n	8005116 <__sflush_r+0xae>
 800508a:	2300      	movs	r3, #0
 800508c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8005090:	682f      	ldr	r7, [r5, #0]
 8005092:	6a21      	ldr	r1, [r4, #32]
 8005094:	602b      	str	r3, [r5, #0]
 8005096:	d030      	beq.n	80050fa <__sflush_r+0x92>
 8005098:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800509a:	89a3      	ldrh	r3, [r4, #12]
 800509c:	0759      	lsls	r1, r3, #29
 800509e:	d505      	bpl.n	80050ac <__sflush_r+0x44>
 80050a0:	6863      	ldr	r3, [r4, #4]
 80050a2:	1ad2      	subs	r2, r2, r3
 80050a4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80050a6:	b10b      	cbz	r3, 80050ac <__sflush_r+0x44>
 80050a8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80050aa:	1ad2      	subs	r2, r2, r3
 80050ac:	2300      	movs	r3, #0
 80050ae:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80050b0:	6a21      	ldr	r1, [r4, #32]
 80050b2:	4628      	mov	r0, r5
 80050b4:	47b0      	blx	r6
 80050b6:	1c43      	adds	r3, r0, #1
 80050b8:	89a3      	ldrh	r3, [r4, #12]
 80050ba:	d106      	bne.n	80050ca <__sflush_r+0x62>
 80050bc:	6829      	ldr	r1, [r5, #0]
 80050be:	291d      	cmp	r1, #29
 80050c0:	d82b      	bhi.n	800511a <__sflush_r+0xb2>
 80050c2:	4a2a      	ldr	r2, [pc, #168]	@ (800516c <__sflush_r+0x104>)
 80050c4:	40ca      	lsrs	r2, r1
 80050c6:	07d6      	lsls	r6, r2, #31
 80050c8:	d527      	bpl.n	800511a <__sflush_r+0xb2>
 80050ca:	2200      	movs	r2, #0
 80050cc:	6062      	str	r2, [r4, #4]
 80050ce:	04d9      	lsls	r1, r3, #19
 80050d0:	6922      	ldr	r2, [r4, #16]
 80050d2:	6022      	str	r2, [r4, #0]
 80050d4:	d504      	bpl.n	80050e0 <__sflush_r+0x78>
 80050d6:	1c42      	adds	r2, r0, #1
 80050d8:	d101      	bne.n	80050de <__sflush_r+0x76>
 80050da:	682b      	ldr	r3, [r5, #0]
 80050dc:	b903      	cbnz	r3, 80050e0 <__sflush_r+0x78>
 80050de:	6560      	str	r0, [r4, #84]	@ 0x54
 80050e0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80050e2:	602f      	str	r7, [r5, #0]
 80050e4:	b1b9      	cbz	r1, 8005116 <__sflush_r+0xae>
 80050e6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80050ea:	4299      	cmp	r1, r3
 80050ec:	d002      	beq.n	80050f4 <__sflush_r+0x8c>
 80050ee:	4628      	mov	r0, r5
 80050f0:	f7ff fbec 	bl	80048cc <_free_r>
 80050f4:	2300      	movs	r3, #0
 80050f6:	6363      	str	r3, [r4, #52]	@ 0x34
 80050f8:	e00d      	b.n	8005116 <__sflush_r+0xae>
 80050fa:	2301      	movs	r3, #1
 80050fc:	4628      	mov	r0, r5
 80050fe:	47b0      	blx	r6
 8005100:	4602      	mov	r2, r0
 8005102:	1c50      	adds	r0, r2, #1
 8005104:	d1c9      	bne.n	800509a <__sflush_r+0x32>
 8005106:	682b      	ldr	r3, [r5, #0]
 8005108:	2b00      	cmp	r3, #0
 800510a:	d0c6      	beq.n	800509a <__sflush_r+0x32>
 800510c:	2b1d      	cmp	r3, #29
 800510e:	d001      	beq.n	8005114 <__sflush_r+0xac>
 8005110:	2b16      	cmp	r3, #22
 8005112:	d11e      	bne.n	8005152 <__sflush_r+0xea>
 8005114:	602f      	str	r7, [r5, #0]
 8005116:	2000      	movs	r0, #0
 8005118:	e022      	b.n	8005160 <__sflush_r+0xf8>
 800511a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800511e:	b21b      	sxth	r3, r3
 8005120:	e01b      	b.n	800515a <__sflush_r+0xf2>
 8005122:	690f      	ldr	r7, [r1, #16]
 8005124:	2f00      	cmp	r7, #0
 8005126:	d0f6      	beq.n	8005116 <__sflush_r+0xae>
 8005128:	0793      	lsls	r3, r2, #30
 800512a:	680e      	ldr	r6, [r1, #0]
 800512c:	bf08      	it	eq
 800512e:	694b      	ldreq	r3, [r1, #20]
 8005130:	600f      	str	r7, [r1, #0]
 8005132:	bf18      	it	ne
 8005134:	2300      	movne	r3, #0
 8005136:	eba6 0807 	sub.w	r8, r6, r7
 800513a:	608b      	str	r3, [r1, #8]
 800513c:	f1b8 0f00 	cmp.w	r8, #0
 8005140:	dde9      	ble.n	8005116 <__sflush_r+0xae>
 8005142:	6a21      	ldr	r1, [r4, #32]
 8005144:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8005146:	4643      	mov	r3, r8
 8005148:	463a      	mov	r2, r7
 800514a:	4628      	mov	r0, r5
 800514c:	47b0      	blx	r6
 800514e:	2800      	cmp	r0, #0
 8005150:	dc08      	bgt.n	8005164 <__sflush_r+0xfc>
 8005152:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005156:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800515a:	81a3      	strh	r3, [r4, #12]
 800515c:	f04f 30ff 	mov.w	r0, #4294967295
 8005160:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005164:	4407      	add	r7, r0
 8005166:	eba8 0800 	sub.w	r8, r8, r0
 800516a:	e7e7      	b.n	800513c <__sflush_r+0xd4>
 800516c:	20400001 	.word	0x20400001

08005170 <_fflush_r>:
 8005170:	b538      	push	{r3, r4, r5, lr}
 8005172:	690b      	ldr	r3, [r1, #16]
 8005174:	4605      	mov	r5, r0
 8005176:	460c      	mov	r4, r1
 8005178:	b913      	cbnz	r3, 8005180 <_fflush_r+0x10>
 800517a:	2500      	movs	r5, #0
 800517c:	4628      	mov	r0, r5
 800517e:	bd38      	pop	{r3, r4, r5, pc}
 8005180:	b118      	cbz	r0, 800518a <_fflush_r+0x1a>
 8005182:	6a03      	ldr	r3, [r0, #32]
 8005184:	b90b      	cbnz	r3, 800518a <_fflush_r+0x1a>
 8005186:	f7ff f92d 	bl	80043e4 <__sinit>
 800518a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800518e:	2b00      	cmp	r3, #0
 8005190:	d0f3      	beq.n	800517a <_fflush_r+0xa>
 8005192:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005194:	07d0      	lsls	r0, r2, #31
 8005196:	d404      	bmi.n	80051a2 <_fflush_r+0x32>
 8005198:	0599      	lsls	r1, r3, #22
 800519a:	d402      	bmi.n	80051a2 <_fflush_r+0x32>
 800519c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800519e:	f7ff fb74 	bl	800488a <__retarget_lock_acquire_recursive>
 80051a2:	4628      	mov	r0, r5
 80051a4:	4621      	mov	r1, r4
 80051a6:	f7ff ff5f 	bl	8005068 <__sflush_r>
 80051aa:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80051ac:	07da      	lsls	r2, r3, #31
 80051ae:	4605      	mov	r5, r0
 80051b0:	d4e4      	bmi.n	800517c <_fflush_r+0xc>
 80051b2:	89a3      	ldrh	r3, [r4, #12]
 80051b4:	059b      	lsls	r3, r3, #22
 80051b6:	d4e1      	bmi.n	800517c <_fflush_r+0xc>
 80051b8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80051ba:	f7ff fb67 	bl	800488c <__retarget_lock_release_recursive>
 80051be:	e7dd      	b.n	800517c <_fflush_r+0xc>

080051c0 <fiprintf>:
 80051c0:	b40e      	push	{r1, r2, r3}
 80051c2:	b503      	push	{r0, r1, lr}
 80051c4:	4601      	mov	r1, r0
 80051c6:	ab03      	add	r3, sp, #12
 80051c8:	4805      	ldr	r0, [pc, #20]	@ (80051e0 <fiprintf+0x20>)
 80051ca:	f853 2b04 	ldr.w	r2, [r3], #4
 80051ce:	6800      	ldr	r0, [r0, #0]
 80051d0:	9301      	str	r3, [sp, #4]
 80051d2:	f7ff fca5 	bl	8004b20 <_vfiprintf_r>
 80051d6:	b002      	add	sp, #8
 80051d8:	f85d eb04 	ldr.w	lr, [sp], #4
 80051dc:	b003      	add	sp, #12
 80051de:	4770      	bx	lr
 80051e0:	20000018 	.word	0x20000018

080051e4 <__swhatbuf_r>:
 80051e4:	b570      	push	{r4, r5, r6, lr}
 80051e6:	460c      	mov	r4, r1
 80051e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80051ec:	2900      	cmp	r1, #0
 80051ee:	b096      	sub	sp, #88	@ 0x58
 80051f0:	4615      	mov	r5, r2
 80051f2:	461e      	mov	r6, r3
 80051f4:	da0d      	bge.n	8005212 <__swhatbuf_r+0x2e>
 80051f6:	89a3      	ldrh	r3, [r4, #12]
 80051f8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80051fc:	f04f 0100 	mov.w	r1, #0
 8005200:	bf14      	ite	ne
 8005202:	2340      	movne	r3, #64	@ 0x40
 8005204:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8005208:	2000      	movs	r0, #0
 800520a:	6031      	str	r1, [r6, #0]
 800520c:	602b      	str	r3, [r5, #0]
 800520e:	b016      	add	sp, #88	@ 0x58
 8005210:	bd70      	pop	{r4, r5, r6, pc}
 8005212:	466a      	mov	r2, sp
 8005214:	f000 f848 	bl	80052a8 <_fstat_r>
 8005218:	2800      	cmp	r0, #0
 800521a:	dbec      	blt.n	80051f6 <__swhatbuf_r+0x12>
 800521c:	9901      	ldr	r1, [sp, #4]
 800521e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8005222:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8005226:	4259      	negs	r1, r3
 8005228:	4159      	adcs	r1, r3
 800522a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800522e:	e7eb      	b.n	8005208 <__swhatbuf_r+0x24>

08005230 <__smakebuf_r>:
 8005230:	898b      	ldrh	r3, [r1, #12]
 8005232:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005234:	079d      	lsls	r5, r3, #30
 8005236:	4606      	mov	r6, r0
 8005238:	460c      	mov	r4, r1
 800523a:	d507      	bpl.n	800524c <__smakebuf_r+0x1c>
 800523c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8005240:	6023      	str	r3, [r4, #0]
 8005242:	6123      	str	r3, [r4, #16]
 8005244:	2301      	movs	r3, #1
 8005246:	6163      	str	r3, [r4, #20]
 8005248:	b003      	add	sp, #12
 800524a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800524c:	ab01      	add	r3, sp, #4
 800524e:	466a      	mov	r2, sp
 8005250:	f7ff ffc8 	bl	80051e4 <__swhatbuf_r>
 8005254:	9f00      	ldr	r7, [sp, #0]
 8005256:	4605      	mov	r5, r0
 8005258:	4639      	mov	r1, r7
 800525a:	4630      	mov	r0, r6
 800525c:	f7ff fbaa 	bl	80049b4 <_malloc_r>
 8005260:	b948      	cbnz	r0, 8005276 <__smakebuf_r+0x46>
 8005262:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005266:	059a      	lsls	r2, r3, #22
 8005268:	d4ee      	bmi.n	8005248 <__smakebuf_r+0x18>
 800526a:	f023 0303 	bic.w	r3, r3, #3
 800526e:	f043 0302 	orr.w	r3, r3, #2
 8005272:	81a3      	strh	r3, [r4, #12]
 8005274:	e7e2      	b.n	800523c <__smakebuf_r+0xc>
 8005276:	89a3      	ldrh	r3, [r4, #12]
 8005278:	6020      	str	r0, [r4, #0]
 800527a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800527e:	81a3      	strh	r3, [r4, #12]
 8005280:	9b01      	ldr	r3, [sp, #4]
 8005282:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8005286:	b15b      	cbz	r3, 80052a0 <__smakebuf_r+0x70>
 8005288:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800528c:	4630      	mov	r0, r6
 800528e:	f000 f81d 	bl	80052cc <_isatty_r>
 8005292:	b128      	cbz	r0, 80052a0 <__smakebuf_r+0x70>
 8005294:	89a3      	ldrh	r3, [r4, #12]
 8005296:	f023 0303 	bic.w	r3, r3, #3
 800529a:	f043 0301 	orr.w	r3, r3, #1
 800529e:	81a3      	strh	r3, [r4, #12]
 80052a0:	89a3      	ldrh	r3, [r4, #12]
 80052a2:	431d      	orrs	r5, r3
 80052a4:	81a5      	strh	r5, [r4, #12]
 80052a6:	e7cf      	b.n	8005248 <__smakebuf_r+0x18>

080052a8 <_fstat_r>:
 80052a8:	b538      	push	{r3, r4, r5, lr}
 80052aa:	4d07      	ldr	r5, [pc, #28]	@ (80052c8 <_fstat_r+0x20>)
 80052ac:	2300      	movs	r3, #0
 80052ae:	4604      	mov	r4, r0
 80052b0:	4608      	mov	r0, r1
 80052b2:	4611      	mov	r1, r2
 80052b4:	602b      	str	r3, [r5, #0]
 80052b6:	f7fc f817 	bl	80012e8 <_fstat>
 80052ba:	1c43      	adds	r3, r0, #1
 80052bc:	d102      	bne.n	80052c4 <_fstat_r+0x1c>
 80052be:	682b      	ldr	r3, [r5, #0]
 80052c0:	b103      	cbz	r3, 80052c4 <_fstat_r+0x1c>
 80052c2:	6023      	str	r3, [r4, #0]
 80052c4:	bd38      	pop	{r3, r4, r5, pc}
 80052c6:	bf00      	nop
 80052c8:	200002cc 	.word	0x200002cc

080052cc <_isatty_r>:
 80052cc:	b538      	push	{r3, r4, r5, lr}
 80052ce:	4d06      	ldr	r5, [pc, #24]	@ (80052e8 <_isatty_r+0x1c>)
 80052d0:	2300      	movs	r3, #0
 80052d2:	4604      	mov	r4, r0
 80052d4:	4608      	mov	r0, r1
 80052d6:	602b      	str	r3, [r5, #0]
 80052d8:	f7fc f816 	bl	8001308 <_isatty>
 80052dc:	1c43      	adds	r3, r0, #1
 80052de:	d102      	bne.n	80052e6 <_isatty_r+0x1a>
 80052e0:	682b      	ldr	r3, [r5, #0]
 80052e2:	b103      	cbz	r3, 80052e6 <_isatty_r+0x1a>
 80052e4:	6023      	str	r3, [r4, #0]
 80052e6:	bd38      	pop	{r3, r4, r5, pc}
 80052e8:	200002cc 	.word	0x200002cc

080052ec <_sbrk_r>:
 80052ec:	b538      	push	{r3, r4, r5, lr}
 80052ee:	4d06      	ldr	r5, [pc, #24]	@ (8005308 <_sbrk_r+0x1c>)
 80052f0:	2300      	movs	r3, #0
 80052f2:	4604      	mov	r4, r0
 80052f4:	4608      	mov	r0, r1
 80052f6:	602b      	str	r3, [r5, #0]
 80052f8:	f7fc f81e 	bl	8001338 <_sbrk>
 80052fc:	1c43      	adds	r3, r0, #1
 80052fe:	d102      	bne.n	8005306 <_sbrk_r+0x1a>
 8005300:	682b      	ldr	r3, [r5, #0]
 8005302:	b103      	cbz	r3, 8005306 <_sbrk_r+0x1a>
 8005304:	6023      	str	r3, [r4, #0]
 8005306:	bd38      	pop	{r3, r4, r5, pc}
 8005308:	200002cc 	.word	0x200002cc

0800530c <abort>:
 800530c:	b508      	push	{r3, lr}
 800530e:	2006      	movs	r0, #6
 8005310:	f000 f82c 	bl	800536c <raise>
 8005314:	2001      	movs	r0, #1
 8005316:	f7fb ff97 	bl	8001248 <_exit>

0800531a <_raise_r>:
 800531a:	291f      	cmp	r1, #31
 800531c:	b538      	push	{r3, r4, r5, lr}
 800531e:	4605      	mov	r5, r0
 8005320:	460c      	mov	r4, r1
 8005322:	d904      	bls.n	800532e <_raise_r+0x14>
 8005324:	2316      	movs	r3, #22
 8005326:	6003      	str	r3, [r0, #0]
 8005328:	f04f 30ff 	mov.w	r0, #4294967295
 800532c:	bd38      	pop	{r3, r4, r5, pc}
 800532e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8005330:	b112      	cbz	r2, 8005338 <_raise_r+0x1e>
 8005332:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005336:	b94b      	cbnz	r3, 800534c <_raise_r+0x32>
 8005338:	4628      	mov	r0, r5
 800533a:	f000 f831 	bl	80053a0 <_getpid_r>
 800533e:	4622      	mov	r2, r4
 8005340:	4601      	mov	r1, r0
 8005342:	4628      	mov	r0, r5
 8005344:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005348:	f000 b818 	b.w	800537c <_kill_r>
 800534c:	2b01      	cmp	r3, #1
 800534e:	d00a      	beq.n	8005366 <_raise_r+0x4c>
 8005350:	1c59      	adds	r1, r3, #1
 8005352:	d103      	bne.n	800535c <_raise_r+0x42>
 8005354:	2316      	movs	r3, #22
 8005356:	6003      	str	r3, [r0, #0]
 8005358:	2001      	movs	r0, #1
 800535a:	e7e7      	b.n	800532c <_raise_r+0x12>
 800535c:	2100      	movs	r1, #0
 800535e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8005362:	4620      	mov	r0, r4
 8005364:	4798      	blx	r3
 8005366:	2000      	movs	r0, #0
 8005368:	e7e0      	b.n	800532c <_raise_r+0x12>
	...

0800536c <raise>:
 800536c:	4b02      	ldr	r3, [pc, #8]	@ (8005378 <raise+0xc>)
 800536e:	4601      	mov	r1, r0
 8005370:	6818      	ldr	r0, [r3, #0]
 8005372:	f7ff bfd2 	b.w	800531a <_raise_r>
 8005376:	bf00      	nop
 8005378:	20000018 	.word	0x20000018

0800537c <_kill_r>:
 800537c:	b538      	push	{r3, r4, r5, lr}
 800537e:	4d07      	ldr	r5, [pc, #28]	@ (800539c <_kill_r+0x20>)
 8005380:	2300      	movs	r3, #0
 8005382:	4604      	mov	r4, r0
 8005384:	4608      	mov	r0, r1
 8005386:	4611      	mov	r1, r2
 8005388:	602b      	str	r3, [r5, #0]
 800538a:	f7fb ff4d 	bl	8001228 <_kill>
 800538e:	1c43      	adds	r3, r0, #1
 8005390:	d102      	bne.n	8005398 <_kill_r+0x1c>
 8005392:	682b      	ldr	r3, [r5, #0]
 8005394:	b103      	cbz	r3, 8005398 <_kill_r+0x1c>
 8005396:	6023      	str	r3, [r4, #0]
 8005398:	bd38      	pop	{r3, r4, r5, pc}
 800539a:	bf00      	nop
 800539c:	200002cc 	.word	0x200002cc

080053a0 <_getpid_r>:
 80053a0:	f7fb bf3a 	b.w	8001218 <_getpid>

080053a4 <_init>:
 80053a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053a6:	bf00      	nop
 80053a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80053aa:	bc08      	pop	{r3}
 80053ac:	469e      	mov	lr, r3
 80053ae:	4770      	bx	lr

080053b0 <_fini>:
 80053b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053b2:	bf00      	nop
 80053b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80053b6:	bc08      	pop	{r3}
 80053b8:	469e      	mov	lr, r3
 80053ba:	4770      	bx	lr
